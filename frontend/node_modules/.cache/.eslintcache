[{"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\index.js":"1","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\App.js":"2","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Home.js":"3","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\ConsultantDashboard.js":"4","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Dashboard.js":"5","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\hooks\\useAuth.js":"6","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Navbar.js":"7","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Login.js":"8","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Signup.js":"9","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\AdminDashboard.js":"10","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLine.js":"11","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Sidebar.js":"12","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ExcelEditor.js":"13","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentLanding.js":"14","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentView.js":"15","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineLanding.js":"16","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipment.js":"17","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackLanding.js":"18","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPack.js":"19","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackView.js":"20","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineView.js":"21"},{"size":259,"mtime":1717579923617,"results":"22","hashOfConfig":"23"},{"size":3552,"mtime":1722002207192,"results":"24","hashOfConfig":"23"},{"size":762,"mtime":1721293784366,"results":"25","hashOfConfig":"23"},{"size":1363,"mtime":1721292767838,"results":"26","hashOfConfig":"23"},{"size":1261,"mtime":1717595088658,"results":"27","hashOfConfig":"23"},{"size":3113,"mtime":1722007517204,"results":"28","hashOfConfig":"23"},{"size":1282,"mtime":1721293768828,"results":"29","hashOfConfig":"23"},{"size":6170,"mtime":1722002410683,"results":"30","hashOfConfig":"23"},{"size":4668,"mtime":1721985936442,"results":"31","hashOfConfig":"23"},{"size":15569,"mtime":1721892662661,"results":"32","hashOfConfig":"23"},{"size":16582,"mtime":1722346059245,"results":"33","hashOfConfig":"23"},{"size":2354,"mtime":1721982507192,"results":"34","hashOfConfig":"23"},{"size":5962,"mtime":1721398358148,"results":"35","hashOfConfig":"23"},{"size":1785,"mtime":1722237153809,"results":"36","hashOfConfig":"23"},{"size":10421,"mtime":1722353468876,"results":"37","hashOfConfig":"23"},{"size":1877,"mtime":1722236914473,"results":"38","hashOfConfig":"23"},{"size":27157,"mtime":1722333577058,"results":"39","hashOfConfig":"23"},{"size":1839,"mtime":1722337421370,"results":"40","hashOfConfig":"23"},{"size":28210,"mtime":1722334927357,"results":"41","hashOfConfig":"23"},{"size":9191,"mtime":1722337401249,"results":"42","hashOfConfig":"23"},{"size":9711,"mtime":1722301346388,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"10eak4g",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\index.js",[],["92","93"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\App.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Home.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\ConsultantDashboard.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Dashboard.js",[],["94","95"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\hooks\\useAuth.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Navbar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Login.js",["96"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport loginpageimage from '../../assets/loginpageimage.jpg';\nimport { FaEye, FaEyeSlash, FaSpinner } from 'react-icons/fa';\nimport styled, { keyframes } from 'styled-components';\n\nconst Login = () => {\n  const { login } = useAuth();\n  const history = useHistory();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('rememberMeEmail');\n    const savedPassword = localStorage.getItem('rememberMePassword');\n    if (savedEmail) {\n      setEmail(savedEmail);\n      setRememberMe(true);\n    }\n    /* not saving the password\n    if (savedPassword) {\n      setPassword(savedPassword);\n    }\n      */\n\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      const user = await login(email, password);\n      setMessage('Login successful! Redirecting to dashboard...');\n      if (rememberMe) {\n        localStorage.setItem('rememberMeEmail', email);\n        //localStorage.setItem('rememberMePassword', password); // Optional: save password\n      } else {\n        localStorage.removeItem('rememberMeEmail');\n        //localStorage.removeItem('rememberMePassword');\n      }\n\n      // Redirect based on role\n      setTimeout(() => {\n        setIsLoading(false);\n        switch (user.role) {\n          case 'admin':\n            history.push('/dashboard');\n            break;\n          case 'consultant':\n            history.push('/dashboard');\n            break;\n          default:\n            history.push('/edit-excel');\n            break;\n        }\n      }, 2000);\n    } catch (error) {\n      setIsLoading(false);\n      setMessage('Login failed: ' + error.message);\n    }\n  };\n\n  return (\n    <Container>\n      <Background />\n      <Title>Login</Title>\n      {message && <Message>{message} {isLoading && <Spinner />}</Message>}\n      <Form onSubmit={handleSubmit}>\n        <FormGroup>\n          <Label>Email</Label>\n          <Input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n        </FormGroup>\n        <FormGroup>\n          <Label>Password</Label>\n          <PasswordInput>\n            <Input\n              type={showPassword ? 'text' : 'password'}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n            <EyeIcon onClick={() => setShowPassword(!showPassword)}>\n              {showPassword ? <FaEyeSlash /> : <FaEye />}\n            </EyeIcon>\n          </PasswordInput>\n        </FormGroup>\n        <AdditionalOptions>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={rememberMe}\n              onChange={(e) => setRememberMe(e.target.checked)}\n            /> Remember me\n          </label>\n          <StyledLink to=\"/forgot-password\" onClick={() => console.log('Forgot Password link clicked')}>Forgot password?</StyledLink>\n        </AdditionalOptions>\n        <Button\n          type=\"submit\"\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n          isHovering={isHovering}\n        >\n          Login\n        </Button>\n        <Footer>\n          Not a member? <StyledLink to=\"/signup\">Signup Now</StyledLink>\n        </Footer>\n      </Form>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  text-align: center;\n  overflow: hidden;\n  margin: -10px;\n  flex: 1;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: url(${loginpageimage}) no-repeat center center fixed;\n  background-size: cover;\n  filter: blur(4px);\n  z-index: -1;\n`;\n\nconst Title = styled.h2`\n  color: #333;\n  margin-bottom: 20px;\n  font-weight: bold;\n  font-size: 50px;\n`;\n\nconst Form = styled.form`\n  background: rgba(255, 255, 255, 0.9);\n  padding: 70px 50px;\n  border-radius: 10px;\n  box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);\n  text-align: left;\n  width: 100%;\n  max-width: 450px;\n  z-index: 1;\n  position: relative;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 30px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n  color: #555;\n  font-size: 14px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-size: 16px;\n  box-sizing: border-box;\n`;\n\nconst PasswordInput = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nconst EyeIcon = styled.div`\n  position: absolute;\n  right: 10px;\n  cursor: pointer;\n  margin-top: 13px;\n  font-size: 16px;\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: ${props => (props.isHovering ? 'black' : '#ef6108')};\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n`;\n\nconst AdditionalOptions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 15px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: #ef6108;\n  text-decoration: none;\n  font-size: 14px;\n`;\n\nconst Footer = styled.footer`\n  margin-top: 20px;\n  font-size: 14px;\n  color: #777;\n  font-weight: bold;\n  position: absolute;\n  bottom: 20px;\n  width: 100%;\n  text-align: center;\n  align-items: center;\n`;\n\nconst Message = styled.p`\n  color: red;\n  font-style: italic;\n  font-weight: bold;\n`;\n\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst Spinner = styled(FaSpinner)`\n  margin-left: 10px;\n  animation: ${spin} 1s linear infinite;\n`;\n\nexport default Login;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Signup.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\AdminDashboard.js",["97"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport axios from 'axios';\r\n////\r\nimport Swal from 'sweetalert2';\r\n////\r\nimport './AdminDashboard.css';\r\n\r\nconst AdminDashboard = () => {\r\n  const { user, loading } = useAuth();\r\n  const history = useHistory();\r\n  const [userHistory, setUserHistory] = useState([]);\r\n  const [modificationHistory, setModificationHistory] = useState([]);\r\n  const [telecomModificationHistory, setTelecomModificationHistory] = useState([]);\r\n  const [telephoneLineModificationHistory, setTelephoneLineModificationHistory] = useState([]);\r\n\r\n  const handleNavigation = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const fetchUserHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/users/admin/user-history', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched User History:', data);\r\n        setUserHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch user history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user history:', error);\r\n    }\r\n  };\r\n\r\n  const fetchModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/it-equipments/admin/it-equipment-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const filteredData = data.filter(mod => mod.field !== 'createdAt' && mod.field !== 'updatedAt');\r\n        setModificationHistory(filteredData);\r\n      } else {\r\n        console.error('Failed to fetch modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching modification history:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTelecomModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telecom-packs/admin/telecom-pack-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched Telecom Modifications:', data);\r\n        setTelecomModificationHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch telecom modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching telecom modification history:', error);\r\n    }\r\n  };\r\n\r\n// Fetch Telephone Line modification history\r\nconst fetchTelephoneLineModificationHistory = async () => {\r\n  try {\r\n    console.log('Fetching Telephone Line modification history...'); // Debugging statement\r\n    const response = await fetch('http://localhost:5000/api/telephone-lines/admin/telephone-line-modifications', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('Fetched Telephone Line Modifications:', data); // Debugging statement\r\n      if (data.length === 0) {\r\n        console.log('No modification records found'); // Debugging statement\r\n      } else {\r\n        data.forEach(mod => {\r\n          console.log('Modification Record:', JSON.stringify(mod, null, 2)); // Debugging statement for each record\r\n        });\r\n      }\r\n      setTelephoneLineModificationHistory(data);\r\n    } else {\r\n      console.error('Failed to fetch telephone line modification history, status:', response.status); // Debugging statement\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching telephone line modification history:', error); // Debugging statement\r\n  }\r\n};\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        history.push('/login');\r\n      }\r\n    }\r\n  }, [loading, history]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchUserHistory();\r\n      fetchModificationHistory();\r\n      fetchTelecomModificationHistory();\r\n      fetchTelephoneLineModificationHistory();\r\n    }\r\n  }, [user]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!user) {\r\n    return null;\r\n  }\r\n  const handleResetModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/it-equipments/admin/it-equipment-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        setModificationHistory([]); // Clear the modification history in the state\r\n        console.log('Modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleResetTelecomModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telecom-packs/admin/telecom-pack-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        setTelecomModificationHistory([]);\r\n        console.log('Telecom Pack modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset Telecom Pack modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting Telecom Pack modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleResetTelephoneLineModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telephone-lines/admin/telephone-line-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        setTelephoneLineModificationHistory([]);\r\n        console.log('Telephone Line modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset Telephone Line modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting Telephone Line modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleDropTable = async (table) => {\r\n    const result = await Swal.fire({\r\n      title: `Êtes-vous sûr de vouloir supprimer la table ${table}?`,\r\n      text: \"Cette action ne peut pas être annulée.\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Oui, supprimez-la !'\r\n    });\r\n\r\n    if (result.isConfirmed) {\r\n      try {\r\n        let requestUrl = '';\r\n        if (table === 'it-equipments') {\r\n          requestUrl = 'http://localhost:5000/api/it-equipments/admin/drop-it-equipments-table';\r\n        } else if (table === 'telecom-pack') {\r\n          requestUrl = 'http://localhost:5000/api/telecom-packs/admin/drop-telecom-packs-table';\r\n        } else if (table === 'telephone-lines') {\r\n          requestUrl = 'http://localhost:5000/api/telephone-lines/admin/drop-telephone-lines-table';\r\n        }\r\n\r\n        console.log(`Request URL: ${requestUrl}`);\r\n\r\n        const response = await axios.delete(requestUrl, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n\r\n        console.log(\"Response:\", response);\r\n\r\n        if (response.status === 204) {\r\n          Swal.fire(\r\n            'Supprimée !',\r\n            `La table ${table} a été supprimée.`,\r\n            'success'\r\n          );\r\n        } else {\r\n          console.error(`Échec de la suppression de la table ${table} : ${response.statusText}`);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Erreur lors de la suppression de la table ${table} :`, error.message);\r\n        Swal.fire(\r\n          'Error!',\r\n          `Erreur lors de la suppression de la table ${table} : ${error.message}`,\r\n          'error'\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <div className=\"admin-dashboard-content\">\r\n        <h1 className=\"admin-dashboard-title\">Admin Dashboard</h1>\r\n        <div className=\"admin-user-history-section\">\r\n          <h2>Historique de connexion utilisateur</h2>\r\n          {userHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Email</th>\r\n                    <th>Nom et Prénom</th>\r\n                    <th>Dernière connexion</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {userHistory.map((user, index) => (\r\n                    <tr key={index}>\r\n                      <td>{user.email}</td>\r\n                      <td>{user.fullName}</td>\r\n                      <td>{formatDate(user.lastLogin)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de connexion utilisateur disponible.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Historique des modifications de Matériel informatique</h2>\r\n          <button onClick={handleResetModificationHistory} className=\"reset-button\">Réinitialiser</button>\r\n          {user.role === 'admin' && (\r\n            <button onClick={() => handleDropTable('it-equipments')} className=\"drop-button\">\r\n              Supprimer la table\r\n            </button>\r\n          )}\r\n          {modificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Utilisateur</th>\r\n                    <th>Email</th>\r\n                    <th>Temps de Modification</th>\r\n                    <th>Champ</th>\r\n                    <th>Ancienne Valeur</th>\r\n                    <th>Nouvelle valeur</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {modificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue}</td>\r\n                      <td>{modification.newValue}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de modification de Matériel Informatique disponible.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Historique des modifications du Parc Télécom</h2>\r\n          <button onClick={handleResetTelecomModificationHistory} className=\"reset-button\">Réinitialiser</button>\r\n          {user.role === 'admin' && (\r\n            <button onClick={() => handleDropTable('telecom-pack')} className=\"drop-button\">\r\n              Supprimer la table\r\n            </button>\r\n          )}\r\n          {telecomModificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Utilisateur</th>\r\n                    <th>Email</th>\r\n                    <th>Temps de Modification</th>\r\n                    <th>Champ</th>\r\n                    <th>Ancienne Valeur</th>\r\n                    <th>Nouvelle valeur</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {telecomModificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue ? modification.oldValue : 'N/A'}</td>\r\n                      <td>{modification.newValue ? modification.newValue : 'N/A'}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de modification du Parc Télécom disponible.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Historique des modifications des Lignes Téléphoniques</h2>\r\n          <button onClick={handleResetTelephoneLineModificationHistory} className=\"reset-button\">Réinitialiser</button>\r\n          {user.role === 'admin' && (\r\n            <button onClick={() => handleDropTable('telephone-lines')} className=\"drop-button\">\r\n              Supprimer la table\r\n            </button>\r\n          )}\r\n          {telephoneLineModificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Utilisateur</th>\r\n                    <th>Email</th>\r\n                    <th>Temps de Modification</th>\r\n                    <th>Champ</th>\r\n                    <th>Ancienne Valeur</th>\r\n                    <th>Nouvelle valeur</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {telephoneLineModificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue ? modification.oldValue : 'N/A'}</td>\r\n                      <td>{modification.newValue ? modification.newValue : 'N/A'}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de modification de Ligne Téléphonique disponible.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLine.js",["98","99","100","101"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Sidebar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ExcelEditor.js",["102"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FaFileExcel } from 'react-icons/fa';\r\nimport io from 'socket.io-client';\r\nimport './ExcelEditor.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ExcelEditor = () => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [table, setTable] = useState('');\r\n  const [schema, setSchema] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [matchingColumns, setMatchingColumns] = useState(0);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (table) {\r\n      const fetchSchema = async () => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:5000/api/schema/${table}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n            },\r\n          });\r\n          setSchema(response.data);\r\n        } catch (error) {\r\n          setMessage('Erreur lors de la récupération du schéma');\r\n          console.error('Error fetching schema:', error);\r\n        }\r\n      };\r\n      fetchSchema();\r\n    }\r\n  }, [table]);\r\n\r\n  useEffect(() => {\r\n    socket.on('uploadProgress', ({ uploadId, progress }) => {\r\n      setUploadProgress(progress);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('uploadProgress');\r\n    };\r\n  }, []);\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!selectedFile || !table) {\r\n        alert('Veuillez sélectionner un tableau et un fichier.');\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', selectedFile);\r\n\r\n      const response = await axios.post(`http://localhost:5000/api/upload/${table}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      console.log('File uploaded successfully:', response.data);\r\n      setMessage('Fichier téléchargé avec succès');\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      alert('Erreur lors du téléchargement du fichier: ' + error.message);\r\n      setMessage('Erreur lors du téléchargement du fichier: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const filterColumns = (data) => {\r\n    if (schema.length === 0) return data;\r\n    return data.map(record => {\r\n      return Object.fromEntries(\r\n        Object.entries(record).filter(([key]) => schema.includes(key))\r\n      );\r\n    });\r\n  };\r\n\r\n  const countMatchingColumns = (data) => {\r\n    if (schema.length === 0 || data.length === 0) return 0;\r\n    return schema.filter(column => Object.keys(data[0]).includes(column)).length;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedFile) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const workbook = XLSX.read(e.target.result, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\r\n        const filteredData = filterColumns(data);\r\n        setMatchingColumns(countMatchingColumns(filteredData));\r\n      };\r\n      reader.readAsBinaryString(selectedFile);\r\n    }\r\n  }, [selectedFile, schema]);\r\n\r\n  return (\r\n    <div className=\"excel-editor\">\r\n      <h2>Téléchargement de fichier Excel</h2>\r\n      <div className=\"form-group\">\r\n        <label>Sélectionnez le fichier Excel</label>\r\n        <div className=\"file-upload\">\r\n          <input type=\"file\" onChange={handleFileChange} />\r\n          <div className=\"file-upload-text\">\r\n            {selectedFile ? (\r\n              <>\r\n                <FaFileExcel className=\"file-icon\" />\r\n                {selectedFile.name}\r\n              </>\r\n            ) : (\r\n              <>Déposez vos fichiers ici ou <span className=\"browse-files\">Parcourir les fichiers</span></>\r\n            )}\r\n          </div>\r\n          <div className=\"file-type-text\">Types de fichiers acceptés : .xlsx</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Sélectionnez un tableau</label>\r\n        <select value={table} onChange={(e) => setTable(e.target.value)}>\r\n          <option value=\"\">Sélectionnez un tableau</option>\r\n          <option value=\"it_equipments\">Équipements informatiques</option>\r\n          <option value=\"telecom_pack\">Parc Télécom</option>\r\n          <option value=\"telephone_lines\">Lignes téléphoniques</option>\r\n        </select>\r\n      </div>\r\n      <button onClick={handleUpload}>Télécharger</button>\r\n      <div className=\"progress-container\">\r\n        <div className=\"progress\">\r\n          <div className=\"bar\" style={{ width: `${uploadProgress}%` }}>\r\n            <p className=\"counter\">{uploadProgress}%</p>\r\n          </div>\r\n        </div>\r\n        {uploadProgress === 100 && (\r\n          <div className=\"success-container\">\r\n            <p className=\"success\">Téléchargement terminé!</p>\r\n            <p className=\"success-message\">Fichier téléchargé avec succès</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {message && <p>{message}</p>}\r\n      {schema.length > 0 && (\r\n        <div className=\"schema-container\">\r\n          <h3>Schéma du tableau</h3>\r\n          <p>Nombre de colonnes correspondantes : {matchingColumns}</p>\r\n          <div className=\"schema-table\">\r\n            {schema.map((column) => (\r\n              <div key={column} className=\"schema-column\">\r\n                {column}\r\n                <div className=\"placeholder\">\r\n                  {column === 'numero_de_gsm' && 'Ex: 212XXXXXXXXX'}\r\n                  {column.includes('date') && 'Format: yyyy-mm-dd ou mm/dd/yyyy'}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentView.js",["103","104"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipment.js",["105","106","107","108"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPack.js",["109","110","111","112"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackView.js",["113","114","115","116"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineView.js",["117","118","119","120"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { useTable, useSortBy, useFilters, usePagination } from 'react-table';\r\nimport Select from 'react-select';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as XLSX from 'xlsx';\r\nimport { FaSortUp, FaSortDown, FaSort } from 'react-icons/fa'; // Import icons\r\nimport './TelephoneLineView.css';\r\n\r\nconst TelephoneLineView = () => {\r\n  const [telephoneLines, setTelephoneLines] = useState([]);\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [uniqueValues, setUniqueValues] = useState({});\r\n  const [filters, setFilters] = useState({});\r\n  const history = useHistory();\r\n\r\n  const fetchTelephoneLines = async (appliedFilters = {}) => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/telephone-lines', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        params: appliedFilters, // Send filters as query params\r\n      });\r\n\r\n      const data = response.data.map(({ createdAt, updatedAt, id, ...rest }) => setDefaultValues(rest));\r\n      setTelephoneLines(data);\r\n      setOriginalData(data);\r\n\r\n      const headers = Object.keys(data[0] || {});\r\n      const uniqueValues = {};\r\n\r\n      headers.forEach(header => {\r\n        uniqueValues[header] = [...new Set(data.map(item => item[header]))].map(value => ({ value, label: value }));\r\n      });\r\n\r\n      const cols = [\r\n        {\r\n          Header: '#',\r\n          accessor: (row, i) => i + 1,\r\n          disableFilters: true,\r\n          disableSortBy: true,\r\n          width: 50,\r\n        },\r\n        ...headers.map((header) => ({\r\n          Header: getCustomHeaderName(header),\r\n          accessor: header,\r\n          Filter: props => <SelectColumnFilter {...props} originalData={data} uniqueValues={uniqueValues[header]} />,\r\n        })),\r\n      ];\r\n\r\n      setColumns(cols);\r\n      setUniqueValues(uniqueValues);\r\n    } catch (error) {\r\n      console.error('Error fetching Telephone Lines:', error);\r\n      alert('Error fetching Telephone Lines: ' + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTelephoneLines(filters);\r\n  }, [filters]);\r\n\r\n  const setDefaultValues = (data, defaultValue = '------') => {\r\n    return Object.fromEntries(\r\n      Object.entries(data).map(([key, value]) => {\r\n        if (value === '' || value === null) {\r\n          return [key, defaultValue];\r\n        }\r\n        return [key, value];\r\n      })\r\n    );\r\n  };\r\n\r\n  const getCustomHeaderName = (header) => {\r\n    const customNames = {\r\n      numero_de_gsm: 'Numero de GSM',\r\n      full_name: 'Nom et Prénom',\r\n      code_entite: 'Code Entite',\r\n      direction: 'Direction',\r\n      fonction: 'Fonction',\r\n      operateur: 'Opérateur',\r\n      categorie: 'Catégorie',\r\n      poste_GSM: 'Poste GSM',\r\n      // Add more mappings as needed\r\n    };\r\n    return customNames[header] || header.replace(/_/g, ' ');\r\n  };\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    setFilters(prev => {\r\n      const updatedFilters = { ...prev };\r\n      updatedFilters[filterKey] = updatedFilters[filterKey].filter(val => val !== value);\r\n      if (updatedFilters[filterKey].length === 0) {\r\n        delete updatedFilters[filterKey];\r\n      }\r\n      return updatedFilters;\r\n    });\r\n  };\r\n\r\n  const Table = ({ columns, data }) => {\r\n    const defaultColumn = {\r\n      minWidth: 30,\r\n      width: 150,\r\n      maxWidth: 400,\r\n    };\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      prepareRow,\r\n      page,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      state: { pageIndex, pageSize },\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: { pageIndex: 0 },\r\n      },\r\n      useFilters,\r\n      useSortBy,\r\n      usePagination\r\n    );\r\n\r\n    return (\r\n      <div className=\"telephoneline-view-table-container\">\r\n        <table {...getTableProps()} className=\"telephoneline-view-data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted ? (\r\n                          column.isSortedDesc ? (\r\n                            <FaSortDown />\r\n                          ) : (\r\n                            <FaSortUp />\r\n                          )\r\n                        ) : (\r\n                          <FaSort />\r\n                        )}\r\n                      </span>\r\n                      <div>\r\n                        {column.canFilter ? column.render('Filter') : null}\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} className={rowIndex % 2 === 0 ? 'telephoneline-view-row-even' : 'telephoneline-view-row-odd'}>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"pagination-controls\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>{'Précédent'}</button>\r\n          <span>\r\n            Page{' '}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>{'Suivant'}</button>\r\n          <button onClick={() => gotoPage(pageOptions.length - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[10, 25, 50, 100].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const exportToExcel = (data) => {\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"TelephoneLines\");\r\n    XLSX.writeFile(wb, \"TelephoneLines.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"telephoneline-view-container\">\r\n      <button className=\"telephoneline-view-back-button\" onClick={() => history.push('/telephone-lines')}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1 className=\"telephoneline-view-title\">Afficher Line Téléphonique</h1>\r\n      <div className=\"telephoneline-view-selected-filters-container\">\r\n        {Object.keys(filters).map((filterKey) => (\r\n          filters[filterKey].map((filterValue, index) => (\r\n            <span key={`${filterKey}-${index}`} className=\"telephoneline-view-filter-chip\">\r\n              {`${filterKey}: ${filterValue}`} <button onClick={() => handleDelete(filterKey, filterValue)}>x</button>\r\n            </span>\r\n          ))\r\n        ))}\r\n      </div>\r\n      {columns.length > 0 && (\r\n        <Table\r\n          columns={columns}\r\n          data={originalData}\r\n        />\r\n      )}\r\n      <div className=\"telephoneline-view-footer\">\r\n        <button\r\n          className=\"telephoneline-view-export-button\"\r\n          onClick={() => exportToExcel(originalData)}\r\n        >\r\n          Export to Excel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({\r\n  column: { filterValue = [], setFilter, id },\r\n  uniqueValues\r\n}) => {\r\n  const [selectedOptions, setSelectedOptions] = useState(() => \r\n    filterValue.map(val => ({ value: val, label: val }))\r\n  );\r\n\r\n  const handleChange = (selected) => {\r\n    const values = selected ? selected.map(option => option.value) : [];\r\n    setSelectedOptions(selected);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n  };\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    const updatedOptions = selectedOptions.filter(option => option.value !== value);\r\n    const values = updatedOptions.map(option => option.value);\r\n    setSelectedOptions(updatedOptions);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n  };\r\n\r\n  return (\r\n    <div className=\"telephoneline-view-filter-container\">\r\n      <Select\r\n        value={selectedOptions}\r\n        onChange={handleChange}\r\n        options={uniqueValues}\r\n        isMulti\r\n        placeholder={'Filter by...'}\r\n        className=\"telephoneline-view-filter-select\"\r\n      />\r\n      {selectedOptions.length > 0 && (\r\n        <div className=\"telephoneline-view-selected-filters\">\r\n          {selectedOptions.map((option, index) => (\r\n            <span key={index} className=\"telephoneline-view-filter-chip\">\r\n              {option.value} <button onClick={() => handleDelete(id, option.value)}>x</button>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelephoneLineView;\r\n",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"121","replacedBy":"125"},{"ruleId":"123","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":21,"column":11,"nodeType":"129","messageId":"130","endLine":21,"endColumn":24},{"ruleId":"127","severity":1,"message":"131","line":18,"column":9,"nodeType":"129","messageId":"130","endLine":18,"endColumn":25},{"ruleId":"127","severity":1,"message":"132","line":34,"column":10,"nodeType":"129","messageId":"130","endLine":34,"endColumn":24},{"ruleId":"127","severity":1,"message":"133","line":34,"column":26,"nodeType":"129","messageId":"130","endLine":34,"endColumn":43},{"ruleId":"134","severity":1,"message":"135","line":93,"column":6,"nodeType":"136","endLine":93,"endColumn":8,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":269,"column":6,"nodeType":"136","endLine":269,"endColumn":59,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":103,"column":6,"nodeType":"136","endLine":103,"endColumn":28,"suggestions":"141"},{"ruleId":"127","severity":1,"message":"142","line":17,"column":10,"nodeType":"129","messageId":"130","endLine":17,"endColumn":22},{"ruleId":"134","severity":1,"message":"143","line":23,"column":6,"nodeType":"136","endLine":23,"endColumn":8,"suggestions":"144"},{"ruleId":"127","severity":1,"message":"145","line":68,"column":18,"nodeType":"129","messageId":"130","endLine":68,"endColumn":27},{"ruleId":"127","severity":1,"message":"146","line":69,"column":10,"nodeType":"129","messageId":"130","endLine":69,"endColumn":25},{"ruleId":"134","severity":1,"message":"147","line":272,"column":6,"nodeType":"136","endLine":272,"endColumn":63,"suggestions":"148"},{"ruleId":"134","severity":1,"message":"149","line":318,"column":6,"nodeType":"136","endLine":318,"endColumn":72,"suggestions":"150"},{"ruleId":"127","severity":1,"message":"151","line":43,"column":10,"nodeType":"129","messageId":"130","endLine":43,"endColumn":22},{"ruleId":"127","severity":1,"message":"152","line":43,"column":24,"nodeType":"129","messageId":"130","endLine":43,"endColumn":39},{"ruleId":"134","severity":1,"message":"153","line":119,"column":6,"nodeType":"136","endLine":119,"endColumn":8,"suggestions":"154"},{"ruleId":"134","severity":1,"message":"155","line":503,"column":6,"nodeType":"136","endLine":503,"endColumn":50,"suggestions":"156"},{"ruleId":"127","severity":1,"message":"157","line":1,"column":38,"nodeType":"129","messageId":"130","endLine":1,"endColumn":45},{"ruleId":"127","severity":1,"message":"151","line":11,"column":10,"nodeType":"129","messageId":"130","endLine":11,"endColumn":22},{"ruleId":"127","severity":1,"message":"142","line":14,"column":10,"nodeType":"129","messageId":"130","endLine":14,"endColumn":22},{"ruleId":"134","severity":1,"message":"158","line":63,"column":6,"nodeType":"136","endLine":63,"endColumn":15,"suggestions":"159"},{"ruleId":"127","severity":1,"message":"157","line":1,"column":38,"nodeType":"129","messageId":"130","endLine":1,"endColumn":45},{"ruleId":"127","severity":1,"message":"132","line":11,"column":10,"nodeType":"129","messageId":"130","endLine":11,"endColumn":24},{"ruleId":"127","severity":1,"message":"142","line":14,"column":10,"nodeType":"129","messageId":"130","endLine":14,"endColumn":22},{"ruleId":"134","severity":1,"message":"160","line":63,"column":6,"nodeType":"136","endLine":63,"endColumn":15,"suggestions":"161"},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],["162"],["163"],"no-unused-vars","'savedPassword' is assigned a value but never used.","Identifier","unusedVar","'handleNavigation' is assigned a value but never used.","'telephoneLines' is assigned a value but never used.","'setTelephoneLines' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filters'. Either include it or remove the dependency array.","ArrayExpression",["164"],"React Hook React.useMemo has missing dependencies: 'handleDeleteLine', 'handleFilterChange', and 'handleRemoveFilter'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has missing dependencies: 'countMatchingColumns' and 'filterColumns'. Either include them or remove the dependency array.",["166"],"'uniqueValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchITEquipments'. Either include it or remove the dependency array.",["167"],"'setSortBy' is assigned a value but never used.","'allITEquipments' is assigned a value but never used.","React Hook React.useMemo has unnecessary dependencies: 'currentPage' and 'rowsPerPage'. Either exclude them or remove the dependency array.",["168"],"React Hook React.useMemo has an unnecessary dependency: 'selectedFilters'. Either exclude it or remove the dependency array.",["169"],"'telecomPacks' is assigned a value but never used.","'setTelecomPacks' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'applyFilters' and 'filters'. Either include them or remove the dependency array.",["170"],"React Hook React.useMemo has missing dependencies: 'handleDeletePack', 'handleFilterChange', and 'handleRemoveSelectedValue'. Either include them or remove the dependency array.",["171"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchTelecomPacks'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'fetchTelephoneLines'. Either include it or remove the dependency array.",["173"],"no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [filters]",{"range":"194","text":"195"},"Update the dependencies array to be: [newLine, currentPage, rowsPerPage, handleDeleteLine, options, handleFilterChange, handleRemoveFilter]",{"range":"196","text":"197"},"Update the dependencies array to be: [selectedFile, schema, filterColumns, countMatchingColumns]",{"range":"198","text":"199"},"Update the dependencies array to be: [fetchITEquipments]",{"range":"200","text":"201"},"Update the dependencies array to be: [itEquipments, filters, sortBy]",{"range":"202","text":"203"},"Update the dependencies array to be: [newEquipment, currentPage, rowsPerPage, options]",{"range":"204","text":"205"},"Update the dependencies array to be: [applyFilters, filters]",{"range":"206","text":"207"},"Update the dependencies array to be: [currentPage, rowsPerPage, handleDeletePack, options.entite, options.operateur, options.produit2, options.numero, options.etatAbonnement, options.dateAbonnement, options.dateReengagement, options.dateEtat, options.observation, options.typePoste, options.numeroDeSerie, options.dateAffectation, handleFilterChange, handleRemoveSelectedValue]",{"range":"208","text":"209"},"Update the dependencies array to be: [fetchTelecomPacks, filters]",{"range":"210","text":"211"},"Update the dependencies array to be: [fetchTelephoneLines, filters]",{"range":"212","text":"213"},[2880,2882],"[filters]",[8869,8922],"[newLine, currentPage, rowsPerPage, handleDeleteLine, options, handleFilterChange, handleRemoveFilter]",[3342,3364],"[selectedFile, schema, filterColumns, countMatchingColumns]",[867,869],"[fetchITEquipments]",[8427,8484],"[itEquipments, filters, sortBy]",[10154,10220],"[newEquipment, currentPage, rowsPerPage, options]",[3692,3694],"[applyFilters, filters]",[15944,15988],"[currentPage, rowsPerPage, handleDeletePack, options.entite, options.operateur, options.produit2, options.numero, options.etatAbonnement, options.dateAbonnement, options.dateReengagement, options.dateEtat, options.observation, options.typePoste, options.numeroDeSerie, options.dateAffectation, handleFilterChange, handleRemoveSelectedValue]",[2229,2238],"[fetchTelecomPacks, filters]",[2251,2260],"[fetchTelephoneLines, filters]"]