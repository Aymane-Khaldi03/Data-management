[{"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\index.js":"1","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\App.js":"2","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\ConsultantDashboard.js":"3","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Home.js":"4","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\AdminDashboard.js":"5","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Dashboard.js":"6","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\hooks\\useAuth.js":"7","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Login.js":"8","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Signup.js":"9","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Navbar.js":"10","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Sidebar.js":"11","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ExcelEditor.js":"12","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipment.js":"13","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentLanding.js":"14","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentView.js":"15","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPack.js":"16","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackLanding.js":"17","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackView.js":"18","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLine.js":"19","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineLanding.js":"20","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineView.js":"21"},{"size":259,"mtime":1717579923617,"results":"22","hashOfConfig":"23"},{"size":3317,"mtime":1720424221006,"results":"24","hashOfConfig":"23"},{"size":1292,"mtime":1719914870782,"results":"25","hashOfConfig":"23"},{"size":719,"mtime":1717667400577,"results":"26","hashOfConfig":"23"},{"size":10168,"mtime":1720432785285,"results":"27","hashOfConfig":"23"},{"size":1261,"mtime":1717595088658,"results":"28","hashOfConfig":"23"},{"size":2287,"mtime":1717678338440,"results":"29","hashOfConfig":"23"},{"size":4779,"mtime":1717680029396,"results":"30","hashOfConfig":"23"},{"size":4672,"mtime":1717680046431,"results":"31","hashOfConfig":"23"},{"size":1282,"mtime":1717680395145,"results":"32","hashOfConfig":"23"},{"size":1696,"mtime":1720010551109,"results":"33","hashOfConfig":"23"},{"size":16194,"mtime":1718804351360,"results":"34","hashOfConfig":"23"},{"size":27933,"mtime":1720521631180,"results":"35","hashOfConfig":"23"},{"size":803,"mtime":1719560974709,"results":"36","hashOfConfig":"23"},{"size":8219,"mtime":1720080395135,"results":"37","hashOfConfig":"23"},{"size":20570,"mtime":1720523979257,"results":"38","hashOfConfig":"23"},{"size":859,"mtime":1719565350013,"results":"39","hashOfConfig":"23"},{"size":8037,"mtime":1720523179036,"results":"40","hashOfConfig":"23"},{"size":13731,"mtime":1720524067220,"results":"41","hashOfConfig":"23"},{"size":895,"mtime":1720430582223,"results":"42","hashOfConfig":"23"},{"size":7230,"mtime":1720431628972,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"10eak4g",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\index.js",[],["92","93"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\App.js",["94","95"],"import React, { useEffect, useState } from 'react';\nimport { Route, Switch, Redirect, useLocation, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Login from './components/Auth/Login';\nimport Signup from './components/Auth/Signup';\nimport Dashboard from './pages/Dashboard';\nimport AdminDashboard from './pages/AdminDashboard';\nimport ConsultantDashboard from './pages/ConsultantDashboard';\nimport Navbar from './components/Shared/Navbar';\nimport Sidebar from './components/Shared/Sidebar';\nimport { AuthProvider, useAuth } from './hooks/useAuth';\nimport ExcelEditor from './components/Dashboard/ExcelEditor';\n//\nimport ITEquipmentLanding from './components/Dashboard/ITEquipmentLanding';\nimport ITEquipmentView from './components/Dashboard/ITEquipmentView';\nimport ITEquipment from './components/Dashboard/ITEquipment';\n//\nimport TelecomPack from './components/Dashboard/TelecomPack';\nimport TelecomPackLanding from './components/Dashboard/TelecomPackLanding';\nimport TelecomPackView from './components/Dashboard/TelecomPackView';\n\nimport './App.css';\nimport TelephoneLine from './components/Dashboard/TelephoneLine';\nimport TelephoneLineLanding from './components/Dashboard/TelephoneLineLanding';\nimport TelephoneLineView from './components/Dashboard/TelephoneLineView';\n\nconst AppContent = () => {\n  const { user } = useAuth();\n  const location = useLocation();\n\n  // Determine if the current path is the homepage, signup page, or login page\n  const showSidebar = !['/', '/signup', '/login'].includes(location.pathname);\n  const isAuthenticated = !!user; // Check if the user is authenticated\n\n  const getDashboardComponent = () => {\n    if (!isAuthenticated) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    switch (user.role) {\n      case 'admin':\n        return <AdminDashboard />;\n      case 'consultant':\n        return <ConsultantDashboard />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className={`main-content ${showSidebar ? 'with-sidebar' : ''}`}>\n        {showSidebar && <Sidebar />}\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/dashboard\" exact render={getDashboardComponent} />\n          \n          <Route path=\"/it-equipment\" exact component={ITEquipmentLanding} />\n          <Route path=\"/it-equipment-manager\" component={ITEquipment} />\n          <Route path=\"/it-equipment-view\" component={ITEquipmentView} />\n\n          <Route path=\"/telecom-packs\" exact component={TelecomPackLanding} />\n          <Route path=\"/telecom-pack-manager\" component={TelecomPack} />\n          <Route path=\"/telecom-pack-view\" component={TelecomPackView} />\n\n          <Route path=\"/telephone-lines\" exact component={TelephoneLineLanding} />\n          <Route path=\"/telephone-line-manager\" component={TelephoneLine} />\n          <Route path=\"/telephone-line-view\" component={TelephoneLineView} />\n\n          <Route path=\"/edit-excel\" component={ExcelEditor} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => (\n  <AuthProvider>\n    <Router>\n      <AppContent />\n    </Router>\n  </AuthProvider>\n);\n\nexport default App;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\ConsultantDashboard.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Home.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\AdminDashboard.js",["96","97"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport './AdminDashboard.css';\r\n\r\nconst AdminDashboard = () => {\r\n  const { user } = useAuth();\r\n  const history = useHistory();\r\n  const [userHistory, setUserHistory] = useState([]);\r\n  const [modificationHistory, setModificationHistory] = useState([]);\r\n  const [telecomModificationHistory, setTelecomModificationHistory] = useState([]);\r\n  const [telephoneLineModificationHistory, setTelephoneLineModificationHistory] = useState([]);\r\n\r\n  const handleNavigation = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUserHistory();\r\n    fetchModificationHistory();\r\n    fetchTelecomModificationHistory();\r\n    fetchTelephoneLineModificationHistory(); // Add this line\r\n  }, []);\r\n\r\n  const fetchTelephoneLineModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telephone-lines/admin/telephone-line-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched Telephone Line Modifications:', data);\r\n        setTelephoneLineModificationHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch telephone line modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching telephone line modification history:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const fetchUserHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/users/admin/user-history', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched User History:', data);\r\n        setUserHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch user history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user history:', error);\r\n    }\r\n  };\r\n\r\n  const fetchModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/admin/it-equipment-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const filteredData = data.filter(mod => mod.field !== 'createdAt' && mod.field !== 'updatedAt');\r\n        setModificationHistory(filteredData);\r\n      } else {\r\n        console.error('Failed to fetch modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching modification history:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTelecomModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telecom-packs/admin/telecom-pack-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched Telecom Modifications:', data);\r\n        setTelecomModificationHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch telecom modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching telecom modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleResetModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telecom-packs/admin/telecom-pack-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        setTelecomModificationHistory([]);\r\n        console.log('Modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting modification history:', error);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <div className=\"admin-dashboard-content\">\r\n        <h1 className=\"admin-dashboard-title\">Admin Dashboard</h1>\r\n\r\n        <div className=\"admin-user-history-section\">\r\n          <h2>User Login History</h2>\r\n          {userHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Email</th>\r\n                    <th>Full Name</th>\r\n                    <th>Last Login</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {userHistory.map((user, index) => (\r\n                    <tr key={index}>\r\n                      <td>{user.email}</td>\r\n                      <td>{user.fullName}</td>\r\n                      <td>{formatDate(user.lastLogin)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>No user login history available.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>IT Equipment Modification History</h2>\r\n          <button onClick={handleResetModificationHistory} className=\"reset-button\">Reset History</button>\r\n          {modificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>User</th>\r\n                    <th>Email</th>\r\n                    <th>Modification Time</th>\r\n                    <th>Field</th>\r\n                    <th>Old Value</th>\r\n                    <th>New Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {modificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue}</td>\r\n                      <td>{modification.newValue}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>No IT equipment modification history available.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Telecom Pack Modification History</h2>\r\n          {telecomModificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>User</th>\r\n                    <th>Email</th>\r\n                    <th>Modification Time</th>\r\n                    <th>Field</th>\r\n                    <th>Old Value</th>\r\n                    <th>New Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {telecomModificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue ? modification.oldValue : 'N/A'}</td>\r\n                      <td>{modification.newValue ? modification.newValue : 'N/A'}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>No Telecom Pack modification history available.</p>\r\n          )}\r\n        </div>\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Telephone Line Modification History</h2>\r\n          {telephoneLineModificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>User</th>\r\n                    <th>Email</th>\r\n                    <th>Modification Time</th>\r\n                    <th>Field</th>\r\n                    <th>Old Value</th>\r\n                    <th>New Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {telephoneLineModificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue ? modification.oldValue : 'N/A'}</td>\r\n                      <td>{modification.newValue ? modification.newValue : 'N/A'}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>No Telephone Line modification history available.</p>\r\n          )}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Dashboard.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\hooks\\useAuth.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Login.js",["98","99"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport loginpageimage from '../../assets/loginpageimage.jpg'; // Import the image\n\nconst Login = () => {\n  const { login } = useAuth();\n  const history = useHistory();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const user = await login(email, password);\n      setMessage('Login successful! Redirecting to dashboard...');\n      \n      // Redirect based on role\n      setTimeout(() => {\n        switch (user.role) {\n          case 'admin':\n            history.push('/admin-dashboard');\n            break;\n          case 'consultant':\n            history.push('/consultant-dashboard');\n            break;\n          default:\n            history.push('/dashboard');\n            break;\n        }\n      }, 2000);\n    } catch (error) {\n      setMessage('Login failed: ' + error.message);\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.background}></div>\n      <h2 style={styles.h2}>Login</h2>\n      {message && <p style={styles.message}>{message}</p>}\n      <form onSubmit={handleSubmit} style={styles.form}>\n        <div style={styles.div}>\n          <label style={styles.label}>Email</label>\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required style={styles.input} />\n        </div>\n        <div style={styles.div}>\n          <label style={styles.label}>Password</label>\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required style={styles.input} />\n        </div>\n        <button \n          type=\"submit\" \n          style={isHovering ? { ...styles.button, ...styles.buttonHover } : styles.button}\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n        >\n          Login\n        </button>\n        <div style={styles.additionalOptions}>\n          <label>\n            <input type=\"checkbox\" /> Remember me\n          </label>\n          <a href=\"/forgot-password\" style={styles.link}>Forgot password?</a>\n        </div>\n        <footer style={styles.footer}>\n          Not a member? <a href=\"/signup\" style={styles.link}>Signup Now</a>\n        </footer>\n      </form>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    textAlign: 'center',\n    overflow: 'hidden',\n    textAlign: 'center',\n    marginTop: '-10px',\n    marginLeft: '-10px',\n    marginRight: '-10px',\n    marginBottom: '-10px',\n    flex: 1\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: `url(${loginpageimage}) no-repeat center center fixed`,\n    backgroundSize: 'cover',\n    filter: 'blur(4px)',\n    zIndex: -1,\n  },\n  h2: {\n    color: '#333',\n    marginBottom: '20px',\n    fontWeight: 'bold',\n    fontSize: '50px',\n  },\n  form: {\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '70px 50px',\n    borderRadius: '10px',\n    boxShadow: '0px 4px 15px rgba(0, 0, 0, 0.1)',\n    textAlign: 'left',\n    width: '100%',\n    maxWidth: '450px',\n    zIndex: 1,\n    position: 'relative',\n  },\n  div: {\n    marginBottom: '30px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555',\n    marginBottom: '30px',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ddd',\n    borderRadius: '5px',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    marginBottom: '20px',\n    marginTop: '-60px',\n  },\n  button: {\n    width: '100%',\n    padding: '10px',\n    border: 'none',\n    borderRadius: '5px',\n    backgroundColor: '#ef6108', // Orange color\n    color: 'white',\n    fontSize: '16px',\n    cursor: 'pointer',\n    marginTop: '10px',\n  },\n  buttonHover: {\n    backgroundColor: 'black', // Darker color on hover\n  },\n  additionalOptions: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: '10px',\n  },\n  link: {\n    color: '#ef6108',\n    textDecoration: 'none',\n    fontSize: '14px',\n  },\n  footer: {\n    marginTop: '20px',\n    fontSize: '14px',\n    color: '#777',\n    fontWeight: 'bold',\n    position: 'absolute',\n    bottom: '20px', // Adjust as necessary\n    width: '100%',\n    textAlign: 'center',\n    alignItems: 'center',\n  },\n  message: {\n    color: 'red',\n    fontStyle: 'italic',\n  }\n};\n\nexport default Login;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Signup.js",["100","101","102"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport signupBackgroundImage from '../../assets/loginpageimage.jpg'; // Import the image\n\nconst Signup = () => {\n  const { signup } = useAuth();\n  const history = useHistory();\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (password.length < 6) {\n      setMessage('Password must be at least 6 characters long');\n      return;\n    }\n    try {\n      await signup(fullName, email, password);\n      setMessage('Signup successful! Redirecting to login...');\n      setTimeout(() => {\n        history.push('/login');\n      }, 2000);\n    } catch (error) {\n      const errorMessage = error.response && error.response.data ? error.response.data.msg : error.message;\n      setMessage('Signup failed: ' + errorMessage);\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.background}></div>\n      <h2 style={styles.h2}>Signup</h2>\n      {message && <p style={styles.message}>{message}</p>}\n      <form onSubmit={handleSubmit} style={styles.form}>\n        <div style={styles.div}>\n          <label style={styles.label}>Full Name</label>\n          <input type=\"text\" value={fullName} onChange={(e) => setFullName(e.target.value)} required style={styles.input} />\n        </div>\n        <div style={styles.div}>\n          <label style={styles.label}>Email</label>\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required style={styles.input} />\n        </div>\n        <div style={styles.div}>\n          <label style={styles.label}>Password</label>\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required style={styles.input} />\n        </div>\n        <button \n          type=\"submit\" \n          style={isHovering ? { ...styles.button, ...styles.buttonHover } : styles.button}\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n        >\n          Signup\n        </button>\n        <footer style={styles.footer}>\n          Already a member? <a href=\"/login\" style={styles.link}>Login Now</a>\n        </footer>\n      </form>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    textAlign: 'center',\n    overflow: 'hidden',\n    textAlign: 'center',\n    marginTop: '-10px',\n    marginLeft: '-10px',\n    marginRight: '-10px',\n    marginBottom: '-10px',\n    flex: 1\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: `url(${signupBackgroundImage}) no-repeat center center fixed`,\n    backgroundSize: 'cover',\n    filter: 'blur(4px)',\n    zIndex: -1,\n  },\n  h2: {\n    color: '#333',\n    marginBottom: '20px',\n    fontWeight: 'bold',\n    fontSize: '50px',\n  },\n  form: {\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '50px 50px',\n    borderRadius: '10px',\n    boxShadow: '0px 4px 15px rgba(0, 0, 0, 0.1)',\n    textAlign: 'left',\n    width: '100%',\n    maxWidth: '450px',\n    zIndex: 1,\n    position: 'relative',\n  },\n  div: {\n    marginBottom: '30px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555',\n    marginBottom: '25px',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ddd',\n    borderRadius: '5px',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    marginBottom: '20px',\n    marginTop: '-10px',\n  },\n  button: {\n    width: '100%',\n    padding: '10px',\n    border: 'none',\n    borderRadius: '5px',\n    backgroundColor: '#ef6108', // Orange color\n    color: 'white',\n    fontSize: '16px',\n    cursor: 'pointer',\n    marginTop: '1px',\n    marginTop: '-10px',\n  },\n  buttonHover: {\n    backgroundColor: 'black', // Darker color on hover\n  },\n  link: {\n    color: '#ef6108',\n    textDecoration: 'none',\n    fontSize: '14px',\n  },\n  footer: {\n    marginTop: '10px',\n    fontSize: '14px',\n    color: '#777',\n    fontWeight: 'bold',\n    position: 'absolute',\n    bottom: '1px', // Adjust as necessary\n    width: 'calc(100% - 100px)', // Ensure the footer is within the form\n    textAlign: 'center',\n  },\n  message: {\n    color: 'red',\n    fontStyle: 'italic',\n  }\n};\n\nexport default Signup;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Navbar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Sidebar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ExcelEditor.js",["103"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport 'react-virtualized/styles.css'; // Only import the styles you need\r\nimport './ExcelEditor.css';\r\n\r\nconst indexToColumnName = (index) => {\r\n  let columnName = '';\r\n  let dividend = index + 1;\r\n\r\n  while (dividend > 0) {\r\n    let modulo = (dividend - 1) % 26;\r\n    columnName = String.fromCharCode(65 + modulo) + columnName;\r\n    dividend = Math.floor((dividend - modulo) / 26);\r\n  }\r\n\r\n  return columnName;\r\n};\r\n\r\nconst ExcelEditor = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedColumn, setSelectedColumn] = useState(null);\r\n  const [sheets, setSheets] = useState([]);\r\n  const [selectedSheet, setSelectedSheet] = useState(null);\r\n  const [workbook, setWorkbook] = useState(null);\r\n  const [showRows, setShowRows] = useState(true); // State to control row visibility\r\n  const [selectedColumnRows, setSelectedColumnRows] = useState({}); // Track selected rows for each column\r\n\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const binaryStr = event.target.result;\r\n      const newWorkbook = XLSX.read(binaryStr, { type: 'binary' });\r\n\r\n      const sheetNames = newWorkbook.SheetNames.map((sheetName, index) => ({\r\n        value: index,\r\n        label: sheetName,\r\n      }));\r\n      setSheets(sheetNames);\r\n      setWorkbook(newWorkbook); // Set the workbook state\r\n      setSelectedSheet(sheetNames[0].value);\r\n\r\n      handleSheetChange(newWorkbook, sheetNames[0].value);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleSheetChange = (workbook, sheetIndex) => {\r\n    const sheetName = workbook.SheetNames[sheetIndex];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: '', header: 1 });\r\n    const [headers, ...rows] = jsonData;\r\n\r\n    const cols = headers.map((header, index) => ({\r\n      Header: header || `Column ${indexToColumnName(index)}`, // Handle empty headers\r\n      accessor: `col${index}`,\r\n      Filter: SelectColumnFilter,\r\n      Cell: EditableCell,\r\n      width: 150, // Default column width\r\n    }));\r\n\r\n    const formattedData = rows.map((row) => {\r\n      const rowData = {};\r\n      row.forEach((cell, index) => {\r\n        rowData[`col${index}`] = cell;\r\n      });\r\n      return rowData;\r\n    });\r\n\r\n    setColumns(cols);\r\n    setData(formattedData);\r\n    setShowRows(rows.length <= 100); // Set showRows based on the number of rows\r\n  };\r\n\r\n  const handleSheetSelect = (selectedOption) => {\r\n    setSelectedSheet(selectedOption.value);\r\n    if (workbook) {\r\n      handleSheetChange(workbook, selectedOption.value);\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (rowIndex, columnId, value) => {\r\n    const updatedData = data.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        return {\r\n          ...row,\r\n          [columnId]: value,\r\n        };\r\n      }\r\n      return row;\r\n    });\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleAddRow = (position, isZoomed = false) => {\r\n    const newRow = {};\r\n    columns.forEach(col => {\r\n      newRow[col.accessor] = '';\r\n    });\r\n    let updatedData = [...data];\r\n    if (selectedColumn !== null && isZoomed) {\r\n      // Column-specific row operations in zoomed view\r\n      const rowsToAdd = selectedColumnRows[selectedColumn] || [];\r\n      if (position === 'above') {\r\n        rowsToAdd.forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex),\r\n          ];\r\n        });\r\n      } else if (position === 'below') {\r\n        rowsToAdd.reverse().forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex + 1),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex + 1),\r\n          ];\r\n        });\r\n      }\r\n      setSelectedColumnRows({ ...selectedColumnRows, [selectedColumn]: [] });\r\n    } else {\r\n      // General row operations\r\n      if (position === 'above') {\r\n        selectedRows.forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex),\r\n          ];\r\n        });\r\n      } else if (position === 'below') {\r\n        selectedRows.reverse().forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex + 1),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex + 1),\r\n          ];\r\n        });\r\n      }\r\n      setSelectedRows([]);\r\n    }\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleDeleteRow = (isZoomed = false) => {\r\n    let updatedData = [...data];\r\n    if (selectedColumn !== null && isZoomed) {\r\n      // Column-specific row operations in zoomed view\r\n      const rowsToDelete = selectedColumnRows[selectedColumn] || [];\r\n      updatedData = data.filter((_, index) => !rowsToDelete.includes(index));\r\n      setSelectedColumnRows({ ...selectedColumnRows, [selectedColumn]: [] });\r\n    } else {\r\n      // General row operations\r\n      updatedData = data.filter((_, index) => !selectedRows.includes(index));\r\n      setSelectedRows([]);\r\n    }\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleSelectRow = (rowIndex) => {\r\n    if (selectedRows.includes(rowIndex)) {\r\n      setSelectedRows(selectedRows.filter(index => index !== rowIndex));\r\n    } else {\r\n      setSelectedRows([...selectedRows, rowIndex]);\r\n    }\r\n  };\r\n\r\n  const handleSelectColumnRow = (columnId, rowIndex) => {\r\n    setSelectedColumnRows(prevState => {\r\n      const newSelectedColumnRows = { ...prevState };\r\n      if (!newSelectedColumnRows[columnId]) {\r\n        newSelectedColumnRows[columnId] = [];\r\n      }\r\n      if (newSelectedColumnRows[columnId].includes(rowIndex)) {\r\n        newSelectedColumnRows[columnId] = newSelectedColumnRows[columnId].filter(index => index !== rowIndex);\r\n      } else {\r\n        newSelectedColumnRows[columnId].push(rowIndex);\r\n      }\r\n      return newSelectedColumnRows;\r\n    });\r\n  };\r\n\r\n  const handleSelectColumn = (columnId) => {\r\n    if (selectedColumn === columnId) {\r\n      setSelectedColumn(null);\r\n    } else {\r\n      setSelectedColumn(columnId);\r\n    }\r\n  };\r\n\r\n  const downloadExcel = () => {\r\n    const formattedData = data.map(row => {\r\n      const rowData = {};\r\n      columns.forEach(col => {\r\n        rowData[col.Header] = row[col.accessor];\r\n      });\r\n      return rowData;\r\n    });\r\n    const worksheet = XLSX.utils.json_to_sheet(formattedData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'modified_' + fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    a.remove();\r\n\r\n  };\r\n\r\n  const SelectColumnFilter = ({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n  }) => {\r\n    const options = React.useMemo(() => {\r\n      const optionsSet = new Set();\r\n      preFilteredRows.forEach(row => {\r\n        optionsSet.add(row.values[id]);\r\n      });\r\n      return [...optionsSet].map(option => ({ value: option, label: option }));\r\n    }, [id, preFilteredRows]);\r\n    const handleChange = (selectedOptions) => {\r\n      setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n    };\r\n\r\n    return (\r\n      <Select\r\n        value={options.filter(option => filterValue && filterValue.includes(option.value))}\r\n        onChange={handleChange}\r\n        options={options}\r\n        isMulti\r\n        placeholder={`Filter by...`}\r\n        className=\"filter-select\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const Table = ({ columns, data, showRows }) => {\r\n    const defaultColumn = {\r\n      Cell: EditableCell,\r\n      Filter: SelectColumnFilter,\r\n      width: 150,\r\n    };\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n      setFilter,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        updateMyData: handleCellChange,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    const zoomedTableRef = useRef(null);\r\n    const buttonsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n      const handleScroll = () => {\r\n        const zoomedTable = zoomedTableRef.current;\r\n        const buttons = buttonsRef.current;\r\n\r\n        if (!zoomedTable || !buttons) return;\r\n\r\n        const zoomedTableTop = zoomedTable.getBoundingClientRect().top + window.scrollY;\r\n        const zoomedTableBottom = zoomedTable.getBoundingClientRect().bottom + window.scrollY;\r\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n        if (scrollTop > zoomedTableTop && scrollTop < zoomedTableBottom - buttons.offsetHeight) {\r\n          buttons.style.position = 'fixed';\r\n          buttons.style.top = '20px';\r\n        } else {\r\n          buttons.style.position = 'absolute';\r\n          buttons.style.top = '20px';\r\n        }\r\n      };\r\n\r\n      window.addEventListener('scroll', handleScroll);\r\n\r\n      // Clean up event listener\r\n      return () => {\r\n        window.removeEventListener('scroll', handleScroll);\r\n      };\r\n    }, []);\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <div className=\"table-actions\">\r\n          <button onClick={() => handleAddRow('above')} className=\"action-button\">Add Row Above</button>\r\n          <button onClick={() => handleAddRow('below')} className=\"action-button\">Add Row Below</button>\r\n          <button onClick={handleDeleteRow} className=\"action-button delete\">Delete</button>\r\n        </div>\r\n        <table {...getTableProps()} className=\"data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                <th className=\"select-row-container\">#</th> {/* Extra header for row numbers */}\r\n                <th className=\"select-row-container\">Select Row</th> {/* Extra header for checkboxes */}\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {indexToColumnName(index)} {/* Use the helper function here */}\r\n                      <div>{column.render('Header')}</div>\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                      <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                      <div className=\"select-column-container\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedColumn === column.id}\r\n                          onChange={() => handleSelectColumn(column.id)}\r\n                        />\r\n                        <span className=\"select-column-text\">Select Column</span>\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n\r\n          <tbody {...getTableBodyProps()}>\r\n            {showRows && rows.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  <td className=\"select-row-container\">{rowIndex + 1}</td> {/* Cell for row number */}\r\n                  <td className=\"select-row-container\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedRows.includes(rowIndex)}\r\n                      onChange={() => handleSelectRow(rowIndex)}\r\n                    />\r\n                  </td>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        {selectedColumn !== null && (\r\n          <div className=\"zoomed-column\" ref={zoomedTableRef}>\r\n            <div className=\"zoomed-table-container\">\r\n              <div className=\"zoomed-table-actions\" ref={buttonsRef}>\r\n                <button onClick={() => handleAddRow('above', true)} className=\"action-button\">Add Row Above</button>\r\n                <button onClick={() => handleAddRow('below', true)} className=\"action-button\">Add Row Below</button>\r\n                <button onClick={() => handleDeleteRow(true)} className=\"action-button delete\">Delete</button>\r\n              </div>\r\n              <h3 className=\"zoomed-table-title\">{columns.find(col => col.accessor === selectedColumn).Header}</h3>\r\n              <table className=\"zoomed-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>Select Row</th>\r\n                    <th>{columns.find(col => col.accessor === selectedColumn).Header}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {rows.map((row, index) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <tr {...row.getRowProps()}>\r\n                        <td>{index + 1}</td>\r\n                        <td className=\"select-row-container\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedColumnRows[selectedColumn]?.includes(index) || false}\r\n                            onChange={() => handleSelectColumnRow(selectedColumn, index)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <EditableCell\r\n                            value={row.values[selectedColumn]}\r\n                            row={{ index }}\r\n                            column={{ id: selectedColumn }}\r\n                            updateMyData={handleCellChange}\r\n                            className=\"zoomed-input\"\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const EditableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData,\r\n    className,\r\n  }) => {\r\n    const [value, setValue] = React.useState(initialValue);\r\n    const onChange = e => {\r\n      setValue(e.target.value);\r\n    };\r\n\r\n    const onBlur = () => {\r\n      updateMyData(index, id, value);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return <input value={value} onChange={onChange} onBlur={onBlur} className={className} />;\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"excel-editor\">\r\n      <div className=\"file-upload-container\">\r\n        <input type=\"file\" onChange={handleFileUpload} className=\"file-input\" />\r\n      </div>\r\n      {sheets.length > 0 && (\r\n        <Select\r\n          value={sheets.find(sheet => sheet.value === selectedSheet)}\r\n          onChange={handleSheetSelect}\r\n          options={sheets}\r\n          className=\"sheet-select\"\r\n        />\r\n      )}\r\n      {columns.length > 0 && (\r\n        <Table columns={columns} data={data} showRows={showRows} />\r\n      )}\r\n      <button onClick={downloadExcel} className=\"download-button\">Download Modified Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipment.js",["104","105","106","107","108","109","110"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentView.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPack.js",["111","112"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackView.js",["113"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLine.js",["114","115"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineView.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"120","severity":1,"message":"124","line":1,"column":28,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"120","severity":1,"message":"125","line":7,"column":11,"nodeType":"122","messageId":"123","endLine":7,"endColumn":15},{"ruleId":"120","severity":1,"message":"126","line":14,"column":9,"nodeType":"122","messageId":"123","endLine":14,"endColumn":25},{"ruleId":"127","severity":1,"message":"128","line":85,"column":5,"nodeType":"129","messageId":"130","endLine":85,"endColumn":14},{"ruleId":"127","severity":1,"message":"131","line":128,"column":5,"nodeType":"129","messageId":"130","endLine":128,"endColumn":17},{"ruleId":"127","severity":1,"message":"128","line":77,"column":5,"nodeType":"129","messageId":"130","endLine":77,"endColumn":14},{"ruleId":"127","severity":1,"message":"131","line":120,"column":5,"nodeType":"129","messageId":"130","endLine":120,"endColumn":17},{"ruleId":"127","severity":1,"message":"132","line":142,"column":5,"nodeType":"129","messageId":"130","endLine":142,"endColumn":14},{"ruleId":"120","severity":1,"message":"133","line":261,"column":7,"nodeType":"122","messageId":"123","endLine":261,"endColumn":16},{"ruleId":"120","severity":1,"message":"134","line":6,"column":8,"nodeType":"122","messageId":"123","endLine":6,"endColumn":18},{"ruleId":"120","severity":1,"message":"135","line":33,"column":10,"nodeType":"122","messageId":"123","endLine":33,"endColumn":22},{"ruleId":"120","severity":1,"message":"136","line":70,"column":18,"nodeType":"122","messageId":"123","endLine":70,"endColumn":27},{"ruleId":"137","severity":1,"message":"138","line":121,"column":6,"nodeType":"139","endLine":121,"endColumn":29,"suggestions":"140"},{"ruleId":"120","severity":1,"message":"141","line":255,"column":9,"nodeType":"122","messageId":"123","endLine":255,"endColumn":25},{"ruleId":"137","severity":1,"message":"142","line":359,"column":6,"nodeType":"139","endLine":359,"endColumn":69,"suggestions":"143"},{"ruleId":"120","severity":1,"message":"144","line":675,"column":7,"nodeType":"122","messageId":"123","endLine":675,"endColumn":25},{"ruleId":"137","severity":1,"message":"145","line":141,"column":6,"nodeType":"139","endLine":141,"endColumn":19,"suggestions":"146"},{"ruleId":"137","severity":1,"message":"147","line":353,"column":6,"nodeType":"139","endLine":353,"endColumn":29,"suggestions":"148"},{"ruleId":"120","severity":1,"message":"149","line":12,"column":20,"nodeType":"122","messageId":"123","endLine":12,"endColumn":31},{"ruleId":"137","severity":1,"message":"145","line":101,"column":6,"nodeType":"139","endLine":101,"endColumn":19,"suggestions":"150"},{"ruleId":"137","severity":1,"message":"151","line":215,"column":6,"nodeType":"139","endLine":215,"endColumn":38,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'user' is assigned a value but never used.","'handleNavigation' is assigned a value but never used.","no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","unexpected","Duplicate key 'marginBottom'.","Duplicate key 'marginTop'.","'setFilter' is assigned a value but never used.","'DatePicker' is defined but never used.","'itEquipments' is assigned a value but never used.","'setSortBy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchITEquipments'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'handleDateChange' is assigned a value but never used.","React Hook React.useMemo has an unnecessary dependency: 'selectedFilters'. Either exclude it or remove the dependency array.",["156"],"'SelectColumnFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pageSize'. Either include it or remove the dependency array.",["157"],"React Hook React.useMemo has a missing dependency: 'handleDeletePack'. Either include it or remove the dependency array.",["158"],"'setViewType' is assigned a value but never used.",["159"],"React Hook React.useMemo has a missing dependency: 'handleDeleteLine'. Either include it or remove the dependency array.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"165","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [currentPage, fetchITEquipments, pageSize]",{"range":"172","text":"173"},"Update the dependencies array to be: [newEquipment, currentPage, pageSize, options]",{"range":"174","text":"175"},"Update the dependencies array to be: [currentPage, pageSize]",{"range":"176","text":"177"},"Update the dependencies array to be: [currentPage, handleDeletePack, pageSize]",{"range":"178","text":"179"},{"range":"180","text":"177"},"Update the dependencies array to be: [newLine, currentPage, pageSize, handleDeleteLine]",{"range":"181","text":"182"},[3916,3939],"[currentPage, fetchITEquipments, pageSize]",[11537,11600],"[newEquipment, currentPage, pageSize, options]",[4338,4351],"[currentPage, pageSize]",[10452,10475],"[currentPage, handleDeletePack, pageSize]",[3311,3324],[7047,7079],"[newLine, currentPage, pageSize, handleDeleteLine]"]