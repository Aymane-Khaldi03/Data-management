[{"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\index.js":"1","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\App.js":"2","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\ConsultantDashboard.js":"3","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Home.js":"4","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\AdminDashboard.js":"5","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Dashboard.js":"6","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\hooks\\useAuth.js":"7","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Login.js":"8","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Signup.js":"9","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Navbar.js":"10","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Sidebar.js":"11","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ExcelEditor.js":"12","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipment.js":"13","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentLanding.js":"14","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentView.js":"15","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPack.js":"16","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackLanding.js":"17","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackView.js":"18","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLine.js":"19","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineLanding.js":"20","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineView.js":"21"},{"size":259,"mtime":1717579923617,"results":"22","hashOfConfig":"23"},{"size":3317,"mtime":1720424221006,"results":"24","hashOfConfig":"23"},{"size":1292,"mtime":1719914870782,"results":"25","hashOfConfig":"23"},{"size":719,"mtime":1717667400577,"results":"26","hashOfConfig":"23"},{"size":11995,"mtime":1720529546801,"results":"27","hashOfConfig":"23"},{"size":1261,"mtime":1717595088658,"results":"28","hashOfConfig":"23"},{"size":2287,"mtime":1717678338440,"results":"29","hashOfConfig":"23"},{"size":4779,"mtime":1717680029396,"results":"30","hashOfConfig":"23"},{"size":4672,"mtime":1717680046431,"results":"31","hashOfConfig":"23"},{"size":1282,"mtime":1717680395145,"results":"32","hashOfConfig":"23"},{"size":1696,"mtime":1720010551109,"results":"33","hashOfConfig":"23"},{"size":16194,"mtime":1718804351360,"results":"34","hashOfConfig":"23"},{"size":27933,"mtime":1720525642472,"results":"35","hashOfConfig":"23"},{"size":803,"mtime":1719560974709,"results":"36","hashOfConfig":"23"},{"size":8219,"mtime":1720080395135,"results":"37","hashOfConfig":"23"},{"size":20570,"mtime":1720525601797,"results":"38","hashOfConfig":"23"},{"size":859,"mtime":1719565350013,"results":"39","hashOfConfig":"23"},{"size":8037,"mtime":1720523179036,"results":"40","hashOfConfig":"23"},{"size":13731,"mtime":1720524067220,"results":"41","hashOfConfig":"23"},{"size":895,"mtime":1720430582223,"results":"42","hashOfConfig":"23"},{"size":7230,"mtime":1720431628972,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"10eak4g",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\index.js",[],["93","94"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\App.js",["95","96"],"import React, { useEffect, useState } from 'react';\nimport { Route, Switch, Redirect, useLocation, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Login from './components/Auth/Login';\nimport Signup from './components/Auth/Signup';\nimport Dashboard from './pages/Dashboard';\nimport AdminDashboard from './pages/AdminDashboard';\nimport ConsultantDashboard from './pages/ConsultantDashboard';\nimport Navbar from './components/Shared/Navbar';\nimport Sidebar from './components/Shared/Sidebar';\nimport { AuthProvider, useAuth } from './hooks/useAuth';\nimport ExcelEditor from './components/Dashboard/ExcelEditor';\n//\nimport ITEquipmentLanding from './components/Dashboard/ITEquipmentLanding';\nimport ITEquipmentView from './components/Dashboard/ITEquipmentView';\nimport ITEquipment from './components/Dashboard/ITEquipment';\n//\nimport TelecomPack from './components/Dashboard/TelecomPack';\nimport TelecomPackLanding from './components/Dashboard/TelecomPackLanding';\nimport TelecomPackView from './components/Dashboard/TelecomPackView';\n\nimport './App.css';\nimport TelephoneLine from './components/Dashboard/TelephoneLine';\nimport TelephoneLineLanding from './components/Dashboard/TelephoneLineLanding';\nimport TelephoneLineView from './components/Dashboard/TelephoneLineView';\n\nconst AppContent = () => {\n  const { user } = useAuth();\n  const location = useLocation();\n\n  // Determine if the current path is the homepage, signup page, or login page\n  const showSidebar = !['/', '/signup', '/login'].includes(location.pathname);\n  const isAuthenticated = !!user; // Check if the user is authenticated\n\n  const getDashboardComponent = () => {\n    if (!isAuthenticated) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    switch (user.role) {\n      case 'admin':\n        return <AdminDashboard />;\n      case 'consultant':\n        return <ConsultantDashboard />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className={`main-content ${showSidebar ? 'with-sidebar' : ''}`}>\n        {showSidebar && <Sidebar />}\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/dashboard\" exact render={getDashboardComponent} />\n          \n          <Route path=\"/it-equipment\" exact component={ITEquipmentLanding} />\n          <Route path=\"/it-equipment-manager\" component={ITEquipment} />\n          <Route path=\"/it-equipment-view\" component={ITEquipmentView} />\n\n          <Route path=\"/telecom-packs\" exact component={TelecomPackLanding} />\n          <Route path=\"/telecom-pack-manager\" component={TelecomPack} />\n          <Route path=\"/telecom-pack-view\" component={TelecomPackView} />\n\n          <Route path=\"/telephone-lines\" exact component={TelephoneLineLanding} />\n          <Route path=\"/telephone-line-manager\" component={TelephoneLine} />\n          <Route path=\"/telephone-line-view\" component={TelephoneLineView} />\n\n          <Route path=\"/edit-excel\" component={ExcelEditor} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => (\n  <AuthProvider>\n    <Router>\n      <AppContent />\n    </Router>\n  </AuthProvider>\n);\n\nexport default App;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\ConsultantDashboard.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Home.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\AdminDashboard.js",["97","98"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\pages\\Dashboard.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\hooks\\useAuth.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Login.js",["99","100"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport loginpageimage from '../../assets/loginpageimage.jpg'; // Import the image\n\nconst Login = () => {\n  const { login } = useAuth();\n  const history = useHistory();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const user = await login(email, password);\n      setMessage('Login successful! Redirecting to dashboard...');\n      \n      // Redirect based on role\n      setTimeout(() => {\n        switch (user.role) {\n          case 'admin':\n            history.push('/admin-dashboard');\n            break;\n          case 'consultant':\n            history.push('/consultant-dashboard');\n            break;\n          default:\n            history.push('/dashboard');\n            break;\n        }\n      }, 2000);\n    } catch (error) {\n      setMessage('Login failed: ' + error.message);\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.background}></div>\n      <h2 style={styles.h2}>Login</h2>\n      {message && <p style={styles.message}>{message}</p>}\n      <form onSubmit={handleSubmit} style={styles.form}>\n        <div style={styles.div}>\n          <label style={styles.label}>Email</label>\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required style={styles.input} />\n        </div>\n        <div style={styles.div}>\n          <label style={styles.label}>Password</label>\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required style={styles.input} />\n        </div>\n        <button \n          type=\"submit\" \n          style={isHovering ? { ...styles.button, ...styles.buttonHover } : styles.button}\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n        >\n          Login\n        </button>\n        <div style={styles.additionalOptions}>\n          <label>\n            <input type=\"checkbox\" /> Remember me\n          </label>\n          <a href=\"/forgot-password\" style={styles.link}>Forgot password?</a>\n        </div>\n        <footer style={styles.footer}>\n          Not a member? <a href=\"/signup\" style={styles.link}>Signup Now</a>\n        </footer>\n      </form>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    textAlign: 'center',\n    overflow: 'hidden',\n    textAlign: 'center',\n    marginTop: '-10px',\n    marginLeft: '-10px',\n    marginRight: '-10px',\n    marginBottom: '-10px',\n    flex: 1\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: `url(${loginpageimage}) no-repeat center center fixed`,\n    backgroundSize: 'cover',\n    filter: 'blur(4px)',\n    zIndex: -1,\n  },\n  h2: {\n    color: '#333',\n    marginBottom: '20px',\n    fontWeight: 'bold',\n    fontSize: '50px',\n  },\n  form: {\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '70px 50px',\n    borderRadius: '10px',\n    boxShadow: '0px 4px 15px rgba(0, 0, 0, 0.1)',\n    textAlign: 'left',\n    width: '100%',\n    maxWidth: '450px',\n    zIndex: 1,\n    position: 'relative',\n  },\n  div: {\n    marginBottom: '30px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555',\n    marginBottom: '30px',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ddd',\n    borderRadius: '5px',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    marginBottom: '20px',\n    marginTop: '-60px',\n  },\n  button: {\n    width: '100%',\n    padding: '10px',\n    border: 'none',\n    borderRadius: '5px',\n    backgroundColor: '#ef6108', // Orange color\n    color: 'white',\n    fontSize: '16px',\n    cursor: 'pointer',\n    marginTop: '10px',\n  },\n  buttonHover: {\n    backgroundColor: 'black', // Darker color on hover\n  },\n  additionalOptions: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: '10px',\n  },\n  link: {\n    color: '#ef6108',\n    textDecoration: 'none',\n    fontSize: '14px',\n  },\n  footer: {\n    marginTop: '20px',\n    fontSize: '14px',\n    color: '#777',\n    fontWeight: 'bold',\n    position: 'absolute',\n    bottom: '20px', // Adjust as necessary\n    width: '100%',\n    textAlign: 'center',\n    alignItems: 'center',\n  },\n  message: {\n    color: 'red',\n    fontStyle: 'italic',\n  }\n};\n\nexport default Login;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Auth\\Signup.js",["101","102","103"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport signupBackgroundImage from '../../assets/loginpageimage.jpg'; // Import the image\n\nconst Signup = () => {\n  const { signup } = useAuth();\n  const history = useHistory();\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (password.length < 6) {\n      setMessage('Password must be at least 6 characters long');\n      return;\n    }\n    try {\n      await signup(fullName, email, password);\n      setMessage('Signup successful! Redirecting to login...');\n      setTimeout(() => {\n        history.push('/login');\n      }, 2000);\n    } catch (error) {\n      const errorMessage = error.response && error.response.data ? error.response.data.msg : error.message;\n      setMessage('Signup failed: ' + errorMessage);\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.background}></div>\n      <h2 style={styles.h2}>Signup</h2>\n      {message && <p style={styles.message}>{message}</p>}\n      <form onSubmit={handleSubmit} style={styles.form}>\n        <div style={styles.div}>\n          <label style={styles.label}>Full Name</label>\n          <input type=\"text\" value={fullName} onChange={(e) => setFullName(e.target.value)} required style={styles.input} />\n        </div>\n        <div style={styles.div}>\n          <label style={styles.label}>Email</label>\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required style={styles.input} />\n        </div>\n        <div style={styles.div}>\n          <label style={styles.label}>Password</label>\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required style={styles.input} />\n        </div>\n        <button \n          type=\"submit\" \n          style={isHovering ? { ...styles.button, ...styles.buttonHover } : styles.button}\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n        >\n          Signup\n        </button>\n        <footer style={styles.footer}>\n          Already a member? <a href=\"/login\" style={styles.link}>Login Now</a>\n        </footer>\n      </form>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    textAlign: 'center',\n    overflow: 'hidden',\n    textAlign: 'center',\n    marginTop: '-10px',\n    marginLeft: '-10px',\n    marginRight: '-10px',\n    marginBottom: '-10px',\n    flex: 1\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: `url(${signupBackgroundImage}) no-repeat center center fixed`,\n    backgroundSize: 'cover',\n    filter: 'blur(4px)',\n    zIndex: -1,\n  },\n  h2: {\n    color: '#333',\n    marginBottom: '20px',\n    fontWeight: 'bold',\n    fontSize: '50px',\n  },\n  form: {\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '50px 50px',\n    borderRadius: '10px',\n    boxShadow: '0px 4px 15px rgba(0, 0, 0, 0.1)',\n    textAlign: 'left',\n    width: '100%',\n    maxWidth: '450px',\n    zIndex: 1,\n    position: 'relative',\n  },\n  div: {\n    marginBottom: '30px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555',\n    marginBottom: '25px',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ddd',\n    borderRadius: '5px',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    marginBottom: '20px',\n    marginTop: '-10px',\n  },\n  button: {\n    width: '100%',\n    padding: '10px',\n    border: 'none',\n    borderRadius: '5px',\n    backgroundColor: '#ef6108', // Orange color\n    color: 'white',\n    fontSize: '16px',\n    cursor: 'pointer',\n    marginTop: '1px',\n    marginTop: '-10px',\n  },\n  buttonHover: {\n    backgroundColor: 'black', // Darker color on hover\n  },\n  link: {\n    color: '#ef6108',\n    textDecoration: 'none',\n    fontSize: '14px',\n  },\n  footer: {\n    marginTop: '10px',\n    fontSize: '14px',\n    color: '#777',\n    fontWeight: 'bold',\n    position: 'absolute',\n    bottom: '1px', // Adjust as necessary\n    width: 'calc(100% - 100px)', // Ensure the footer is within the form\n    textAlign: 'center',\n  },\n  message: {\n    color: 'red',\n    fontStyle: 'italic',\n  }\n};\n\nexport default Signup;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Navbar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Shared\\Sidebar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ExcelEditor.js",["104"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport 'react-virtualized/styles.css'; // Only import the styles you need\r\nimport './ExcelEditor.css';\r\n\r\nconst indexToColumnName = (index) => {\r\n  let columnName = '';\r\n  let dividend = index + 1;\r\n\r\n  while (dividend > 0) {\r\n    let modulo = (dividend - 1) % 26;\r\n    columnName = String.fromCharCode(65 + modulo) + columnName;\r\n    dividend = Math.floor((dividend - modulo) / 26);\r\n  }\r\n\r\n  return columnName;\r\n};\r\n\r\nconst ExcelEditor = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedColumn, setSelectedColumn] = useState(null);\r\n  const [sheets, setSheets] = useState([]);\r\n  const [selectedSheet, setSelectedSheet] = useState(null);\r\n  const [workbook, setWorkbook] = useState(null);\r\n  const [showRows, setShowRows] = useState(true); // State to control row visibility\r\n  const [selectedColumnRows, setSelectedColumnRows] = useState({}); // Track selected rows for each column\r\n\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const binaryStr = event.target.result;\r\n      const newWorkbook = XLSX.read(binaryStr, { type: 'binary' });\r\n\r\n      const sheetNames = newWorkbook.SheetNames.map((sheetName, index) => ({\r\n        value: index,\r\n        label: sheetName,\r\n      }));\r\n      setSheets(sheetNames);\r\n      setWorkbook(newWorkbook); // Set the workbook state\r\n      setSelectedSheet(sheetNames[0].value);\r\n\r\n      handleSheetChange(newWorkbook, sheetNames[0].value);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleSheetChange = (workbook, sheetIndex) => {\r\n    const sheetName = workbook.SheetNames[sheetIndex];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: '', header: 1 });\r\n    const [headers, ...rows] = jsonData;\r\n\r\n    const cols = headers.map((header, index) => ({\r\n      Header: header || `Column ${indexToColumnName(index)}`, // Handle empty headers\r\n      accessor: `col${index}`,\r\n      Filter: SelectColumnFilter,\r\n      Cell: EditableCell,\r\n      width: 150, // Default column width\r\n    }));\r\n\r\n    const formattedData = rows.map((row) => {\r\n      const rowData = {};\r\n      row.forEach((cell, index) => {\r\n        rowData[`col${index}`] = cell;\r\n      });\r\n      return rowData;\r\n    });\r\n\r\n    setColumns(cols);\r\n    setData(formattedData);\r\n    setShowRows(rows.length <= 100); // Set showRows based on the number of rows\r\n  };\r\n\r\n  const handleSheetSelect = (selectedOption) => {\r\n    setSelectedSheet(selectedOption.value);\r\n    if (workbook) {\r\n      handleSheetChange(workbook, selectedOption.value);\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (rowIndex, columnId, value) => {\r\n    const updatedData = data.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        return {\r\n          ...row,\r\n          [columnId]: value,\r\n        };\r\n      }\r\n      return row;\r\n    });\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleAddRow = (position, isZoomed = false) => {\r\n    const newRow = {};\r\n    columns.forEach(col => {\r\n      newRow[col.accessor] = '';\r\n    });\r\n    let updatedData = [...data];\r\n    if (selectedColumn !== null && isZoomed) {\r\n      // Column-specific row operations in zoomed view\r\n      const rowsToAdd = selectedColumnRows[selectedColumn] || [];\r\n      if (position === 'above') {\r\n        rowsToAdd.forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex),\r\n          ];\r\n        });\r\n      } else if (position === 'below') {\r\n        rowsToAdd.reverse().forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex + 1),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex + 1),\r\n          ];\r\n        });\r\n      }\r\n      setSelectedColumnRows({ ...selectedColumnRows, [selectedColumn]: [] });\r\n    } else {\r\n      // General row operations\r\n      if (position === 'above') {\r\n        selectedRows.forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex),\r\n          ];\r\n        });\r\n      } else if (position === 'below') {\r\n        selectedRows.reverse().forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex + 1),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex + 1),\r\n          ];\r\n        });\r\n      }\r\n      setSelectedRows([]);\r\n    }\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleDeleteRow = (isZoomed = false) => {\r\n    let updatedData = [...data];\r\n    if (selectedColumn !== null && isZoomed) {\r\n      // Column-specific row operations in zoomed view\r\n      const rowsToDelete = selectedColumnRows[selectedColumn] || [];\r\n      updatedData = data.filter((_, index) => !rowsToDelete.includes(index));\r\n      setSelectedColumnRows({ ...selectedColumnRows, [selectedColumn]: [] });\r\n    } else {\r\n      // General row operations\r\n      updatedData = data.filter((_, index) => !selectedRows.includes(index));\r\n      setSelectedRows([]);\r\n    }\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleSelectRow = (rowIndex) => {\r\n    if (selectedRows.includes(rowIndex)) {\r\n      setSelectedRows(selectedRows.filter(index => index !== rowIndex));\r\n    } else {\r\n      setSelectedRows([...selectedRows, rowIndex]);\r\n    }\r\n  };\r\n\r\n  const handleSelectColumnRow = (columnId, rowIndex) => {\r\n    setSelectedColumnRows(prevState => {\r\n      const newSelectedColumnRows = { ...prevState };\r\n      if (!newSelectedColumnRows[columnId]) {\r\n        newSelectedColumnRows[columnId] = [];\r\n      }\r\n      if (newSelectedColumnRows[columnId].includes(rowIndex)) {\r\n        newSelectedColumnRows[columnId] = newSelectedColumnRows[columnId].filter(index => index !== rowIndex);\r\n      } else {\r\n        newSelectedColumnRows[columnId].push(rowIndex);\r\n      }\r\n      return newSelectedColumnRows;\r\n    });\r\n  };\r\n\r\n  const handleSelectColumn = (columnId) => {\r\n    if (selectedColumn === columnId) {\r\n      setSelectedColumn(null);\r\n    } else {\r\n      setSelectedColumn(columnId);\r\n    }\r\n  };\r\n\r\n  const downloadExcel = () => {\r\n    const formattedData = data.map(row => {\r\n      const rowData = {};\r\n      columns.forEach(col => {\r\n        rowData[col.Header] = row[col.accessor];\r\n      });\r\n      return rowData;\r\n    });\r\n    const worksheet = XLSX.utils.json_to_sheet(formattedData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'modified_' + fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    a.remove();\r\n\r\n  };\r\n\r\n  const SelectColumnFilter = ({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n  }) => {\r\n    const options = React.useMemo(() => {\r\n      const optionsSet = new Set();\r\n      preFilteredRows.forEach(row => {\r\n        optionsSet.add(row.values[id]);\r\n      });\r\n      return [...optionsSet].map(option => ({ value: option, label: option }));\r\n    }, [id, preFilteredRows]);\r\n    const handleChange = (selectedOptions) => {\r\n      setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n    };\r\n\r\n    return (\r\n      <Select\r\n        value={options.filter(option => filterValue && filterValue.includes(option.value))}\r\n        onChange={handleChange}\r\n        options={options}\r\n        isMulti\r\n        placeholder={`Filter by...`}\r\n        className=\"filter-select\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const Table = ({ columns, data, showRows }) => {\r\n    const defaultColumn = {\r\n      Cell: EditableCell,\r\n      Filter: SelectColumnFilter,\r\n      width: 150,\r\n    };\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n      setFilter,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        updateMyData: handleCellChange,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    const zoomedTableRef = useRef(null);\r\n    const buttonsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n      const handleScroll = () => {\r\n        const zoomedTable = zoomedTableRef.current;\r\n        const buttons = buttonsRef.current;\r\n\r\n        if (!zoomedTable || !buttons) return;\r\n\r\n        const zoomedTableTop = zoomedTable.getBoundingClientRect().top + window.scrollY;\r\n        const zoomedTableBottom = zoomedTable.getBoundingClientRect().bottom + window.scrollY;\r\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n        if (scrollTop > zoomedTableTop && scrollTop < zoomedTableBottom - buttons.offsetHeight) {\r\n          buttons.style.position = 'fixed';\r\n          buttons.style.top = '20px';\r\n        } else {\r\n          buttons.style.position = 'absolute';\r\n          buttons.style.top = '20px';\r\n        }\r\n      };\r\n\r\n      window.addEventListener('scroll', handleScroll);\r\n\r\n      // Clean up event listener\r\n      return () => {\r\n        window.removeEventListener('scroll', handleScroll);\r\n      };\r\n    }, []);\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <div className=\"table-actions\">\r\n          <button onClick={() => handleAddRow('above')} className=\"action-button\">Add Row Above</button>\r\n          <button onClick={() => handleAddRow('below')} className=\"action-button\">Add Row Below</button>\r\n          <button onClick={handleDeleteRow} className=\"action-button delete\">Delete</button>\r\n        </div>\r\n        <table {...getTableProps()} className=\"data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                <th className=\"select-row-container\">#</th> {/* Extra header for row numbers */}\r\n                <th className=\"select-row-container\">Select Row</th> {/* Extra header for checkboxes */}\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {indexToColumnName(index)} {/* Use the helper function here */}\r\n                      <div>{column.render('Header')}</div>\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                      <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                      <div className=\"select-column-container\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedColumn === column.id}\r\n                          onChange={() => handleSelectColumn(column.id)}\r\n                        />\r\n                        <span className=\"select-column-text\">Select Column</span>\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n\r\n          <tbody {...getTableBodyProps()}>\r\n            {showRows && rows.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  <td className=\"select-row-container\">{rowIndex + 1}</td> {/* Cell for row number */}\r\n                  <td className=\"select-row-container\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedRows.includes(rowIndex)}\r\n                      onChange={() => handleSelectRow(rowIndex)}\r\n                    />\r\n                  </td>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        {selectedColumn !== null && (\r\n          <div className=\"zoomed-column\" ref={zoomedTableRef}>\r\n            <div className=\"zoomed-table-container\">\r\n              <div className=\"zoomed-table-actions\" ref={buttonsRef}>\r\n                <button onClick={() => handleAddRow('above', true)} className=\"action-button\">Add Row Above</button>\r\n                <button onClick={() => handleAddRow('below', true)} className=\"action-button\">Add Row Below</button>\r\n                <button onClick={() => handleDeleteRow(true)} className=\"action-button delete\">Delete</button>\r\n              </div>\r\n              <h3 className=\"zoomed-table-title\">{columns.find(col => col.accessor === selectedColumn).Header}</h3>\r\n              <table className=\"zoomed-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>Select Row</th>\r\n                    <th>{columns.find(col => col.accessor === selectedColumn).Header}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {rows.map((row, index) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <tr {...row.getRowProps()}>\r\n                        <td>{index + 1}</td>\r\n                        <td className=\"select-row-container\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedColumnRows[selectedColumn]?.includes(index) || false}\r\n                            onChange={() => handleSelectColumnRow(selectedColumn, index)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <EditableCell\r\n                            value={row.values[selectedColumn]}\r\n                            row={{ index }}\r\n                            column={{ id: selectedColumn }}\r\n                            updateMyData={handleCellChange}\r\n                            className=\"zoomed-input\"\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const EditableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData,\r\n    className,\r\n  }) => {\r\n    const [value, setValue] = React.useState(initialValue);\r\n    const onChange = e => {\r\n      setValue(e.target.value);\r\n    };\r\n\r\n    const onBlur = () => {\r\n      updateMyData(index, id, value);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return <input value={value} onChange={onChange} onBlur={onBlur} className={className} />;\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"excel-editor\">\r\n      <div className=\"file-upload-container\">\r\n        <input type=\"file\" onChange={handleFileUpload} className=\"file-input\" />\r\n      </div>\r\n      {sheets.length > 0 && (\r\n        <Select\r\n          value={sheets.find(sheet => sheet.value === selectedSheet)}\r\n          onChange={handleSheetSelect}\r\n          options={sheets}\r\n          className=\"sheet-select\"\r\n        />\r\n      )}\r\n      {columns.length > 0 && (\r\n        <Table columns={columns} data={data} showRows={showRows} />\r\n      )}\r\n      <button onClick={downloadExcel} className=\"download-button\">Download Modified Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipment.js",["105","106","107","108","109","110","111"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\ITEquipmentView.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPack.js",["112","113"],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelecomPackView.js",["114"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as XLSX from 'xlsx';\r\nimport './TelecomPackView.css';\r\n\r\nconst TelecomPackView = () => {\r\n  const [telecomPacks, setTelecomPacks] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [viewType, setViewType] = useState('general');\r\n  const history = useHistory();\r\n\r\n  const measureTextWidth = (text, font = '12px Arial') => {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    context.font = font;\r\n    return context.measureText(text).width;\r\n  };\r\n\r\n  const setDefaultValues = (data, defaultValue = '------') => {\r\n    return Object.fromEntries(\r\n      Object.entries(data).map(([key, value]) => {\r\n        if (value === '' || value === null) {\r\n          if (['dateAbonnement', 'dateReengagement', 'dateEtat'].includes(key)) {\r\n            return [key, null];  // Set date fields to null if empty\r\n          } else {\r\n            return [key, defaultValue];  // Set other fields to default value\r\n          }\r\n        }\r\n        return [key, value];\r\n      })\r\n    );\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return '------';\r\n    const date = new Date(dateString);\r\n    return date.toISOString().split('T')[0]; // Format date to YYYY-MM-DD\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTelecomPacks = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/telecom-packs', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n    \r\n        const data = response.data.map(pack => {\r\n          const { createdat, updatedat, id, produit, ...rest } = pack; // Exclude createdAt, updatedAt, id, and produit here\r\n          const formattedPack = setDefaultValues(rest);\r\n          return {\r\n            ...formattedPack,\r\n            dateAbonnement: formatDate(formattedPack.dateAbonnement),\r\n            dateReengagement: formatDate(formattedPack.dateReengagement),\r\n            dateEtat: formatDate(formattedPack.dateEtat),\r\n          };\r\n        });\r\n    \r\n        setTelecomPacks(data);\r\n    \r\n        const headers = Object.keys(data[0] || {});\r\n        const filteredHeaders = headers.filter(header => !['createdat', 'updatedat', 'produit'].includes(header)); // Exclude createdAt, updatedAt, and produit here\r\n        const maxWidths = filteredHeaders.reduce((acc, header) => {\r\n          const headerWidth = measureTextWidth(header.replace(/_/g, ' '));\r\n          const maxLength = Math.max(\r\n            headerWidth,\r\n            ...data.map(row => measureTextWidth(row[header] ? row[header].toString() : ''))\r\n          );\r\n          acc[header] = maxLength;\r\n          return acc;\r\n        }, {});\r\n    \r\n        const cols = [\r\n          {\r\n            Header: '#',\r\n            accessor: (row, i) => i + 1,\r\n            disableFilters: true,\r\n            disableSortBy: true,\r\n            width: 50,\r\n          },\r\n          ...filteredHeaders.map((header) => ({\r\n            Header: header.replace(/_/g, ' '),\r\n            accessor: header,\r\n            Filter: SelectColumnFilter,\r\n            width: maxWidths[header] + 20,\r\n          })),\r\n        ];\r\n    \r\n        setColumns(cols);\r\n      } catch (error) {\r\n        console.error('Error fetching Telecom Packs:', error);\r\n        alert('Error fetching Telecom Packs: ' + error.message);\r\n      }\r\n    };    \r\n    fetchTelecomPacks();\r\n  }, []);           \r\n\r\n  const SelectColumnFilter = ({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n  }) => {\r\n    const options = React.useMemo(() => {\r\n      const optionsSet = new Set();\r\n      preFilteredRows.forEach(row => {\r\n        optionsSet.add(row.values[id]);\r\n      });\r\n      return [...optionsSet].map(option => ({ value: option, label: option }));\r\n    }, [id, preFilteredRows]);\r\n\r\n    const handleChange = (selectedOptions) => {\r\n      setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n    };\r\n\r\n    return (\r\n      <Select\r\n        value={options.filter(option => filterValue && filterValue.includes(option.value))}\r\n        onChange={handleChange}\r\n        options={options}\r\n        isMulti\r\n        placeholder={'Filtrer par...'}\r\n        className=\"telecompack-view-filter-select\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const filterData = (data) => {\r\n    const filteredData = data.filter(item =>\r\n      item.entite && item.entite !== '------' &&\r\n      item.operateur && item.operateur !== '------' &&\r\n      item.produit2 && item.produit2 !== '------' &&\r\n      item.etatAbonnement && item.etatAbonnement !== '------'\r\n    );\r\n    return filteredData;\r\n  };\r\n\r\n  const exportToExcel = (data) => {\r\n    const filteredData = data.map(({ createdat, updatedat, id, produit, ...rest }) => rest); // Exclude createdAt, updatedAt, id, and produit here\r\n    const ws = XLSX.utils.json_to_sheet(filteredData);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"TelecomPacks\");\r\n    XLSX.writeFile(wb, \"Parc_Telecom.xlsx\");\r\n  };\r\n  \r\n  const Table = ({ columns, data }) => {\r\n    const defaultColumn = {\r\n      minWidth: 30,\r\n      width: 150,\r\n      maxWidth: 400,\r\n    };\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    return (\r\n      <div className=\"telecompack-view-table-container\">\r\n        <table {...getTableProps()} className=\"telecompack-view-data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                      <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} className={rowIndex % 2 === 0 ? 'telecompack-view-row-even' : 'telecompack-view-row-odd'}>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"telecompack-view-container\">\r\n      <button className=\"telecompack-view-back-button\" onClick={() => history.push('/telecom-packs')}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1 className=\"telecompack-view-title\">Afficher Telecom Packs</h1>\r\n      {columns.length > 0 && (\r\n        <Table\r\n          columns={columns}\r\n          data={viewType === 'general' ? telecomPacks : filterData(telecomPacks)}\r\n        />\r\n      )}\r\n      <div className=\"telecompack-view-footer\">\r\n        <button\r\n          className=\"telecompack-view-export-button\"\r\n          onClick={() => exportToExcel(viewType === 'general' ? telecomPacks : filterData(telecomPacks))}\r\n        >\r\n          Export to Excel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelecomPackView;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLine.js",["115","116"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport './TelephoneLine.css';\r\n\r\nconst setDefaultValues = (data, defaultValue = '------') => {\r\n  return Object.fromEntries(\r\n    Object.entries(data).map(([key, value]) => {\r\n      if (value === '' || value === null) {\r\n        return [key, defaultValue];\r\n      }\r\n      return [key, value];\r\n    })\r\n  );\r\n};\r\n\r\nconst getCustomHeaderName = (header) => {\r\n  const customNames = {\r\n    numero_de_gsm: 'Numero de GSM',\r\n    full_name: 'Nom et Prénom',\r\n    code_entite: 'Code Entité',\r\n    direction: 'Direction',\r\n    fonction: 'Fonction',\r\n    operateur: 'Opérateur',\r\n    categorie: 'Catégorie',\r\n    poste_GSM: 'Poste GSM',\r\n    // Add more mappings as needed\r\n  };\r\n  return customNames[header] || header.replace(/_/g, ' ');\r\n};\r\n\r\nconst TelephoneLine = () => {\r\n  const [telephoneLines, setTelephoneLines] = useState([]);\r\n  const [options, setOptions] = useState({\r\n    code_entite: [],\r\n    direction: [],\r\n    fonction: [],\r\n    operateur: [],\r\n    categorie: [],\r\n  });\r\n  const [newLine, setNewLine] = useState({\r\n    numero_de_gsm: '',\r\n    full_name: '',\r\n    code_entite: '',\r\n    direction: '',\r\n    fonction: '',\r\n    operateur: '',\r\n    categorie: '',\r\n    poste_GSM: '',\r\n  });\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState(null);\r\n  const history = useHistory();\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10); // Define the page size\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const fetchTelephoneLines = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/telephone-lines', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        const data = response.data.map(line => setDefaultValues(line));\r\n        setTelephoneLines(data);\r\n        setTotalPages(Math.ceil(data.length / pageSize));\r\n      } catch (error) {\r\n        console.error('Error fetching Telephone Lines:', error.message);\r\n        alert('Failed to fetch telephone lines: ' + error.message);\r\n      }\r\n    };\r\n\r\n    const fetchDropdownOptions = async () => {\r\n      try {\r\n        const fields = ['direction', 'fonction', 'operateur', 'categorie', 'poste_GSM'];\r\n        const fetchedOptions = {};\r\n        for (const field of fields) {\r\n          const response = await axios.get(`http://localhost:5000/api/telephone-lines/dropdown/${field}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n            },\r\n          });\r\n          const uniqueValues = Array.from(new Set(response.data.filter(value => value !== '').concat('------')));\r\n          fetchedOptions[field] = uniqueValues;\r\n        }\r\n        setOptions(fetchedOptions);\r\n      } catch (error) {\r\n        console.error('Error fetching dropdown options:', error.message);\r\n        alert('Failed to fetch dropdown options: ' + error.message);\r\n      }\r\n    };\r\n\r\n    fetchTelephoneLines();\r\n    fetchDropdownOptions();\r\n  }, [currentPage]);\r\n\r\n  const handleAddLine = async () => {\r\n    if (!newLine.numero_de_gsm) {\r\n      alert('The \"numero_de_gsm\" field must be filled.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const formattedLine = setDefaultValues(newLine);\r\n      const response = await axios.post('http://localhost:5000/api/telephone-lines', formattedLine, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const addedLine = response.data;\r\n      setTelephoneLines([...telephoneLines, addedLine]);\r\n      setNewLine({\r\n        numero_de_gsm: '',\r\n        full_name: '',\r\n        code_entite: '',\r\n        direction: '',\r\n        fonction: '',\r\n        operateur: '',\r\n        categorie: '',\r\n        poste_GSM: '',\r\n      });\r\n      setTotalPages(Math.ceil([...telephoneLines, addedLine].length / pageSize));\r\n    } catch (error) {\r\n      console.error('Error adding Telephone Line:', error.message);\r\n      alert('Failed to add telephone line: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLine = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/telephone-lines/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      setTelephoneLines((prevLines) => prevLines.filter(line => line.id !== id));\r\n      setTotalPages(Math.ceil((telephoneLines.length - 1) / pageSize));\r\n    } catch (error) {\r\n      console.error('Error deleting Telephone Line:', error.message);\r\n      alert('Failed to delete telephone line: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleModifyLine = (line) => {\r\n    setIsEditing(true);\r\n    setCurrentLine(line);\r\n  };\r\n\r\n  const handleUpdateLine = async () => {\r\n    try {\r\n      const formattedLine = setDefaultValues(currentLine);\r\n      const response = await axios.put(`http://localhost:5000/api/telephone-lines/${currentLine.id}`, formattedLine, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const updatedLine = response.data;\r\n      setTelephoneLines(telephoneLines.map(line => line.id === updatedLine.id ? updatedLine : line));\r\n      setIsEditing(false);\r\n      setCurrentLine(null);\r\n      setTotalPages(Math.ceil(telephoneLines.length / pageSize));\r\n    } catch (error) {\r\n      console.error('Error updating Telephone Line:', error.message);\r\n      alert('Failed to update telephone line: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (isEditing) {\r\n      setCurrentLine(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    } else {\r\n      setNewLine(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      Header: '#',\r\n      accessor: (row, i) => (currentPage - 1) * pageSize + i + 1,\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      width: 50, // Set a specific width if needed\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      accessor: 'actions',\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      width: 120, // Set a specific width for the Actions column\r\n      Cell: ({ row }) => (\r\n        <div className=\"actions-column\">\r\n          <button className=\"modify-button\" onClick={() => handleModifyLine(row.original)}>Modify</button>\r\n          <button className=\"delete-button\" onClick={() => handleDeleteLine(row.original.id)}>Delete</button>\r\n        </div>\r\n      ),\r\n    },\r\n    ...Object.keys(newLine).map((key) => ({\r\n      Header: getCustomHeaderName(key),\r\n      accessor: key,\r\n      Filter: SelectColumnFilter,\r\n    })),\r\n  ], [newLine, currentPage, pageSize]);  \r\n\r\n  const paginatedData = React.useMemo(() => {\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    return telephoneLines.slice(startIndex, endIndex);\r\n  }, [telephoneLines, currentPage, pageSize]);\r\n\r\n  return (\r\n    <div className=\"telephone-line-manager\">\r\n      <button className=\"telephone-line-modify-back-button\" onClick={() => history.goBack()}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1>Line Téléphonique Manager</h1>\r\n      <div className=\"add-line\">\r\n        <table className=\"form-table telephone-line-form-table\">\r\n          <tbody>\r\n            {Object.keys(newLine).map((key, index) => (\r\n              index % 3 === 0 && (\r\n                <tr key={index}>\r\n                  {Object.keys(newLine).slice(index, index + 3).map(innerKey => (\r\n                    <td key={innerKey}>\r\n                      <label className=\"telephone-line-form-label\">{getCustomHeaderName(innerKey)}</label>\r\n                      {['direction', 'fonction', 'operateur', 'categorie', 'poste_GSM'].includes(innerKey) ? (\r\n                        <CustomDropdown\r\n                          name={innerKey}\r\n                          value={isEditing ? currentLine[innerKey] : newLine[innerKey]}\r\n                          options={options[innerKey] || []}\r\n                          onChange={handleChange}\r\n                          placeholder={`Entrer/Selectionner ${innerKey.replace(/_/g, ' ')}`}\r\n                        />\r\n                      ) : (\r\n                        <input\r\n                          type={innerKey.startsWith('date') ? 'date' : 'text'}\r\n                          name={innerKey}\r\n                          value={isEditing ? currentLine[innerKey] : newLine[innerKey]}\r\n                          onChange={handleChange}\r\n                          className=\"input-field\"\r\n                          placeholder={innerKey === 'numero_de_gsm' ? 'eg: 212XXXXXXXXX' : `Entrer ${innerKey.replace(/_/g, ' ')}`}\r\n                        />\r\n                      )}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              )\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        {isEditing ? (\r\n          <button className=\"update-button\" onClick={handleUpdateLine}>Update Line</button>\r\n        ) : (\r\n          <button className=\"add-button\" onClick={handleAddLine}>Add Line</button>\r\n        )}\r\n      </div>\r\n      <div className=\"table-container\">\r\n        <Table columns={columns} data={paginatedData} />\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>\r\n          Précédent\r\n        </button>\r\n        <span>Page {currentPage} of {totalPages}</span>\r\n        <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>\r\n          Suivant\r\n        </button>\r\n      </div>\r\n      <div className=\"page-number-navigation\">\r\n        {Array.from({ length: totalPages }, (_, i) => (\r\n          <button\r\n            key={i + 1}\r\n            className={`page-number ${currentPage === i + 1 ? 'active' : ''}`}\r\n            onClick={() => setCurrentPage(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({ column: { filterValue, setFilter, preFilteredRows, id } }) => {\r\n  const options = React.useMemo(() => {\r\n    const optionsSet = new Set();\r\n    preFilteredRows.forEach(row => {\r\n      optionsSet.add(row.values[id]);\r\n    });\r\n    return [...optionsSet].map(option => ({ value: option, label: option }));\r\n  }, [id, preFilteredRows]);\r\n\r\n  const handleChange = (selectedOptions) => {\r\n    setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      value={options.filter(option => filterValue && filterValue.includes(option.value))}\r\n      onChange={handleChange}\r\n      options={options}\r\n      isMulti\r\n      placeholder=\"Filtrer par...\"\r\n      className=\"filter-select\"\r\n    />\r\n  );\r\n};\r\n\r\nconst Table = ({ columns, data }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      disableMultiSort: false\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  return (\r\n    <table {...getTableProps()} className=\"data-table telephone-line-view-data-table\">\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                <div>\r\n                  {column.render('Header')}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' 🔽'\r\n                        : ' 🔼'\r\n                      : ''}\r\n                  </span>\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, index) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()} className={index % 2 === 0 ? \"telephone-line-view-row-even\" : \"telephone-line-view-row-odd\"}>\r\n              {row.cells.map(cell => (\r\n                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n              ))}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nconst CustomDropdown = ({ name, value, options, onChange, placeholder }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleSelect = (option) => {\r\n    onChange({ target: { name, value: option } });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown-container\">\r\n      <input\r\n        type=\"text\"\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n      />\r\n      <div className=\"dropdown-arrow\" onClick={() => setIsOpen(!isOpen)}>\r\n        ▼\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"dropdown-menu\">\r\n          {options.map((option, index) => (\r\n            <div key={index} className=\"dropdown-option\" onClick={() => handleSelect(option)}>\r\n              {option}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelephoneLine;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\frontend\\src\\components\\Dashboard\\TelephoneLineView.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"125","line":1,"column":28,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"126","line":7,"column":11,"nodeType":"123","messageId":"124","endLine":7,"endColumn":15},{"ruleId":"121","severity":1,"message":"127","line":14,"column":9,"nodeType":"123","messageId":"124","endLine":14,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":85,"column":5,"nodeType":"130","messageId":"131","endLine":85,"endColumn":14},{"ruleId":"128","severity":1,"message":"132","line":128,"column":5,"nodeType":"130","messageId":"131","endLine":128,"endColumn":17},{"ruleId":"128","severity":1,"message":"129","line":77,"column":5,"nodeType":"130","messageId":"131","endLine":77,"endColumn":14},{"ruleId":"128","severity":1,"message":"132","line":120,"column":5,"nodeType":"130","messageId":"131","endLine":120,"endColumn":17},{"ruleId":"128","severity":1,"message":"133","line":142,"column":5,"nodeType":"130","messageId":"131","endLine":142,"endColumn":14},{"ruleId":"121","severity":1,"message":"134","line":261,"column":7,"nodeType":"123","messageId":"124","endLine":261,"endColumn":16},{"ruleId":"121","severity":1,"message":"135","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":18},{"ruleId":"121","severity":1,"message":"136","line":33,"column":10,"nodeType":"123","messageId":"124","endLine":33,"endColumn":22},{"ruleId":"121","severity":1,"message":"137","line":70,"column":18,"nodeType":"123","messageId":"124","endLine":70,"endColumn":27},{"ruleId":"138","severity":1,"message":"139","line":121,"column":6,"nodeType":"140","endLine":121,"endColumn":29,"suggestions":"141"},{"ruleId":"121","severity":1,"message":"142","line":255,"column":9,"nodeType":"123","messageId":"124","endLine":255,"endColumn":25},{"ruleId":"138","severity":1,"message":"143","line":359,"column":6,"nodeType":"140","endLine":359,"endColumn":69,"suggestions":"144"},{"ruleId":"121","severity":1,"message":"145","line":675,"column":7,"nodeType":"123","messageId":"124","endLine":675,"endColumn":25},{"ruleId":"138","severity":1,"message":"146","line":141,"column":6,"nodeType":"140","endLine":141,"endColumn":19,"suggestions":"147"},{"ruleId":"138","severity":1,"message":"148","line":353,"column":6,"nodeType":"140","endLine":353,"endColumn":29,"suggestions":"149"},{"ruleId":"121","severity":1,"message":"150","line":12,"column":20,"nodeType":"123","messageId":"124","endLine":12,"endColumn":31},{"ruleId":"138","severity":1,"message":"146","line":101,"column":6,"nodeType":"140","endLine":101,"endColumn":19,"suggestions":"151"},{"ruleId":"138","severity":1,"message":"152","line":215,"column":6,"nodeType":"140","endLine":215,"endColumn":38,"suggestions":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'user' is assigned a value but never used.","'handleNavigation' is assigned a value but never used.","no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","unexpected","Duplicate key 'marginBottom'.","Duplicate key 'marginTop'.","'setFilter' is assigned a value but never used.","'DatePicker' is defined but never used.","'itEquipments' is assigned a value but never used.","'setSortBy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchITEquipments'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'handleDateChange' is assigned a value but never used.","React Hook React.useMemo has an unnecessary dependency: 'selectedFilters'. Either exclude it or remove the dependency array.",["157"],"'SelectColumnFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pageSize'. Either include it or remove the dependency array.",["158"],"React Hook React.useMemo has a missing dependency: 'handleDeletePack'. Either include it or remove the dependency array.",["159"],"'setViewType' is assigned a value but never used.",["160"],"React Hook React.useMemo has a missing dependency: 'handleDeleteLine'. Either include it or remove the dependency array.",["161"],"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"166","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [currentPage, fetchITEquipments, pageSize]",{"range":"173","text":"174"},"Update the dependencies array to be: [newEquipment, currentPage, pageSize, options]",{"range":"175","text":"176"},"Update the dependencies array to be: [currentPage, pageSize]",{"range":"177","text":"178"},"Update the dependencies array to be: [currentPage, handleDeletePack, pageSize]",{"range":"179","text":"180"},{"range":"181","text":"178"},"Update the dependencies array to be: [newLine, currentPage, pageSize, handleDeleteLine]",{"range":"182","text":"183"},[3916,3939],"[currentPage, fetchITEquipments, pageSize]",[11537,11600],"[newEquipment, currentPage, pageSize, options]",[4338,4351],"[currentPage, pageSize]",[10452,10475],"[currentPage, handleDeletePack, pageSize]",[3311,3324],[7047,7079],"[newLine, currentPage, pageSize, handleDeleteLine]"]