{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khald\\\\OneDrive\\\\Desktop\\\\Project_gestion_initial\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\ExcelEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nimport './ExcelEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelEditor = () => {\n  _s();\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [fileName, setFileName] = useState('');\n  const [message, setMessage] = useState('');\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const binaryStr = event.target.result;\n      const workbook = XLSX.read(binaryStr, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, {\n        defval: '',\n        header: 1\n      });\n      const [headers, ...rows] = jsonData;\n      const formattedData = rows.map(row => {\n        const rowData = {};\n        row.forEach((cell, index) => {\n          rowData[headers[index]] = cell;\n        });\n        return rowData;\n      });\n      setColumns(headers);\n      setData(formattedData);\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleUpload = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/upload', data);\n      setMessage('File uploaded successfully');\n    } catch (error) {\n      setMessage('Failed to upload file');\n    }\n  };\n  const fetchSchema = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/schema');\n      setColumns(response.data);\n    } catch (error) {\n      setMessage('Failed to fetch schema');\n    }\n  };\n  useEffect(() => {\n    fetchSchema();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"excel-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Excel File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"file-label\",\n        children: [\"Select Excel file\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        className: \"upload-button\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schema-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"schema-title\",\n        children: \"Schema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"schema-list\",\n        children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"schema-item\",\n          children: col\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelEditor, \"HUsOGUZUA5kgYvjcaCm8Jk2SHZg=\");\n_c = ExcelEditor;\nexport default ExcelEditor;\nvar _c;\n$RefreshReg$(_c, \"ExcelEditor\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","axios","jsxDEV","_jsxDEV","ExcelEditor","_s","columns","setColumns","data","setData","fileName","setFileName","message","setMessage","handleFileUpload","e","file","target","files","name","reader","FileReader","onload","event","binaryStr","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","defval","header","headers","rows","formattedData","map","row","rowData","forEach","cell","index","readAsBinaryString","handleUpload","response","post","error","fetchSchema","get","className","children","_jsxFileName","lineNumber","columnNumber","onChange","onClick","length","col","_c","$RefreshReg$"],"sources":["C:/Users/khald/OneDrive/Desktop/Project_gestion_initial/frontend/src/components/Dashboard/ExcelEditor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport axios from 'axios';\r\nimport './ExcelEditor.css';\r\n\r\nconst ExcelEditor = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  \r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = async (event) => {\r\n      const binaryStr = event.target.result;\r\n      const workbook = XLSX.read(binaryStr, { type: 'binary' });\r\n\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: '', header: 1 });\r\n      const [headers, ...rows] = jsonData;\r\n\r\n      const formattedData = rows.map((row) => {\r\n        const rowData = {};\r\n        row.forEach((cell, index) => {\r\n          rowData[headers[index]] = cell;\r\n        });\r\n        return rowData;\r\n      });\r\n\r\n      setColumns(headers);\r\n      setData(formattedData);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/upload', data);\r\n      setMessage('File uploaded successfully');\r\n    } catch (error) {\r\n      setMessage('Failed to upload file');\r\n    }\r\n  };\r\n\r\n  const fetchSchema = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/schema');\r\n      setColumns(response.data);\r\n    } catch (error) {\r\n      setMessage('Failed to fetch schema');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSchema();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"excel-editor-container\">\r\n      <h1 className=\"title\">Excel File Upload</h1>\r\n      <div className=\"upload-section\">\r\n        <label className=\"file-label\">Select Excel file\r\n          <input type=\"file\" onChange={handleFileUpload} className=\"file-input\" />\r\n        </label>\r\n        <button onClick={handleUpload} className=\"upload-button\">Upload</button>\r\n      </div>\r\n      {message && <p className=\"message\">{message}</p>}\r\n      {columns.length > 0 && (\r\n        <div className=\"schema-section\">\r\n          <h2 className=\"schema-title\">Schema</h2>\r\n          <ul className=\"schema-list\">\r\n            {columns.map((col, index) => (\r\n              <li key={index} className=\"schema-item\">{col}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}