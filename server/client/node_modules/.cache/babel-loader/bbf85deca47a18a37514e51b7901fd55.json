{"ast":null,"code":"var _s = $RefreshSig$();\nconst useProvideAuth = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const decodedToken = JSON.parse(atob(data.token.split('.')[1]));\n        localStorage.setItem('token', data.token);\n        const loggedInUser = {\n          email,\n          role: decodedToken.user.role,\n          fullName: decodedToken.user.fullName\n        };\n        setUser(loggedInUser);\n        setLoading(false);\n        return loggedInUser;\n      } else {\n        const error = await response.json();\n        throw new Error(error.msg || 'Login failed');\n      }\n    } catch (error) {\n      setLoading(false);\n      throw new Error('Server error: ' + error.message);\n    }\n  };\n  const signup = async (fullName, email, password, role) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fullName,\n          email,\n          password,\n          role\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const decodedToken = JSON.parse(atob(data.token.split('.')[1]));\n        localStorage.setItem('token', data.token);\n        setUser({\n          email,\n          role: decodedToken.user.role,\n          fullName: decodedToken.user.fullName\n        });\n        setLoading(false);\n      } else {\n        const error = await response.json();\n        throw new Error(error.msg || 'Signup failed');\n      }\n    } catch (error) {\n      setLoading(false);\n      throw new Error('Server error: ' + error.message);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    history.push('/login'); // Ensure the user is redirected to login\n  };\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\n        const loggedInUser = {\n          email: decodedToken.user.email,\n          role: decodedToken.user.role,\n          fullName: decodedToken.user.fullName\n        };\n        setUser(loggedInUser);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  }, []);\n  return {\n    user,\n    setUser,\n    login,\n    signup,\n    logout,\n    loading\n  };\n};\n_s(useProvideAuth, \"JcX4n/EUOlpOifM4OLGtrIcRBnM=\", true);","map":{"version":3,"names":["useProvideAuth","_s","user","setUser","useState","loading","setLoading","history","useHistory","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","data","json","decodedToken","parse","atob","token","split","localStorage","setItem","loggedInUser","role","fullName","error","Error","msg","message","signup","logout","removeItem","push","useEffect","getItem","console"],"sources":["C:/Users/khald/OneDrive/Desktop/Project_gestion_initial/frontend/src/hooks/useAuth.js"],"sourcesContent":["const useProvideAuth = () => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const decodedToken = JSON.parse(atob(data.token.split('.')[1]));\n        localStorage.setItem('token', data.token);\n        const loggedInUser = { email, role: decodedToken.user.role, fullName: decodedToken.user.fullName };\n        setUser(loggedInUser);\n        setLoading(false);\n        return loggedInUser;\n      } else {\n        const error = await response.json();\n        throw new Error(error.msg || 'Login failed');\n      }\n    } catch (error) {\n      setLoading(false);\n      throw new Error('Server error: ' + error.message);\n    }\n  };\n\n  const signup = async (fullName, email, password, role) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fullName, email, password, role }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const decodedToken = JSON.parse(atob(data.token.split('.')[1]));\n        localStorage.setItem('token', data.token);\n        setUser({ email, role: decodedToken.user.role, fullName: decodedToken.user.fullName });\n        setLoading(false);\n      } else {\n        const error = await response.json();\n        throw new Error(error.msg || 'Signup failed');\n      }\n    } catch (error) {\n      setLoading(false);\n      throw new Error('Server error: ' + error.message);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    history.push('/login'); // Ensure the user is redirected to login\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\n        const loggedInUser = { email: decodedToken.user.email, role: decodedToken.user.role, fullName: decodedToken.user.fullName };\n        setUser(loggedInUser);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  return {\n    user,\n    setUser,\n    login,\n    signup,\n    logout,\n    loading,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}