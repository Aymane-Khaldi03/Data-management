{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khald\\\\OneDrive\\\\Desktop\\\\Project_gestion_initial\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\ExcelEditor.js\",\n  _s = $RefreshSig$();\n// src/components/Dashboard/ExcelEditor.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport DataGrid from 'react-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelEditor = () => {\n  _s();\n  const [sheets, setSheets] = useState([]);\n  const [fileName, setFileName] = useState('');\n  const [columns, setColumns] = useState([]);\n  const [rows, setRows] = useState([]);\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axios.post('/api/excel/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    const uploadedSheets = response.data.sheets;\n    setSheets(uploadedSheets);\n\n    // Set columns and rows for the first sheet\n    if (uploadedSheets.length > 0) {\n      const firstSheet = uploadedSheets[0];\n      setColumns(Object.keys(firstSheet.data[0]).map(key => ({\n        key,\n        name: key\n      })));\n      setRows(firstSheet.data);\n    }\n  };\n  const handleRowsChange = updatedRows => {\n    setRows(updatedRows);\n    const updatedSheets = [...sheets];\n    updatedSheets[0].data = updatedRows;\n    setSheets(updatedSheets);\n  };\n  const downloadExcel = async () => {\n    const response = await axios.post('/api/excel/generate', {\n      sheets\n    }, {\n      responseType: 'arraybuffer'\n    });\n    const blob = new Blob([response.data], {\n      type: response.headers['content-type']\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'modified_' + fileName;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: rows,\n      onRowsChange: handleRowsChange,\n      rowKeyGetter: row => row.id || row.key || JSON.stringify(row)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadExcel,\n      children: \"Download Modified Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelEditor, \"lb6nytgHJuLesEJdRsGHZ6EyupI=\");\n_c = ExcelEditor;\nexport default ExcelEditor;\nvar _c;\n$RefreshReg$(_c, \"ExcelEditor\");","map":{"version":3,"names":["React","useState","axios","XLSX","DataGrid","jsxDEV","_jsxDEV","ExcelEditor","_s","sheets","setSheets","fileName","setFileName","columns","setColumns","rows","setRows","handleFileUpload","e","file","target","files","name","formData","FormData","append","response","post","headers","uploadedSheets","data","length","firstSheet","Object","keys","map","key","handleRowsChange","updatedRows","updatedSheets","downloadExcel","responseType","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","remove","children","onChange","_jsxFileName","lineNumber","columnNumber","onRowsChange","rowKeyGetter","row","id","JSON","stringify","onClick","_c","$RefreshReg$"],"sources":["C:/Users/khald/OneDrive/Desktop/Project_gestion_initial/frontend/src/components/Dashboard/ExcelEditor.js"],"sourcesContent":["// src/components/Dashboard/ExcelEditor.js\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport DataGrid from 'react-data-grid';\r\n\r\nconst ExcelEditor = () => {\r\n  const [sheets, setSheets] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [columns, setColumns] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const response = await axios.post('/api/excel/upload', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n\r\n    const uploadedSheets = response.data.sheets;\r\n    setSheets(uploadedSheets);\r\n\r\n    // Set columns and rows for the first sheet\r\n    if (uploadedSheets.length > 0) {\r\n      const firstSheet = uploadedSheets[0];\r\n      setColumns(Object.keys(firstSheet.data[0]).map(key => ({ key, name: key })));\r\n      setRows(firstSheet.data);\r\n    }\r\n  };\r\n\r\n  const handleRowsChange = (updatedRows) => {\r\n    setRows(updatedRows);\r\n    const updatedSheets = [...sheets];\r\n    updatedSheets[0].data = updatedRows;\r\n    setSheets(updatedSheets);\r\n  };\r\n\r\n  const downloadExcel = async () => {\r\n    const response = await axios.post('/api/excel/generate', { sheets }, { responseType: 'arraybuffer' });\r\n    const blob = new Blob([response.data], { type: response.headers['content-type'] });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'modified_' + fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    a.remove();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileUpload} />\r\n      {columns.length > 0 && (\r\n        <DataGrid\r\n          columns={columns}\r\n          rows={rows}\r\n          onRowsChange={handleRowsChange}\r\n          rowKeyGetter={row => row.id || row.key || JSON.stringify(row)}\r\n        />\r\n      )}\r\n      <button onClick={downloadExcel}>Download Modified Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}