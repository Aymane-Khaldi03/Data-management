{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khald\\\\OneDrive\\\\Desktop\\\\Project_gestion_initial\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\ExcelEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nimport './ExcelEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelEditor = () => {\n  _s();\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [fileName, setFileName] = useState('');\n  const [message, setMessage] = useState('');\n  const [selectedTable, setSelectedTable] = useState('');\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = event => {\n      const binaryStr = event.target.result;\n      const workbook = XLSX.read(binaryStr, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n      setData(jsonData);\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      const response = await fetch(`http://localhost:5000/api/upload/${table}`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload data');\n      }\n      const data = await response.json();\n      setMessage(data.message);\n    } catch (error) {\n      console.error(error);\n      setMessage('Failed to upload data');\n    }\n  };\n  const fetchSchema = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/schema/${table}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch schema');\n      }\n      const data = await response.json();\n      setSchema(data);\n    } catch (error) {\n      console.error(error);\n      setMessage('Failed to fetch schema');\n    }\n  };\n  useEffect(() => {\n    if (selectedTable) {\n      fetchSchema(selectedTable);\n    }\n  }, [selectedTable]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"excel-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Excel File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Table:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTable,\n        onChange: e => setSelectedTable(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Table --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"it_equipments\",\n          children: \"IT Equipments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"telecom_pack\",\n          children: \"Telecom Packs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"telephone_lines\",\n          children: \"Telephone Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"file-label\",\n        children: [\"Select Excel file\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        className: \"upload-button\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schema-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"schema-title\",\n        children: \"Schema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"schema-list\",\n        children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"schema-item\",\n          children: col\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelEditor, \"Ru0ZVoMrchOR2eoL2UJrHvLsgTQ=\");\n_c = ExcelEditor;\nexport default ExcelEditor;\nvar _c;\n$RefreshReg$(_c, \"ExcelEditor\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","axios","jsxDEV","_jsxDEV","ExcelEditor","_s","columns","setColumns","data","setData","fileName","setFileName","message","setMessage","selectedTable","setSelectedTable","handleFileUpload","e","file","target","files","name","reader","FileReader","onload","event","binaryStr","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","readAsBinaryString","handleUpload","formData","FormData","append","selectedFile","response","fetch","table","method","body","ok","Error","json","error","console","fetchSchema","setSchema","className","children","_jsxFileName","lineNumber","columnNumber","value","onChange","onClick","length","map","col","index","_c","$RefreshReg$"],"sources":["C:/Users/khald/OneDrive/Desktop/Project_gestion_initial/frontend/src/components/Dashboard/ExcelEditor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport axios from 'axios';\r\nimport './ExcelEditor.css';\r\n\r\nconst ExcelEditor = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [selectedTable, setSelectedTable] = useState('');\r\n\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const binaryStr = event.target.result;\r\n      const workbook = XLSX.read(binaryStr, { type: 'binary' });\r\n\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\r\n\r\n      setData(jsonData);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append('file', selectedFile);\r\n  \r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/upload/${table}`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to upload data');\r\n      }\r\n      const data = await response.json();\r\n      setMessage(data.message);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setMessage('Failed to upload data');\r\n    }\r\n  };\r\n\r\n  const fetchSchema = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/schema/${table}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch schema');\r\n      }\r\n      const data = await response.json();\r\n      setSchema(data);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setMessage('Failed to fetch schema');\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    if (selectedTable) {\r\n      fetchSchema(selectedTable);\r\n    }\r\n  }, [selectedTable]);\r\n\r\n  return (\r\n    <div className=\"excel-editor-container\">\r\n      <h1 className=\"title\">Excel File Upload</h1>\r\n      <div className=\"table-select\">\r\n        <label>Select Table:</label>\r\n        <select value={selectedTable} onChange={(e) => setSelectedTable(e.target.value)}>\r\n          <option value=\"\">-- Select Table --</option>\r\n          <option value=\"it_equipments\">IT Equipments</option>\r\n          <option value=\"telecom_pack\">Telecom Packs</option>\r\n          <option value=\"telephone_lines\">Telephone Lines</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"upload-section\">\r\n        <label className=\"file-label\">Select Excel file\r\n          <input type=\"file\" onChange={handleFileUpload} className=\"file-input\" />\r\n        </label>\r\n        <button onClick={handleUpload} className=\"upload-button\">Upload</button>\r\n      </div>\r\n      {message && <p className=\"message\">{message}</p>}\r\n      {columns.length > 0 && (\r\n        <div className=\"schema-section\">\r\n          <h2 className=\"schema-title\">Schema</h2>\r\n          <ul className=\"schema-list\">\r\n            {columns.map((col, index) => (\r\n              <li key={index} className=\"schema-item\">{col}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC5B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMkB,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BT,WAAW,CAACO,IAAI,CAACG,IAAI,CAAC;IACtB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,SAAS,GAAGD,KAAK,CAACN,MAAM,CAACQ,MAAM;MACrC,MAAMC,QAAQ,GAAG5B,IAAI,CAAC6B,IAAI,CAACH,SAAS,EAAE;QAAEI,IAAI,EAAE;MAAS,CAAC,CAAC;MAEzD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;MACxC,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;MACxC,MAAMI,QAAQ,GAAGnC,IAAI,CAACoC,KAAK,CAACC,aAAa,CAACJ,KAAK,CAAC;MAEhDxB,OAAO,CAAC0B,QAAQ,CAAC;IACnB,CAAC;IACDb,MAAM,CAACgB,kBAAkB,CAACpB,IAAI,CAAC;EACjC,CAAC;EAED,MAAMqB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEC,YAAY,CAAC;IAErC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoCC,KAAK,EAAE,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAER;MACR,CAAC,CAAC;MACF,IAAI,CAACI,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,MAAM1C,IAAI,GAAG,MAAMoC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCtC,UAAU,CAACL,IAAI,CAACI,OAAO,CAAC;IAC1B,CAAC,CAAC,OAAOwC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBvC,UAAU,CAAC,uBAAuB,CAAC;IACrC;EACF,CAAC;EAED,MAAMyC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoCC,KAAK,EAAE,CAAC;MACzE,IAAI,CAACF,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MACA,MAAM1C,IAAI,GAAG,MAAMoC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCI,SAAS,CAAC/C,IAAI,CAAC;IACjB,CAAC,CAAC,OAAO4C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBvC,UAAU,CAAC,wBAAwB,CAAC;IACtC;EACF,CAAC;EAGDd,SAAS,CAAC,MAAM;IACd,IAAIe,aAAa,EAAE;MACjBwC,WAAW,CAACxC,aAAa,CAAC;IAC5B;EACF,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,oBACEX,OAAA;IAAKqD,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCtD,OAAA;MAAIqD,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAiB;MAAA/C,QAAA,EAAAgD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5CzD,OAAA;MAAKqD,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BtD,OAAA;QAAAsD,QAAA,EAAO;MAAa;QAAA/C,QAAA,EAAAgD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5BzD,OAAA;QAAQ0D,KAAK,EAAE/C,aAAc;QAACgD,QAAQ,EAAG7C,CAAC,IAAKF,gBAAgB,CAACE,CAAC,CAACE,MAAM,CAAC0C,KAAK,CAAE;QAAAJ,QAAA,gBAC9EtD,OAAA;UAAQ0D,KAAK,EAAC,EAAE;UAAAJ,QAAA,EAAC;QAAkB;UAAA/C,QAAA,EAAAgD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5CzD,OAAA;UAAQ0D,KAAK,EAAC,eAAe;UAAAJ,QAAA,EAAC;QAAa;UAAA/C,QAAA,EAAAgD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpDzD,OAAA;UAAQ0D,KAAK,EAAC,cAAc;UAAAJ,QAAA,EAAC;QAAa;UAAA/C,QAAA,EAAAgD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnDzD,OAAA;UAAQ0D,KAAK,EAAC,iBAAiB;UAAAJ,QAAA,EAAC;QAAe;UAAA/C,QAAA,EAAAgD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAlD,QAAA,EAAAgD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAlD,QAAA,EAAAgD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNzD,OAAA;MAAKqD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BtD,OAAA;QAAOqD,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAC,mBAC5B,eAAAtD,OAAA;UAAO2B,IAAI,EAAC,MAAM;UAACgC,QAAQ,EAAE9C,gBAAiB;UAACwC,SAAS,EAAC;QAAY;UAAA9C,QAAA,EAAAgD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAlD,QAAA,EAAAgD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC,eACRzD,OAAA;QAAQ4D,OAAO,EAAExB,YAAa;QAACiB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAM;QAAA/C,QAAA,EAAAgD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAlD,QAAA,EAAAgD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,EACLhD,OAAO,iBAAIT,OAAA;MAAGqD,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAE7C;IAAO;MAAAF,QAAA,EAAAgD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC/CtD,OAAO,CAAC0D,MAAM,GAAG,CAAC,iBACjB7D,OAAA;MAAKqD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BtD,OAAA;QAAIqD,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAM;QAAA/C,QAAA,EAAAgD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxCzD,OAAA;QAAIqD,SAAS,EAAC,aAAa;QAAAC,QAAA,EACxBnD,OAAO,CAAC2D,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACtBhE,OAAA;UAAgBqD,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAES;QAAG,GAAnCC,KAAK;UAAAzD,QAAA,EAAAgD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmC,CAClD;MAAC;QAAAlD,QAAA,EAAAgD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAlD,QAAA,EAAAgD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAlD,QAAA,EAAAgD,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvD,EAAA,CAhGID,WAAW;AAAAgE,EAAA,GAAXhE,WAAW;AAkGjB,eAAeA,WAAW;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}