{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khald\\\\OneDrive\\\\Desktop\\\\Project_gestion_initial\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\ExcelEditor.js\",\n  _s4 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as XLSX from 'xlsx';\nimport { useTable, useSortBy, useFilters } from 'react-table';\nimport Select from 'react-select';\nimport 'react-virtualized/styles.css'; // Only import the styles you need\nimport './ExcelEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst indexToColumnName = index => {\n  let columnName = '';\n  let dividend = index + 1;\n  while (dividend > 0) {\n    let modulo = (dividend - 1) % 26;\n    columnName = String.fromCharCode(65 + modulo) + columnName;\n    dividend = Math.floor((dividend - modulo) / 26);\n  }\n  return columnName;\n};\nconst ExcelEditor = () => {\n  _s4();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [fileName, setFileName] = useState('');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n  const [sheets, setSheets] = useState([]);\n  const [selectedSheet, setSelectedSheet] = useState(null);\n  const [workbook, setWorkbook] = useState(null);\n  const [showRows, setShowRows] = useState(true); // State to control row visibility\n  const [selectedColumnRows, setSelectedColumnRows] = useState({}); // Track selected rows for each column\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = event => {\n      const binaryStr = event.target.result;\n      const newWorkbook = XLSX.read(binaryStr, {\n        type: 'binary'\n      });\n      const sheetNames = newWorkbook.SheetNames.map((sheetName, index) => ({\n        value: index,\n        label: sheetName\n      }));\n      setSheets(sheetNames);\n      setWorkbook(newWorkbook); // Set the workbook state\n      setSelectedSheet(sheetNames[0].value);\n      handleSheetChange(newWorkbook, sheetNames[0].value);\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleSheetChange = (workbook, sheetIndex) => {\n    const sheetName = workbook.SheetNames[sheetIndex];\n    const sheet = workbook.Sheets[sheetName];\n    const jsonData = XLSX.utils.sheet_to_json(sheet, {\n      defval: '',\n      header: 1\n    });\n    const [headers, ...rows] = jsonData;\n    const cols = headers.map((header, index) => ({\n      Header: header || `Column ${indexToColumnName(index)}`,\n      // Handle empty headers\n      accessor: `col${index}`,\n      Filter: SelectColumnFilter,\n      Cell: EditableCell,\n      width: 150 // Default column width\n    }));\n    const formattedData = rows.map(row => {\n      const rowData = {};\n      row.forEach((cell, index) => {\n        rowData[`col${index}`] = cell;\n      });\n      return rowData;\n    });\n    setColumns(cols);\n    setData(formattedData);\n    setShowRows(rows.length <= 100); // Set showRows based on the number of rows\n  };\n  const handleSheetSelect = selectedOption => {\n    setSelectedSheet(selectedOption.value);\n    if (workbook) {\n      handleSheetChange(workbook, selectedOption.value);\n    }\n  };\n  const handleCellChange = (rowIndex, columnId, value) => {\n    const updatedData = data.map((row, index) => {\n      if (index === rowIndex) {\n        return {\n          ...row,\n          [columnId]: value\n        };\n      }\n      return row;\n    });\n    setData(updatedData);\n  };\n  const handleAddRow = (position, isZoomed = false) => {\n    const newRow = {};\n    columns.forEach(col => {\n      newRow[col.accessor] = '';\n    });\n    let updatedData = [...data];\n    if (selectedColumn !== null && isZoomed) {\n      // Column-specific row operations in zoomed view\n      const rowsToAdd = selectedColumnRows[selectedColumn] || [];\n      if (position === 'above') {\n        rowsToAdd.forEach(rowIndex => {\n          updatedData = [...updatedData.slice(0, rowIndex), newRow, ...updatedData.slice(rowIndex)];\n        });\n      } else if (position === 'below') {\n        rowsToAdd.reverse().forEach(rowIndex => {\n          updatedData = [...updatedData.slice(0, rowIndex + 1), newRow, ...updatedData.slice(rowIndex + 1)];\n        });\n      }\n      setSelectedColumnRows({\n        ...selectedColumnRows,\n        [selectedColumn]: []\n      });\n    } else {\n      // General row operations\n      if (position === 'above') {\n        selectedRows.forEach(rowIndex => {\n          updatedData = [...updatedData.slice(0, rowIndex), newRow, ...updatedData.slice(rowIndex)];\n        });\n      } else if (position === 'below') {\n        selectedRows.reverse().forEach(rowIndex => {\n          updatedData = [...updatedData.slice(0, rowIndex + 1), newRow, ...updatedData.slice(rowIndex + 1)];\n        });\n      }\n      setSelectedRows([]);\n    }\n    setData(updatedData);\n  };\n  const handleDeleteRow = (isZoomed = false) => {\n    let updatedData = [...data];\n    if (selectedColumn !== null && isZoomed) {\n      // Column-specific row operations in zoomed view\n      const rowsToDelete = selectedColumnRows[selectedColumn] || [];\n      updatedData = data.filter((_, index) => !rowsToDelete.includes(index));\n      setSelectedColumnRows({\n        ...selectedColumnRows,\n        [selectedColumn]: []\n      });\n    } else {\n      // General row operations\n      updatedData = data.filter((_, index) => !selectedRows.includes(index));\n      setSelectedRows([]);\n    }\n    setData(updatedData);\n  };\n  const handleSelectRow = rowIndex => {\n    if (selectedRows.includes(rowIndex)) {\n      setSelectedRows(selectedRows.filter(index => index !== rowIndex));\n    } else {\n      setSelectedRows([...selectedRows, rowIndex]);\n    }\n  };\n  const handleSelectColumnRow = (columnId, rowIndex) => {\n    setSelectedColumnRows(prevState => {\n      const newSelectedColumnRows = {\n        ...prevState\n      };\n      if (!newSelectedColumnRows[columnId]) {\n        newSelectedColumnRows[columnId] = [];\n      }\n      if (newSelectedColumnRows[columnId].includes(rowIndex)) {\n        newSelectedColumnRows[columnId] = newSelectedColumnRows[columnId].filter(index => index !== rowIndex);\n      } else {\n        newSelectedColumnRows[columnId].push(rowIndex);\n      }\n      return newSelectedColumnRows;\n    });\n  };\n  const handleSelectColumn = columnId => {\n    if (selectedColumn === columnId) {\n      setSelectedColumn(null);\n    } else {\n      setSelectedColumn(columnId);\n    }\n  };\n  const downloadExcel = () => {\n    const formattedData = data.map(row => {\n      const rowData = {};\n      columns.forEach(col => {\n        rowData[col.Header] = row[col.accessor];\n      });\n      return rowData;\n    });\n    const worksheet = XLSX.utils.json_to_sheet(formattedData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const blob = new Blob([excelBuffer], {\n      type: 'application/octet-stream'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'modified_' + fileName;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n  };\n  const SelectColumnFilter = ({\n    column: {\n      filterValue,\n      setFilter,\n      preFilteredRows,\n      id\n    }\n  }) => {\n    _s();\n    const options = React.useMemo(() => {\n      const optionsSet = new Set();\n      preFilteredRows.forEach(row => {\n        optionsSet.add(row.values[id]);\n      });\n      return [...optionsSet].map(option => ({\n        value: option,\n        label: option\n      }));\n    }, [id, preFilteredRows]);\n    const handleChange = selectedOptions => {\n      setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\n    };\n    return /*#__PURE__*/_jsxDEV(Select, {\n      value: options.filter(option => filterValue && filterValue.includes(option.value)),\n      onChange: handleChange,\n      options: options,\n      isMulti: true,\n      placeholder: `Filter by...`,\n      className: \"filter-select\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this);\n  };\n  _s(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n  const Table = ({\n    columns,\n    data,\n    showRows\n  }) => {\n    _s2();\n    const defaultColumn = {\n      Cell: EditableCell,\n      Filter: SelectColumnFilter,\n      width: 150\n    };\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n      setFilter\n    } = useTable({\n      columns,\n      data,\n      defaultColumn,\n      updateMyData: handleCellChange\n    }, useFilters, useSortBy);\n    const zoomedTableRef = useRef(null);\n    const buttonsRef = useRef(null);\n    useEffect(() => {\n      const handleScroll = () => {\n        const zoomedTable = zoomedTableRef.current;\n        const buttons = buttonsRef.current;\n        if (!zoomedTable || !buttons) return;\n        const zoomedTableTop = zoomedTable.getBoundingClientRect().top + window.scrollY;\n        const zoomedTableBottom = zoomedTable.getBoundingClientRect().bottom + window.scrollY;\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        if (scrollTop > zoomedTableTop && scrollTop < zoomedTableBottom - buttons.offsetHeight) {\n          buttons.style.position = 'fixed';\n          buttons.style.top = '20px';\n        } else {\n          buttons.style.position = 'absolute';\n          buttons.style.top = '20px';\n        }\n      };\n      window.addEventListener('scroll', handleScroll);\n\n      // Clean up event listener\n      return () => {\n        window.removeEventListener('scroll', handleScroll);\n      };\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAddRow('above'),\n          className: \"action-button\",\n          children: \"Add Row Above\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAddRow('below'),\n          className: \"action-button\",\n          children: \"Add Row Below\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeleteRow,\n          className: \"action-button delete\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        ...getTableProps(),\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...headerGroup.getHeaderGroupProps(),\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"select-row-container\",\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"select-row-container\",\n              children: \"Select Row\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this), \" \", headerGroup.headers.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              ...column.getHeaderProps(column.getSortByToggleProps()),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: column.width\n                },\n                children: [indexToColumnName(index), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: column.render('Header')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: column.canFilter ? column.render('Filter') : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"select-column-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: selectedColumn === column.id,\n                    onChange: () => handleSelectColumn(column.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"select-column-text\",\n                    children: \"Select Column\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          ...getTableBodyProps(),\n          children: showRows && rows.map((row, rowIndex) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              ...row.getRowProps(),\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"select-row-container\",\n                children: rowIndex + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"select-row-container\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectedRows.includes(rowIndex),\n                  onChange: () => handleSelectRow(rowIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 19\n              }, this), row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), selectedColumn !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"zoomed-column\",\n        ref: zoomedTableRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"zoomed-table-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"zoomed-table-actions\",\n            ref: buttonsRef,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAddRow('above', true),\n              className: \"action-button\",\n              children: \"Add Row Above\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAddRow('below', true),\n              className: \"action-button\",\n              children: \"Add Row Below\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteRow(true),\n              className: \"action-button delete\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"zoomed-table-title\",\n            children: columns.find(col => col.accessor === selectedColumn).Header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"zoomed-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Select Row\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: columns.find(col => col.accessor === selectedColumn).Header\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: rows.map((row, index) => {\n                var _selectedColumnRows$s;\n                prepareRow(row);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  ...row.getRowProps(),\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: index + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 388,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"select-row-container\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      checked: ((_selectedColumnRows$s = selectedColumnRows[selectedColumn]) === null || _selectedColumnRows$s === void 0 ? void 0 : _selectedColumnRows$s.includes(index)) || false,\n                      onChange: () => handleSelectColumnRow(selectedColumn, index)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 390,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 389,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(EditableCell, {\n                      value: row.values[selectedColumn],\n                      row: {\n                        index\n                      },\n                      column: {\n                        id: selectedColumn\n                      },\n                      updateMyData: handleCellChange,\n                      className: \"zoomed-input\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 397,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  };\n  _s2(Table, \"JBzi1u/0ICdmhhOnHgMAjaSDQqo=\", false, function () {\n    return [useTable];\n  });\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateMyData,\n    className\n  }) => {\n    _s3();\n    const [value, setValue] = React.useState(initialValue);\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n    const onBlur = () => {\n      updateMyData(index, id, value);\n    };\n    React.useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      className: className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 12\n    }, this);\n  };\n  _s3(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"excel-editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileUpload,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), sheets.length > 0 && /*#__PURE__*/_jsxDEV(Select, {\n      value: sheets.find(sheet => sheet.value === selectedSheet),\n      onChange: handleSheetSelect,\n      options: sheets,\n      className: \"sheet-select\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 9\n    }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data,\n      showRows: showRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadExcel,\n      className: \"download-button\",\n      children: \"Download Modified Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 5\n  }, this);\n};\n_s4(ExcelEditor, \"20pyQcccJfAgxDXf2own8DdTD9w=\");\n_c = ExcelEditor;\nexport default ExcelEditor;\nvar _c;\n$RefreshReg$(_c, \"ExcelEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","XLSX","useTable","useSortBy","useFilters","Select","jsxDEV","_jsxDEV","indexToColumnName","index","columnName","dividend","modulo","String","fromCharCode","Math","floor","ExcelEditor","_s4","_s","$RefreshSig$","_s2","_s3","columns","setColumns","data","setData","fileName","setFileName","selectedRows","setSelectedRows","selectedColumn","setSelectedColumn","sheets","setSheets","selectedSheet","setSelectedSheet","workbook","setWorkbook","showRows","setShowRows","selectedColumnRows","setSelectedColumnRows","handleFileUpload","e","file","target","files","name","reader","FileReader","onload","event","binaryStr","result","newWorkbook","read","type","sheetNames","SheetNames","map","sheetName","value","label","handleSheetChange","readAsBinaryString","sheetIndex","sheet","Sheets","jsonData","utils","sheet_to_json","defval","header","headers","rows","cols","Header","accessor","Filter","SelectColumnFilter","Cell","EditableCell","width","formattedData","row","rowData","forEach","cell","length","handleSheetSelect","selectedOption","handleCellChange","rowIndex","columnId","updatedData","handleAddRow","position","isZoomed","newRow","col","rowsToAdd","slice","reverse","handleDeleteRow","rowsToDelete","filter","_","includes","handleSelectRow","handleSelectColumnRow","prevState","newSelectedColumnRows","push","handleSelectColumn","downloadExcel","worksheet","json_to_sheet","book_new","book_append_sheet","excelBuffer","write","bookType","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","remove","column","filterValue","setFilter","preFilteredRows","id","options","useMemo","optionsSet","Set","add","values","option","handleChange","selectedOptions","undefined","onChange","isMulti","placeholder","className","_jsxFileName","lineNumber","columnNumber","Table","defaultColumn","getTableProps","getTableBodyProps","headerGroups","prepareRow","updateMyData","zoomedTableRef","buttonsRef","handleScroll","zoomedTable","current","buttons","zoomedTableTop","getBoundingClientRect","top","scrollY","zoomedTableBottom","bottom","scrollTop","pageYOffset","documentElement","offsetHeight","style","addEventListener","removeEventListener","children","onClick","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","checked","getRowProps","cells","getCellProps","ref","find","_selectedColumnRows$s","initialValue","setValue","onBlur","_c","$RefreshReg$"],"sources":["C:/Users/khald/OneDrive/Desktop/Project_gestion_initial/frontend/src/components/Dashboard/ExcelEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport 'react-virtualized/styles.css'; // Only import the styles you need\r\nimport './ExcelEditor.css';\r\n\r\nconst indexToColumnName = (index) => {\r\n  let columnName = '';\r\n  let dividend = index + 1;\r\n\r\n  while (dividend > 0) {\r\n    let modulo = (dividend - 1) % 26;\r\n    columnName = String.fromCharCode(65 + modulo) + columnName;\r\n    dividend = Math.floor((dividend - modulo) / 26);\r\n  }\r\n\r\n  return columnName;\r\n};\r\n\r\nconst ExcelEditor = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedColumn, setSelectedColumn] = useState(null);\r\n  const [sheets, setSheets] = useState([]);\r\n  const [selectedSheet, setSelectedSheet] = useState(null);\r\n  const [workbook, setWorkbook] = useState(null);\r\n  const [showRows, setShowRows] = useState(true); // State to control row visibility\r\n  const [selectedColumnRows, setSelectedColumnRows] = useState({}); // Track selected rows for each column\r\n\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const binaryStr = event.target.result;\r\n      const newWorkbook = XLSX.read(binaryStr, { type: 'binary' });\r\n\r\n      const sheetNames = newWorkbook.SheetNames.map((sheetName, index) => ({\r\n        value: index,\r\n        label: sheetName,\r\n      }));\r\n      setSheets(sheetNames);\r\n      setWorkbook(newWorkbook); // Set the workbook state\r\n      setSelectedSheet(sheetNames[0].value);\r\n\r\n      handleSheetChange(newWorkbook, sheetNames[0].value);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleSheetChange = (workbook, sheetIndex) => {\r\n    const sheetName = workbook.SheetNames[sheetIndex];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: '', header: 1 });\r\n    const [headers, ...rows] = jsonData;\r\n\r\n    const cols = headers.map((header, index) => ({\r\n      Header: header || `Column ${indexToColumnName(index)}`, // Handle empty headers\r\n      accessor: `col${index}`,\r\n      Filter: SelectColumnFilter,\r\n      Cell: EditableCell,\r\n      width: 150, // Default column width\r\n    }));\r\n\r\n    const formattedData = rows.map((row) => {\r\n      const rowData = {};\r\n      row.forEach((cell, index) => {\r\n        rowData[`col${index}`] = cell;\r\n      });\r\n      return rowData;\r\n    });\r\n\r\n    setColumns(cols);\r\n    setData(formattedData);\r\n    setShowRows(rows.length <= 100); // Set showRows based on the number of rows\r\n  };\r\n\r\n  const handleSheetSelect = (selectedOption) => {\r\n    setSelectedSheet(selectedOption.value);\r\n    if (workbook) {\r\n      handleSheetChange(workbook, selectedOption.value);\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (rowIndex, columnId, value) => {\r\n    const updatedData = data.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        return {\r\n          ...row,\r\n          [columnId]: value,\r\n        };\r\n      }\r\n      return row;\r\n    });\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleAddRow = (position, isZoomed = false) => {\r\n    const newRow = {};\r\n    columns.forEach(col => {\r\n      newRow[col.accessor] = '';\r\n    });\r\n    let updatedData = [...data];\r\n    if (selectedColumn !== null && isZoomed) {\r\n      // Column-specific row operations in zoomed view\r\n      const rowsToAdd = selectedColumnRows[selectedColumn] || [];\r\n      if (position === 'above') {\r\n        rowsToAdd.forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex),\r\n          ];\r\n        });\r\n      } else if (position === 'below') {\r\n        rowsToAdd.reverse().forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex + 1),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex + 1),\r\n          ];\r\n        });\r\n      }\r\n      setSelectedColumnRows({ ...selectedColumnRows, [selectedColumn]: [] });\r\n    } else {\r\n      // General row operations\r\n      if (position === 'above') {\r\n        selectedRows.forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex),\r\n          ];\r\n        });\r\n      } else if (position === 'below') {\r\n        selectedRows.reverse().forEach(rowIndex => {\r\n          updatedData = [\r\n            ...updatedData.slice(0, rowIndex + 1),\r\n            newRow,\r\n            ...updatedData.slice(rowIndex + 1),\r\n          ];\r\n        });\r\n      }\r\n      setSelectedRows([]);\r\n    }\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleDeleteRow = (isZoomed = false) => {\r\n    let updatedData = [...data];\r\n    if (selectedColumn !== null && isZoomed) {\r\n      // Column-specific row operations in zoomed view\r\n      const rowsToDelete = selectedColumnRows[selectedColumn] || [];\r\n      updatedData = data.filter((_, index) => !rowsToDelete.includes(index));\r\n      setSelectedColumnRows({ ...selectedColumnRows, [selectedColumn]: [] });\r\n    } else {\r\n      // General row operations\r\n      updatedData = data.filter((_, index) => !selectedRows.includes(index));\r\n      setSelectedRows([]);\r\n    }\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleSelectRow = (rowIndex) => {\r\n    if (selectedRows.includes(rowIndex)) {\r\n      setSelectedRows(selectedRows.filter(index => index !== rowIndex));\r\n    } else {\r\n      setSelectedRows([...selectedRows, rowIndex]);\r\n    }\r\n  };\r\n\r\n  const handleSelectColumnRow = (columnId, rowIndex) => {\r\n    setSelectedColumnRows(prevState => {\r\n      const newSelectedColumnRows = { ...prevState };\r\n      if (!newSelectedColumnRows[columnId]) {\r\n        newSelectedColumnRows[columnId] = [];\r\n      }\r\n      if (newSelectedColumnRows[columnId].includes(rowIndex)) {\r\n        newSelectedColumnRows[columnId] = newSelectedColumnRows[columnId].filter(index => index !== rowIndex);\r\n      } else {\r\n        newSelectedColumnRows[columnId].push(rowIndex);\r\n      }\r\n      return newSelectedColumnRows;\r\n    });\r\n  };\r\n\r\n  const handleSelectColumn = (columnId) => {\r\n    if (selectedColumn === columnId) {\r\n      setSelectedColumn(null);\r\n    } else {\r\n      setSelectedColumn(columnId);\r\n    }\r\n  };\r\n\r\n  const downloadExcel = () => {\r\n    const formattedData = data.map(row => {\r\n      const rowData = {};\r\n      columns.forEach(col => {\r\n        rowData[col.Header] = row[col.accessor];\r\n      });\r\n      return rowData;\r\n    });\r\n    const worksheet = XLSX.utils.json_to_sheet(formattedData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'modified_' + fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    a.remove();\r\n\r\n  };\r\n\r\n  const SelectColumnFilter = ({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n  }) => {\r\n    const options = React.useMemo(() => {\r\n      const optionsSet = new Set();\r\n      preFilteredRows.forEach(row => {\r\n        optionsSet.add(row.values[id]);\r\n      });\r\n      return [...optionsSet].map(option => ({ value: option, label: option }));\r\n    }, [id, preFilteredRows]);\r\n    const handleChange = (selectedOptions) => {\r\n      setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n    };\r\n\r\n    return (\r\n      <Select\r\n        value={options.filter(option => filterValue && filterValue.includes(option.value))}\r\n        onChange={handleChange}\r\n        options={options}\r\n        isMulti\r\n        placeholder={`Filter by...`}\r\n        className=\"filter-select\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const Table = ({ columns, data, showRows }) => {\r\n    const defaultColumn = {\r\n      Cell: EditableCell,\r\n      Filter: SelectColumnFilter,\r\n      width: 150,\r\n    };\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n      setFilter,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        updateMyData: handleCellChange,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    const zoomedTableRef = useRef(null);\r\n    const buttonsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n      const handleScroll = () => {\r\n        const zoomedTable = zoomedTableRef.current;\r\n        const buttons = buttonsRef.current;\r\n\r\n        if (!zoomedTable || !buttons) return;\r\n\r\n        const zoomedTableTop = zoomedTable.getBoundingClientRect().top + window.scrollY;\r\n        const zoomedTableBottom = zoomedTable.getBoundingClientRect().bottom + window.scrollY;\r\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n        if (scrollTop > zoomedTableTop && scrollTop < zoomedTableBottom - buttons.offsetHeight) {\r\n          buttons.style.position = 'fixed';\r\n          buttons.style.top = '20px';\r\n        } else {\r\n          buttons.style.position = 'absolute';\r\n          buttons.style.top = '20px';\r\n        }\r\n      };\r\n\r\n      window.addEventListener('scroll', handleScroll);\r\n\r\n      // Clean up event listener\r\n      return () => {\r\n        window.removeEventListener('scroll', handleScroll);\r\n      };\r\n    }, []);\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <div className=\"table-actions\">\r\n          <button onClick={() => handleAddRow('above')} className=\"action-button\">Add Row Above</button>\r\n          <button onClick={() => handleAddRow('below')} className=\"action-button\">Add Row Below</button>\r\n          <button onClick={handleDeleteRow} className=\"action-button delete\">Delete</button>\r\n        </div>\r\n        <table {...getTableProps()} className=\"data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                <th className=\"select-row-container\">#</th> {/* Extra header for row numbers */}\r\n                <th className=\"select-row-container\">Select Row</th> {/* Extra header for checkboxes */}\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {indexToColumnName(index)} {/* Use the helper function here */}\r\n                      <div>{column.render('Header')}</div>\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                      <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                      <div className=\"select-column-container\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedColumn === column.id}\r\n                          onChange={() => handleSelectColumn(column.id)}\r\n                        />\r\n                        <span className=\"select-column-text\">Select Column</span>\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n\r\n          <tbody {...getTableBodyProps()}>\r\n            {showRows && rows.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  <td className=\"select-row-container\">{rowIndex + 1}</td> {/* Cell for row number */}\r\n                  <td className=\"select-row-container\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedRows.includes(rowIndex)}\r\n                      onChange={() => handleSelectRow(rowIndex)}\r\n                    />\r\n                  </td>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        {selectedColumn !== null && (\r\n          <div className=\"zoomed-column\" ref={zoomedTableRef}>\r\n            <div className=\"zoomed-table-container\">\r\n              <div className=\"zoomed-table-actions\" ref={buttonsRef}>\r\n                <button onClick={() => handleAddRow('above', true)} className=\"action-button\">Add Row Above</button>\r\n                <button onClick={() => handleAddRow('below', true)} className=\"action-button\">Add Row Below</button>\r\n                <button onClick={() => handleDeleteRow(true)} className=\"action-button delete\">Delete</button>\r\n              </div>\r\n              <h3 className=\"zoomed-table-title\">{columns.find(col => col.accessor === selectedColumn).Header}</h3>\r\n              <table className=\"zoomed-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>Select Row</th>\r\n                    <th>{columns.find(col => col.accessor === selectedColumn).Header}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {rows.map((row, index) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <tr {...row.getRowProps()}>\r\n                        <td>{index + 1}</td>\r\n                        <td className=\"select-row-container\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedColumnRows[selectedColumn]?.includes(index) || false}\r\n                            onChange={() => handleSelectColumnRow(selectedColumn, index)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <EditableCell\r\n                            value={row.values[selectedColumn]}\r\n                            row={{ index }}\r\n                            column={{ id: selectedColumn }}\r\n                            updateMyData={handleCellChange}\r\n                            className=\"zoomed-input\"\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const EditableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData,\r\n    className,\r\n  }) => {\r\n    const [value, setValue] = React.useState(initialValue);\r\n    const onChange = e => {\r\n      setValue(e.target.value);\r\n    };\r\n\r\n    const onBlur = () => {\r\n      updateMyData(index, id, value);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return <input value={value} onChange={onChange} onBlur={onBlur} className={className} />;\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"excel-editor\">\r\n      <div className=\"file-upload-container\">\r\n        <input type=\"file\" onChange={handleFileUpload} className=\"file-input\" />\r\n      </div>\r\n      {sheets.length > 0 && (\r\n        <Select\r\n          value={sheets.find(sheet => sheet.value === selectedSheet)}\r\n          onChange={handleSheetSelect}\r\n          options={sheets}\r\n          className=\"sheet-select\"\r\n        />\r\n      )}\r\n      {columns.length > 0 && (\r\n        <Table columns={columns} data={data} showRows={showRows} />\r\n      )}\r\n      <button onClick={downloadExcel} className=\"download-button\">Download Modified Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}