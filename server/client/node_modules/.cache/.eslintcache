[{"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\index.js":"1","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\App.js":"2","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\pages\\Home.js":"3","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\pages\\AdminDashboard.js":"4","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\pages\\ConsultantDashboard.js":"5","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\hooks\\useAuth.js":"6","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Auth\\Login.js":"7","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Auth\\Signup.js":"8","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ITEquipmentLanding.js":"9","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ExcelEditor.js":"10","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ITEquipmentView.js":"11","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Shared\\Navbar.js":"12","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Shared\\Sidebar.js":"13","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ITEquipment.js":"14","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelephoneLine.js":"15","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelecomPackLanding.js":"16","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelecomPack.js":"17","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelephoneLineLanding.js":"18","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelecomPackView.js":"19","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelephoneLineView.js":"20"},{"size":259,"mtime":1717579923617,"results":"21","hashOfConfig":"22"},{"size":3552,"mtime":1722002207192,"results":"23","hashOfConfig":"22"},{"size":762,"mtime":1721293784366,"results":"24","hashOfConfig":"22"},{"size":15569,"mtime":1721892662661,"results":"25","hashOfConfig":"22"},{"size":1363,"mtime":1721292767838,"results":"26","hashOfConfig":"22"},{"size":3113,"mtime":1722007517204,"results":"27","hashOfConfig":"22"},{"size":6170,"mtime":1722002410683,"results":"28","hashOfConfig":"22"},{"size":4668,"mtime":1721985936442,"results":"29","hashOfConfig":"22"},{"size":1785,"mtime":1722237153809,"results":"30","hashOfConfig":"22"},{"size":5962,"mtime":1721398358148,"results":"31","hashOfConfig":"22"},{"size":10421,"mtime":1722353468876,"results":"32","hashOfConfig":"22"},{"size":1260,"mtime":1722357882445,"results":"33","hashOfConfig":"22"},{"size":2354,"mtime":1721982507192,"results":"34","hashOfConfig":"22"},{"size":27157,"mtime":1722333577058,"results":"35","hashOfConfig":"22"},{"size":16582,"mtime":1722346059245,"results":"36","hashOfConfig":"22"},{"size":1839,"mtime":1722337421370,"results":"37","hashOfConfig":"22"},{"size":28210,"mtime":1722334927357,"results":"38","hashOfConfig":"22"},{"size":1877,"mtime":1722236914473,"results":"39","hashOfConfig":"22"},{"size":9191,"mtime":1722337401249,"results":"40","hashOfConfig":"22"},{"size":9711,"mtime":1722301346388,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cx4bos",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\index.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\App.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\pages\\Home.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\pages\\AdminDashboard.js",["91"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport axios from 'axios';\r\n////\r\nimport Swal from 'sweetalert2';\r\n////\r\nimport './AdminDashboard.css';\r\n\r\nconst AdminDashboard = () => {\r\n  const { user, loading } = useAuth();\r\n  const history = useHistory();\r\n  const [userHistory, setUserHistory] = useState([]);\r\n  const [modificationHistory, setModificationHistory] = useState([]);\r\n  const [telecomModificationHistory, setTelecomModificationHistory] = useState([]);\r\n  const [telephoneLineModificationHistory, setTelephoneLineModificationHistory] = useState([]);\r\n\r\n  const handleNavigation = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const fetchUserHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/users/admin/user-history', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched User History:', data);\r\n        setUserHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch user history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user history:', error);\r\n    }\r\n  };\r\n\r\n  const fetchModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/it-equipments/admin/it-equipment-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const filteredData = data.filter(mod => mod.field !== 'createdAt' && mod.field !== 'updatedAt');\r\n        setModificationHistory(filteredData);\r\n      } else {\r\n        console.error('Failed to fetch modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching modification history:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTelecomModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telecom-packs/admin/telecom-pack-modifications', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Fetched Telecom Modifications:', data);\r\n        setTelecomModificationHistory(data);\r\n      } else {\r\n        console.error('Failed to fetch telecom modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching telecom modification history:', error);\r\n    }\r\n  };\r\n\r\n// Fetch Telephone Line modification history\r\nconst fetchTelephoneLineModificationHistory = async () => {\r\n  try {\r\n    console.log('Fetching Telephone Line modification history...'); // Debugging statement\r\n    const response = await fetch('http://localhost:5000/api/telephone-lines/admin/telephone-line-modifications', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('Fetched Telephone Line Modifications:', data); // Debugging statement\r\n      if (data.length === 0) {\r\n        console.log('No modification records found'); // Debugging statement\r\n      } else {\r\n        data.forEach(mod => {\r\n          console.log('Modification Record:', JSON.stringify(mod, null, 2)); // Debugging statement for each record\r\n        });\r\n      }\r\n      setTelephoneLineModificationHistory(data);\r\n    } else {\r\n      console.error('Failed to fetch telephone line modification history, status:', response.status); // Debugging statement\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching telephone line modification history:', error); // Debugging statement\r\n  }\r\n};\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        history.push('/login');\r\n      }\r\n    }\r\n  }, [loading, history]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchUserHistory();\r\n      fetchModificationHistory();\r\n      fetchTelecomModificationHistory();\r\n      fetchTelephoneLineModificationHistory();\r\n    }\r\n  }, [user]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!user) {\r\n    return null;\r\n  }\r\n  const handleResetModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/it-equipments/admin/it-equipment-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        setModificationHistory([]); // Clear the modification history in the state\r\n        console.log('Modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleResetTelecomModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telecom-packs/admin/telecom-pack-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        setTelecomModificationHistory([]);\r\n        console.log('Telecom Pack modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset Telecom Pack modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting Telecom Pack modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleResetTelephoneLineModificationHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/telephone-lines/admin/telephone-line-modifications', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        setTelephoneLineModificationHistory([]);\r\n        console.log('Telephone Line modification history reset successfully');\r\n      } else {\r\n        console.error('Failed to reset Telephone Line modification history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting Telephone Line modification history:', error);\r\n    }\r\n  };\r\n\r\n  const handleDropTable = async (table) => {\r\n    const result = await Swal.fire({\r\n      title: `Êtes-vous sûr de vouloir supprimer la table ${table}?`,\r\n      text: \"Cette action ne peut pas être annulée.\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Oui, supprimez-la !'\r\n    });\r\n\r\n    if (result.isConfirmed) {\r\n      try {\r\n        let requestUrl = '';\r\n        if (table === 'it-equipments') {\r\n          requestUrl = 'http://localhost:5000/api/it-equipments/admin/drop-it-equipments-table';\r\n        } else if (table === 'telecom-pack') {\r\n          requestUrl = 'http://localhost:5000/api/telecom-packs/admin/drop-telecom-packs-table';\r\n        } else if (table === 'telephone-lines') {\r\n          requestUrl = 'http://localhost:5000/api/telephone-lines/admin/drop-telephone-lines-table';\r\n        }\r\n\r\n        console.log(`Request URL: ${requestUrl}`);\r\n\r\n        const response = await axios.delete(requestUrl, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n\r\n        console.log(\"Response:\", response);\r\n\r\n        if (response.status === 204) {\r\n          Swal.fire(\r\n            'Supprimée !',\r\n            `La table ${table} a été supprimée.`,\r\n            'success'\r\n          );\r\n        } else {\r\n          console.error(`Échec de la suppression de la table ${table} : ${response.statusText}`);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Erreur lors de la suppression de la table ${table} :`, error.message);\r\n        Swal.fire(\r\n          'Error!',\r\n          `Erreur lors de la suppression de la table ${table} : ${error.message}`,\r\n          'error'\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <div className=\"admin-dashboard-content\">\r\n        <h1 className=\"admin-dashboard-title\">Admin Dashboard</h1>\r\n        <div className=\"admin-user-history-section\">\r\n          <h2>Historique de connexion utilisateur</h2>\r\n          {userHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Email</th>\r\n                    <th>Nom et Prénom</th>\r\n                    <th>Dernière connexion</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {userHistory.map((user, index) => (\r\n                    <tr key={index}>\r\n                      <td>{user.email}</td>\r\n                      <td>{user.fullName}</td>\r\n                      <td>{formatDate(user.lastLogin)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de connexion utilisateur disponible.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Historique des modifications de Matériel informatique</h2>\r\n          <button onClick={handleResetModificationHistory} className=\"reset-button\">Réinitialiser</button>\r\n          {user.role === 'admin' && (\r\n            <button onClick={() => handleDropTable('it-equipments')} className=\"drop-button\">\r\n              Supprimer la table\r\n            </button>\r\n          )}\r\n          {modificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Utilisateur</th>\r\n                    <th>Email</th>\r\n                    <th>Temps de Modification</th>\r\n                    <th>Champ</th>\r\n                    <th>Ancienne Valeur</th>\r\n                    <th>Nouvelle valeur</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {modificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue}</td>\r\n                      <td>{modification.newValue}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de modification de Matériel Informatique disponible.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Historique des modifications du Parc Télécom</h2>\r\n          <button onClick={handleResetTelecomModificationHistory} className=\"reset-button\">Réinitialiser</button>\r\n          {user.role === 'admin' && (\r\n            <button onClick={() => handleDropTable('telecom-pack')} className=\"drop-button\">\r\n              Supprimer la table\r\n            </button>\r\n          )}\r\n          {telecomModificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Utilisateur</th>\r\n                    <th>Email</th>\r\n                    <th>Temps de Modification</th>\r\n                    <th>Champ</th>\r\n                    <th>Ancienne Valeur</th>\r\n                    <th>Nouvelle valeur</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {telecomModificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue ? modification.oldValue : 'N/A'}</td>\r\n                      <td>{modification.newValue ? modification.newValue : 'N/A'}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de modification du Parc Télécom disponible.</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"admin-modification-history-section\">\r\n          <h2>Historique des modifications des Lignes Téléphoniques</h2>\r\n          <button onClick={handleResetTelephoneLineModificationHistory} className=\"reset-button\">Réinitialiser</button>\r\n          {user.role === 'admin' && (\r\n            <button onClick={() => handleDropTable('telephone-lines')} className=\"drop-button\">\r\n              Supprimer la table\r\n            </button>\r\n          )}\r\n          {telephoneLineModificationHistory.length > 0 ? (\r\n            <div className=\"admin-table-container\">\r\n              <table className=\"admin-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Utilisateur</th>\r\n                    <th>Email</th>\r\n                    <th>Temps de Modification</th>\r\n                    <th>Champ</th>\r\n                    <th>Ancienne Valeur</th>\r\n                    <th>Nouvelle valeur</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {telephoneLineModificationHistory.map((modification, index) => (\r\n                    <tr key={index}>\r\n                      <td>{modification.User.fullName}</td>\r\n                      <td>{modification.User.email}</td>\r\n                      <td>{formatDate(modification.modifiedAt)}</td>\r\n                      <td>{modification.field}</td>\r\n                      <td>{modification.oldValue ? modification.oldValue : 'N/A'}</td>\r\n                      <td>{modification.newValue ? modification.newValue : 'N/A'}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <p>Aucun historique de modification de Ligne Téléphonique disponible.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\pages\\ConsultantDashboard.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\hooks\\useAuth.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Auth\\Login.js",["92"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport loginpageimage from '../../assets/loginpageimage.jpg';\nimport { FaEye, FaEyeSlash, FaSpinner } from 'react-icons/fa';\nimport styled, { keyframes } from 'styled-components';\n\nconst Login = () => {\n  const { login } = useAuth();\n  const history = useHistory();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('rememberMeEmail');\n    const savedPassword = localStorage.getItem('rememberMePassword');\n    if (savedEmail) {\n      setEmail(savedEmail);\n      setRememberMe(true);\n    }\n    /* not saving the password\n    if (savedPassword) {\n      setPassword(savedPassword);\n    }\n      */\n\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      const user = await login(email, password);\n      setMessage('Login successful! Redirecting to dashboard...');\n      if (rememberMe) {\n        localStorage.setItem('rememberMeEmail', email);\n        //localStorage.setItem('rememberMePassword', password); // Optional: save password\n      } else {\n        localStorage.removeItem('rememberMeEmail');\n        //localStorage.removeItem('rememberMePassword');\n      }\n\n      // Redirect based on role\n      setTimeout(() => {\n        setIsLoading(false);\n        switch (user.role) {\n          case 'admin':\n            history.push('/dashboard');\n            break;\n          case 'consultant':\n            history.push('/dashboard');\n            break;\n          default:\n            history.push('/edit-excel');\n            break;\n        }\n      }, 2000);\n    } catch (error) {\n      setIsLoading(false);\n      setMessage('Login failed: ' + error.message);\n    }\n  };\n\n  return (\n    <Container>\n      <Background />\n      <Title>Login</Title>\n      {message && <Message>{message} {isLoading && <Spinner />}</Message>}\n      <Form onSubmit={handleSubmit}>\n        <FormGroup>\n          <Label>Email</Label>\n          <Input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n        </FormGroup>\n        <FormGroup>\n          <Label>Password</Label>\n          <PasswordInput>\n            <Input\n              type={showPassword ? 'text' : 'password'}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n            <EyeIcon onClick={() => setShowPassword(!showPassword)}>\n              {showPassword ? <FaEyeSlash /> : <FaEye />}\n            </EyeIcon>\n          </PasswordInput>\n        </FormGroup>\n        <AdditionalOptions>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={rememberMe}\n              onChange={(e) => setRememberMe(e.target.checked)}\n            /> Remember me\n          </label>\n          <StyledLink to=\"/forgot-password\" onClick={() => console.log('Forgot Password link clicked')}>Forgot password?</StyledLink>\n        </AdditionalOptions>\n        <Button\n          type=\"submit\"\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n          isHovering={isHovering}\n        >\n          Login\n        </Button>\n        <Footer>\n          Not a member? <StyledLink to=\"/signup\">Signup Now</StyledLink>\n        </Footer>\n      </Form>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  text-align: center;\n  overflow: hidden;\n  margin: -10px;\n  flex: 1;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: url(${loginpageimage}) no-repeat center center fixed;\n  background-size: cover;\n  filter: blur(4px);\n  z-index: -1;\n`;\n\nconst Title = styled.h2`\n  color: #333;\n  margin-bottom: 20px;\n  font-weight: bold;\n  font-size: 50px;\n`;\n\nconst Form = styled.form`\n  background: rgba(255, 255, 255, 0.9);\n  padding: 70px 50px;\n  border-radius: 10px;\n  box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);\n  text-align: left;\n  width: 100%;\n  max-width: 450px;\n  z-index: 1;\n  position: relative;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 30px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n  color: #555;\n  font-size: 14px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  font-size: 16px;\n  box-sizing: border-box;\n`;\n\nconst PasswordInput = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nconst EyeIcon = styled.div`\n  position: absolute;\n  right: 10px;\n  cursor: pointer;\n  margin-top: 13px;\n  font-size: 16px;\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: ${props => (props.isHovering ? 'black' : '#ef6108')};\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n`;\n\nconst AdditionalOptions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 15px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: #ef6108;\n  text-decoration: none;\n  font-size: 14px;\n`;\n\nconst Footer = styled.footer`\n  margin-top: 20px;\n  font-size: 14px;\n  color: #777;\n  font-weight: bold;\n  position: absolute;\n  bottom: 20px;\n  width: 100%;\n  text-align: center;\n  align-items: center;\n`;\n\nconst Message = styled.p`\n  color: red;\n  font-style: italic;\n  font-weight: bold;\n`;\n\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst Spinner = styled(FaSpinner)`\n  margin-left: 10px;\n  animation: ${spin} 1s linear infinite;\n`;\n\nexport default Login;\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Auth\\Signup.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ITEquipmentLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ExcelEditor.js",["93"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FaFileExcel } from 'react-icons/fa';\r\nimport io from 'socket.io-client';\r\nimport './ExcelEditor.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ExcelEditor = () => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [table, setTable] = useState('');\r\n  const [schema, setSchema] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [matchingColumns, setMatchingColumns] = useState(0);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (table) {\r\n      const fetchSchema = async () => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:5000/api/schema/${table}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n            },\r\n          });\r\n          setSchema(response.data);\r\n        } catch (error) {\r\n          setMessage('Erreur lors de la récupération du schéma');\r\n          console.error('Error fetching schema:', error);\r\n        }\r\n      };\r\n      fetchSchema();\r\n    }\r\n  }, [table]);\r\n\r\n  useEffect(() => {\r\n    socket.on('uploadProgress', ({ uploadId, progress }) => {\r\n      setUploadProgress(progress);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('uploadProgress');\r\n    };\r\n  }, []);\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!selectedFile || !table) {\r\n        alert('Veuillez sélectionner un tableau et un fichier.');\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', selectedFile);\r\n\r\n      const response = await axios.post(`http://localhost:5000/api/upload/${table}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      console.log('File uploaded successfully:', response.data);\r\n      setMessage('Fichier téléchargé avec succès');\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      alert('Erreur lors du téléchargement du fichier: ' + error.message);\r\n      setMessage('Erreur lors du téléchargement du fichier: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const filterColumns = (data) => {\r\n    if (schema.length === 0) return data;\r\n    return data.map(record => {\r\n      return Object.fromEntries(\r\n        Object.entries(record).filter(([key]) => schema.includes(key))\r\n      );\r\n    });\r\n  };\r\n\r\n  const countMatchingColumns = (data) => {\r\n    if (schema.length === 0 || data.length === 0) return 0;\r\n    return schema.filter(column => Object.keys(data[0]).includes(column)).length;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedFile) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const workbook = XLSX.read(e.target.result, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\r\n        const filteredData = filterColumns(data);\r\n        setMatchingColumns(countMatchingColumns(filteredData));\r\n      };\r\n      reader.readAsBinaryString(selectedFile);\r\n    }\r\n  }, [selectedFile, schema]);\r\n\r\n  return (\r\n    <div className=\"excel-editor\">\r\n      <h2>Téléchargement de fichier Excel</h2>\r\n      <div className=\"form-group\">\r\n        <label>Sélectionnez le fichier Excel</label>\r\n        <div className=\"file-upload\">\r\n          <input type=\"file\" onChange={handleFileChange} />\r\n          <div className=\"file-upload-text\">\r\n            {selectedFile ? (\r\n              <>\r\n                <FaFileExcel className=\"file-icon\" />\r\n                {selectedFile.name}\r\n              </>\r\n            ) : (\r\n              <>Déposez vos fichiers ici ou <span className=\"browse-files\">Parcourir les fichiers</span></>\r\n            )}\r\n          </div>\r\n          <div className=\"file-type-text\">Types de fichiers acceptés : .xlsx</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Sélectionnez un tableau</label>\r\n        <select value={table} onChange={(e) => setTable(e.target.value)}>\r\n          <option value=\"\">Sélectionnez un tableau</option>\r\n          <option value=\"it_equipments\">Équipements informatiques</option>\r\n          <option value=\"telecom_pack\">Parc Télécom</option>\r\n          <option value=\"telephone_lines\">Lignes téléphoniques</option>\r\n        </select>\r\n      </div>\r\n      <button onClick={handleUpload}>Télécharger</button>\r\n      <div className=\"progress-container\">\r\n        <div className=\"progress\">\r\n          <div className=\"bar\" style={{ width: `${uploadProgress}%` }}>\r\n            <p className=\"counter\">{uploadProgress}%</p>\r\n          </div>\r\n        </div>\r\n        {uploadProgress === 100 && (\r\n          <div className=\"success-container\">\r\n            <p className=\"success\">Téléchargement terminé!</p>\r\n            <p className=\"success-message\">Fichier téléchargé avec succès</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {message && <p>{message}</p>}\r\n      {schema.length > 0 && (\r\n        <div className=\"schema-container\">\r\n          <h3>Schéma du tableau</h3>\r\n          <p>Nombre de colonnes correspondantes : {matchingColumns}</p>\r\n          <div className=\"schema-table\">\r\n            {schema.map((column) => (\r\n              <div key={column} className=\"schema-column\">\r\n                {column}\r\n                <div className=\"placeholder\">\r\n                  {column === 'numero_de_gsm' && 'Ex: 212XXXXXXXXX'}\r\n                  {column.includes('date') && 'Format: yyyy-mm-dd ou mm/dd/yyyy'}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelEditor;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ITEquipmentView.js",["94","95"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useTable, useSortBy, useFilters, usePagination } from 'react-table';\r\nimport Select from 'react-select';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as XLSX from 'xlsx';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { FaSortUp, FaSortDown, FaSort } from 'react-icons/fa';\r\n\r\nimport './ITEquipmentView.css';\r\n\r\nconst ITEquipmentView = () => {\r\n  const [itEquipments, setITEquipments] = useState([]);\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [uniqueValues, setUniqueValues] = useState({});\r\n  const [filters, setFilters] = useState({});\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    fetchITEquipments();\r\n  }, []);\r\n\r\n  const setDefaultValues = (data, defaultValue = '------', defaultNumber = 0) => {\r\n    const updatedData = { ...data };\r\n    for (let key in updatedData) {\r\n      if (updatedData[key] === '' || updatedData[key] === null) {\r\n        if (['date_installation', 'fin_garantie', 'date_achat', 'date_livraison', 'date_sortie'].includes(key)) {\r\n          updatedData[key] = null;\r\n        } else if (key === 'prix_achat') {\r\n          updatedData[key] = defaultNumber;\r\n        } else {\r\n          updatedData[key] = defaultValue;\r\n        }\r\n      }\r\n    }\r\n    return updatedData;\r\n  };\r\n\r\n  const applyFilters = (data, filters) => {\r\n    return data.filter(item => {\r\n      return Object.keys(filters).every(key => {\r\n        if (!filters[key].length) return true;\r\n        return filters[key].includes(item[key]);\r\n      });\r\n    });\r\n  };\r\n\r\n  const fetchITEquipments = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/it-equipments', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (response.data && Array.isArray(response.data.equipments)) {\r\n        const data = response.data.equipments.map(({ createdAt, updatedAt, id, ...rest }) => setDefaultValues(rest));\r\n        setOriginalData(data);  // Save original data for filtering\r\n\r\n        const headers = Object.keys(data[0] || {});\r\n        const uniqueValues = {};\r\n\r\n        headers.forEach(header => {\r\n          uniqueValues[header] = [...new Set(data.map(item => item[header]))].map(value => ({ value, label: value }));\r\n        });\r\n\r\n        const cols = [\r\n          {\r\n            Header: '#',\r\n            accessor: (row, i) => i + 1,\r\n            disableFilters: true,\r\n            disableSortBy: true,\r\n            width: 50,\r\n          },\r\n          ...headers.map((header) => ({\r\n            Header: header.replace(/_/g, ' '),\r\n            accessor: header,\r\n            Filter: props => (\r\n              <SelectColumnFilter\r\n                {...props}\r\n                uniqueValues={uniqueValues[header]}\r\n                globalSetFilters={setFilters}\r\n                originalData={data}\r\n                setITEquipments={setITEquipments}\r\n                applyFilters={applyFilters}\r\n              />\r\n            ),\r\n          })),\r\n        ];\r\n\r\n        setColumns(cols);\r\n        setUniqueValues(uniqueValues);\r\n        setITEquipments(applyFilters(data, filters));  // Apply filters to the data\r\n      } else {\r\n        toast.error('Error fetching IT equipments');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Error fetching IT equipments: ' + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (originalData.length) {\r\n      setITEquipments(applyFilters(originalData, filters));\r\n    }\r\n  }, [filters, originalData]);\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    setFilters(prev => {\r\n      const updatedFilters = { ...prev };\r\n      updatedFilters[filterKey] = updatedFilters[filterKey].filter(val => val !== value);\r\n      if (updatedFilters[filterKey].length === 0) {\r\n        delete updatedFilters[filterKey];\r\n      }\r\n      return updatedFilters;\r\n    });\r\n  };\r\n\r\n  const Table = ({ columns, data }) => {\r\n    const defaultColumn = {\r\n      minWidth: 30,\r\n      width: 150,\r\n      maxWidth: 400,\r\n    };\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      prepareRow,\r\n      page,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      state: { pageIndex, pageSize },\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: { pageIndex: 0 },\r\n      },\r\n      useFilters,\r\n      useSortBy,\r\n      usePagination\r\n    );\r\n\r\n    return (\r\n      <div className=\"itequipment-view-table-container\">\r\n        <table {...getTableProps()} className=\"itequipment-view-data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted ? (\r\n                          column.isSortedDesc ? (\r\n                            <FaSortDown />\r\n                          ) : (\r\n                            <FaSortUp />\r\n                          )\r\n                        ) : (\r\n                          <FaSort />\r\n                        )}\r\n                      </span>\r\n                      <div>\r\n                        {column.canFilter ? column.render('Filter') : null}\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} className={rowIndex % 2 === 0 ? 'itequipment-view-row-even' : 'itequipment-view-row-odd'}>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"pagination-controls\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>{'Précédent'}</button>\r\n          <span>\r\n            Page{' '}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>{'Suivant'}</button>\r\n          <button onClick={() => gotoPage(pageOptions.length - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[10, 25, 50, 100].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const exportToExcel = (data) => {\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"ITEquipments\");\r\n    XLSX.writeFile(wb, \"ITEquipments.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"itequipment-view-container\">\r\n      <ToastContainer />\r\n      <button className=\"itequipment-view-back-button\" onClick={() => history.push('/it-equipment')}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1 className=\"itequipment-view-title\">Afficher IT Equipments</h1>\r\n      <div className=\"itequipment-view-selected-filters-container\">\r\n        <h3>Filtres Sélectionnés:</h3>\r\n        {Object.keys(filters).map((filterKey) => (\r\n          filters[filterKey].map((filterValue, index) => (\r\n            <span key={`${filterKey}-${index}`} className=\"itequipment-view-filter-chip\">\r\n              {`${filterKey}: ${filterValue}`} <button onClick={() => handleDelete(filterKey, filterValue)}>x</button>\r\n            </span>\r\n          ))\r\n        ))}\r\n      </div>\r\n      <div className=\"itequipment-view-filters-container\">\r\n        {columns.map(column => (\r\n          column.canFilter ? (\r\n            <div key={column.id} className=\"itequipment-view-filter\">\r\n              <label>{column.render('Header')}</label>\r\n              {column.render('Filter')}\r\n            </div>\r\n          ) : null\r\n        ))}\r\n      </div>\r\n      {columns.length > 0 && (\r\n        <Table\r\n          columns={columns}\r\n          data={itEquipments}  // Use filtered data\r\n        />\r\n      )}\r\n      <div className=\"itequipment-view-footer\">\r\n        <button\r\n          className=\"itequipment-view-export-button\"\r\n          onClick={() => exportToExcel(itEquipments)}\r\n        >\r\n          Export to Excel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({\r\n  column: { filterValue = [], setFilter, id },\r\n  uniqueValues,\r\n  globalSetFilters,\r\n  originalData,  // Receive originalData as a prop\r\n  setITEquipments,\r\n  applyFilters,\r\n}) => {\r\n  const [selectedOptions, setSelectedOptions] = useState(() =>\r\n    filterValue.map(val => ({ value: val, label: val }))\r\n  );\r\n\r\n  const handleChange = (selected) => {\r\n    const values = selected ? selected.map(option => option.value) : [];\r\n    setSelectedOptions(selected);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n    globalSetFilters(prev => {\r\n      const updatedFilters = { ...prev, [id]: values };\r\n      setITEquipments(applyFilters(originalData, updatedFilters));  // Apply filters to the data\r\n      return updatedFilters;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"itequipment-view-filter-container\">\r\n      <Select\r\n        value={selectedOptions}\r\n        onChange={handleChange}\r\n        options={uniqueValues}\r\n        isMulti\r\n        placeholder={'Filter by...'}\r\n        className=\"itequipment-view-filter-select\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ITEquipmentView;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Shared\\Navbar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Shared\\Sidebar.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\ITEquipment.js",["96","97","98","99"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport './ITEquipment.css';\r\n\r\n// Helper function to set default values\r\nconst setDefaultValues = (data, defaultValue = '------') => {\r\n  return Object.fromEntries(\r\n    Object.entries(data).map(([key, value]) => {\r\n      if (value === '' || value === null) {\r\n        if (['date_installation', 'fin_garantie', 'date_achat', 'date_livraison', 'date_sortie'].includes(key)) {\r\n          return [key, null];  // Set date fields to null if empty\r\n        } else {\r\n          return [key, defaultValue];  // Set other fields to default value\r\n        }\r\n      }\r\n      return [key, value];\r\n    })\r\n  );\r\n};\r\n\r\nconst formatDate = (dateString) => {\r\n  if (!dateString || dateString === '------') return '';\r\n  const date = new Date(dateString);\r\n  return date.toISOString().split('T')[0];\r\n};\r\n\r\nconst ITEquipment = () => {\r\n  const [itEquipments, setITEquipments] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n  const [newEquipment, setNewEquipment] = useState({\r\n    categorie: '',\r\n    marque: '',\r\n    model: '',\r\n    code_materiel: '',\r\n    serie: '',\r\n    code_localisation: '',\r\n    code_entite: '',\r\n    date_installation: '',\r\n    fin_garantie: '',\r\n    statut: '',\r\n    type_acquisition: '',\r\n    date_achat: '',\r\n    date_livraison: '',\r\n    fournisseur: '',\r\n    numero_facture: '',\r\n    prix_achat: '',\r\n    numero_appel_offre: '',\r\n    numero_livraison: '',\r\n    cout_maintenance: '',\r\n    emploi_principal: '',\r\n    niveau_criticite: '',\r\n    sla: '',\r\n    date_sortie: '',\r\n    commentaire: '',\r\n  });\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentEquipment, setCurrentEquipment] = useState(null);\r\n  const history = useHistory();\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const [filters, setFilters] = useState({});\r\n  const [sortBy, setSortBy] = useState([]);\r\n  const [allITEquipments, setAllITEquipments] = useState([]);\r\n  const [selectedFilters, setSelectedFilters] = useState({});\r\n\r\n  const fetchITEquipments = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error('No token found');\r\n        return;\r\n      }\r\n\r\n      const response = await axios.get('http://localhost:5000/api/it-equipments', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      console.log('Response from server:', response.data);\r\n      setITEquipments(response.data.equipments);\r\n      setAllITEquipments(response.data.equipments);\r\n      setOptions(response.data.uniqueValues);\r\n    } catch (error) {\r\n      console.error('Error fetching IT Equipments:', error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchITEquipments();\r\n  }, []);\r\n\r\n  const handleAddEquipment = async () => {\r\n    if (newEquipment.statut === 'REFORME' && !newEquipment.date_sortie) {\r\n      alert('Le champ \"date sortie\" doit être rempli, si le statut est \"REFORME\".');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const formattedEquipment = setDefaultValues(newEquipment);\r\n      console.log('Adding equipment:', formattedEquipment);\r\n      const response = await axios.post('http://localhost:5000/api/it-equipments', formattedEquipment, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      console.log('Response from server:', response.data);\r\n\r\n      fetchITEquipments();\r\n      setNewEquipment({\r\n        categorie: '',\r\n        marque: '',\r\n        model: '',\r\n        code_materiel: '',\r\n        serie: '',\r\n        code_localisation: '',\r\n        code_entite: '',\r\n        date_installation: '',\r\n        fin_garantie: '',\r\n        statut: '',\r\n        type_acquisition: '',\r\n        date_achat: '',\r\n        date_livraison: '',\r\n        fournisseur: '',\r\n        numero_facture: '',\r\n        prix_achat: '',\r\n        numero_appel_offre: '',\r\n        numero_livraison: '',\r\n        cout_maintenance: '',\r\n        emploi_principal: '',\r\n        niveau_criticite: '',\r\n        sla: '',\r\n        date_sortie: '',\r\n        commentaire: '',\r\n      });\r\n      console.log('Equipment added successfully');\r\n    } catch (error) {\r\n      console.error('Error adding IT Equipment:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteEquipment = async (id) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error('No token found');\r\n        return;\r\n      }\r\n\r\n      console.log('Token:', token);\r\n\r\n      await axios.delete(`http://localhost:5000/api/it-equipments/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setITEquipments((prevEquipments) => prevEquipments.filter(equipment => equipment.id !== id));\r\n      console.log('Equipment deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error deleting IT Equipment:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleModifyEquipment = (equipment) => {\r\n    setIsEditing(true);\r\n    setCurrentEquipment({\r\n      ...equipment,\r\n      date_installation: formatDate(equipment.date_installation),\r\n      fin_garantie: formatDate(equipment.fin_garantie),\r\n      date_achat: formatDate(equipment.date_achat),\r\n      date_livraison: formatDate(equipment.date_livraison),\r\n      date_sortie: formatDate(equipment.date_sortie),\r\n    });\r\n  };\r\n\r\n  const handleUpdateEquipment = async () => {\r\n    if (currentEquipment.statut === 'REFORME' && !currentEquipment.date_sortie) {\r\n      alert('The \"date sortie\" field must be filled if the statut is \"reforme\".');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error('No token found');\r\n        return;\r\n      }\r\n\r\n      console.log('Token:', token);\r\n\r\n      const filteredEquipment = setDefaultValues(currentEquipment);\r\n      console.log('Updating equipment:', filteredEquipment);\r\n      const response = await axios.put(`http://localhost:5000/api/it-equipments/${currentEquipment.id}`, filteredEquipment, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      console.log('Response from server:', response.data);\r\n      fetchITEquipments();\r\n      setIsEditing(false);\r\n      setCurrentEquipment(null);\r\n      console.log('Equipment updated successfully');\r\n    } catch (error) {\r\n      console.error('Error updating IT Equipment:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (isEditing) {\r\n      setCurrentEquipment(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    } else {\r\n      setNewEquipment(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (id, value) => {\r\n    setFilters(prevFilters => ({\r\n      ...prevFilters,\r\n      [id]: value,\r\n    }));\r\n    setSelectedFilters(prevSelected => ({\r\n      ...prevSelected,\r\n      [id]: value.map(val => val.label),\r\n    }));\r\n  };\r\n\r\n  const filteredAndSortedData = React.useMemo(() => {\r\n    let filteredData = itEquipments;\r\n\r\n    Object.keys(filters).forEach(id => {\r\n      if (filters[id] && filters[id].length > 0) {\r\n        filteredData = filteredData.filter(row => {\r\n          const rowValue = row[id] != null ? row[id].toString().toLowerCase() : '';\r\n          const filterValue = Array.isArray(filters[id]) ? filters[id][0].value : filters[id].value;\r\n\r\n          if (filterValue != null) {\r\n            return rowValue.includes(filterValue.toString().toLowerCase());\r\n          }\r\n          return true;\r\n        });\r\n      }\r\n    });\r\n\r\n    if (sortBy.length) {\r\n      const sortByField = sortBy[0];\r\n      filteredData = filteredData.sort((a, b) => {\r\n        const aValue = a[sortByField.id] != null ? a[sortByField.id].toString() : '';\r\n        const bValue = b[sortByField.id] != null ? b[sortByField.id].toString() : '';\r\n        if (aValue < bValue) {\r\n          return sortByField.desc ? 1 : -1;\r\n        }\r\n        if (aValue > bValue) {\r\n          return sortByField.desc ? -1 : 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return filteredData;\r\n  }, [itEquipments, filters, sortBy, currentPage, rowsPerPage]);\r\n\r\n  const currentRows = React.useMemo(() => {\r\n    const indexOfLastRow = currentPage * rowsPerPage;\r\n    const indexOfFirstRow = indexOfLastRow - rowsPerPage;\r\n    return filteredAndSortedData.slice(indexOfFirstRow, indexOfLastRow);\r\n  }, [filteredAndSortedData, currentPage, rowsPerPage]);\r\n\r\n  const data = React.useMemo(() => currentRows.map((equipment, index) => ({\r\n    rowNumber: (currentPage - 1) * rowsPerPage + index + 1,\r\n    actions: (\r\n      <div>\r\n        <button className=\"modify-button\" onClick={() => handleModifyEquipment(equipment)}>Modify</button>\r\n        <button className=\"delete-button\" onClick={() => handleDeleteEquipment(equipment.id)}>Delete</button>\r\n      </div>\r\n    ),\r\n    ...equipment,\r\n  })), [currentRows, currentPage, rowsPerPage]);\r\n\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      Header: '#',\r\n      accessor: (row, i) => (currentPage - 1) * rowsPerPage + i + 1,\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      accessor: 'actions',\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n    },\r\n    ...Object.keys(newEquipment).map((key) => ({\r\n      Header: key.replace(/_/g, ' '),\r\n      accessor: key,\r\n      Filter: ({ column: { filterValue, setFilter, id } }) => (\r\n        <Select\r\n          value={filterValue || ''}\r\n          onChange={(value) => handleFilterChange(id, value)}\r\n          options={options[id] ? options[id].map(option => ({ label: option.label, value: option.value })) : []}\r\n          isMulti\r\n          placeholder={`Filter by ${key.replace(/_/g, ' ')}`}\r\n          className=\"filter-select\"\r\n        />\r\n      ),\r\n    })),\r\n  ], [newEquipment, currentPage, rowsPerPage, options, selectedFilters]);\r\n\r\n  const handlePageNumberClick = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const handleDeleteFilter = (filterKey, value) => {\r\n    setFilters(prev => {\r\n      const updatedFilters = { ...prev };\r\n      updatedFilters[filterKey] = updatedFilters[filterKey].filter(val => val.label !== value);\r\n      if (updatedFilters[filterKey].length === 0) {\r\n        delete updatedFilters[filterKey];\r\n      }\r\n      return updatedFilters;\r\n    });\r\n\r\n    setSelectedFilters(prevSelected => {\r\n      const updatedSelected = { ...prevSelected };\r\n      updatedSelected[filterKey] = updatedSelected[filterKey].filter(val => val !== value);\r\n      if (updatedSelected[filterKey].length === 0) {\r\n        delete updatedSelected[filterKey];\r\n      }\r\n      return updatedSelected;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"it-equipment-manager\">\r\n      <button className=\"itequipment-modify-back-button\" onClick={() => history.goBack()}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1>IT Equipment Manager</h1>\r\n      <div className=\"add-equipment\">\r\n        <table className=\"form-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <label>categorie</label>\r\n                <CustomDropdown\r\n                  name=\"categorie\"\r\n                  value={isEditing ? currentEquipment.categorie : newEquipment.categorie}\r\n                  options={options.categorie || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner la categorie\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>marque</label>\r\n                <CustomDropdown\r\n                  name=\"marque\"\r\n                  value={isEditing ? currentEquipment.marque : newEquipment.marque}\r\n                  options={options.marque || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner la marque\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>model</label>\r\n                <CustomDropdown\r\n                  name=\"model\"\r\n                  value={isEditing ? currentEquipment.model : newEquipment.model}\r\n                  options={options.model || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le model\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>code materiel</label>\r\n                <CustomDropdown\r\n                  name=\"code_materiel\"\r\n                  value={isEditing ? currentEquipment.code_materiel : newEquipment.code_materiel}\r\n                  options={options.code_materiel || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le code de materiel\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label>serie</label>\r\n                <CustomDropdown\r\n                  name=\"serie\"\r\n                  value={isEditing ? currentEquipment.serie : newEquipment.serie}\r\n                  options={options.serie || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner la serie\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>code localisation</label>\r\n                <CustomDropdown\r\n                  name=\"code_localisation\"\r\n                  value={isEditing ? currentEquipment.code_localisation : newEquipment.code_localisation}\r\n                  options={options.code_localisation || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le code de localisation\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>code entite</label>\r\n                <CustomDropdown\r\n                  name=\"code_entite\"\r\n                  value={isEditing ? currentEquipment.code_entite : newEquipment.code_entite}\r\n                  options={options.code_entite || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le code d'entite\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>date installation</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date_installation\"\r\n                  value={isEditing ? formatDate(currentEquipment.date_installation) : newEquipment.date_installation}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"YYYY-MM-DD\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label>fin garantie</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"fin_garantie\"\r\n                  value={isEditing ? formatDate(currentEquipment.fin_garantie) : newEquipment.fin_garantie}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"YYYY-MM-DD\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>statut</label>\r\n                <CustomDropdown\r\n                  name=\"statut\"\r\n                  value={isEditing ? currentEquipment.statut : newEquipment.statut}\r\n                  options={options.statut || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le status\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>type acquisition</label>\r\n                <CustomDropdown\r\n                  name=\"type_acquisition\"\r\n                  value={isEditing ? currentEquipment.type_acquisition : newEquipment.type_acquisition}\r\n                  options={options.type_acquisition || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le type d'acquisition\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>date achat</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date_achat\"\r\n                  value={isEditing ? formatDate(currentEquipment.date_achat) : newEquipment.date_achat}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"YYYY-MM-DD\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label>date livraison</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date_livraison\"\r\n                  value={isEditing ? formatDate(currentEquipment.date_livraison) : newEquipment.date_livraison}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"YYYY-MM-DD\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>fournisseur</label>\r\n                <CustomDropdown\r\n                  name=\"fournisseur\"\r\n                  value={isEditing ? currentEquipment.fournisseur : newEquipment.fournisseur}\r\n                  options={options.fournisseur || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le fournisseur\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>numero facture</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"numero_facture\"\r\n                  value={isEditing ? currentEquipment.numero_facture : newEquipment.numero_facture}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer le numero de facture\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>prix achat</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"prix_achat\"\r\n                  value={isEditing ? currentEquipment.prix_achat : newEquipment.prix_achat}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer le prix achat\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label>numero appel offre</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"numero_appel_offre\"\r\n                  value={isEditing ? currentEquipment.numero_appel_offre : newEquipment.numero_appel_offre}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer le numero d'appel offre\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>numero livraison</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"numero_livraison\"\r\n                  value={isEditing ? currentEquipment.numero_livraison : newEquipment.numero_livraison}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer le numero de livraison\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>cout maintenance</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"cout_maintenance\"\r\n                  value={isEditing ? currentEquipment.cout_maintenance : newEquipment.cout_maintenance}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer le cout de maintenance\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>emploi principal</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"emploi_principal\"\r\n                  value={isEditing ? currentEquipment.emploi_principal : newEquipment.emploi_principal}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer l'emploi principale\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label>niveau criticite</label>\r\n                <CustomDropdown\r\n                  name=\"niveau_criticite\"\r\n                  value={isEditing ? currentEquipment.niveau_criticite : newEquipment.niveau_criticite}\r\n                  options={options.niveau_criticite || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le niveau de criticité\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>sla</label>\r\n                <CustomDropdown\r\n                  name=\"sla\"\r\n                  value={isEditing ? currentEquipment.sla : newEquipment.sla}\r\n                  options={options.sla || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Entrer/Selectionner le SLA\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>date sortie</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date_sortie\"\r\n                  value={isEditing ? formatDate(currentEquipment.date_sortie) : newEquipment.date_sortie}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"YYYY-MM-DD\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label>commentaire</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"commentaire\"\r\n                  value={isEditing ? currentEquipment.commentaire : newEquipment.commentaire}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer un commentaire\"\r\n                />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        {isEditing ? (\r\n          <button onClick={handleUpdateEquipment}>Update Equipment</button>\r\n        ) : (\r\n          <button onClick={handleAddEquipment}>Add Equipment</button>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"itequipment-view-selected-filters-container\">\r\n        <h3>Filtres Sélectionnés:</h3>\r\n        {Object.keys(selectedFilters).map((filterKey) => (\r\n          selectedFilters[filterKey].map((filterValue, index) => (\r\n            <span key={`${filterKey}-${index}`} className=\"itequipment-view-filter-chip\">\r\n              {`${filterKey}: ${filterValue}`} <button onClick={() => handleDeleteFilter(filterKey, filterValue)}>x</button>\r\n            </span>\r\n          ))\r\n        ))}\r\n      </div>\r\n      <div className=\"itequipment-view-table-container\">\r\n      <Table columns={columns} data={data} />\r\n    </div>\r\n    <div className=\"pagination-controls\">\r\n      <button onClick={() => handlePageNumberClick(1)} disabled={currentPage === 1}>{'<<'}</button>\r\n      <button onClick={() => handlePageNumberClick(currentPage - 1)} disabled={currentPage === 1}>{'Précédent'}</button>\r\n      <span>\r\n        Page {currentPage} of {Math.ceil(filteredAndSortedData.length / rowsPerPage)}\r\n      </span>\r\n      <button onClick={() => handlePageNumberClick(currentPage + 1)} disabled={currentPage === Math.ceil(filteredAndSortedData.length / rowsPerPage)}>{'Suivant'}</button>\r\n      <button onClick={() => handlePageNumberClick(Math.ceil(filteredAndSortedData.length / rowsPerPage))} disabled={currentPage === Math.ceil(filteredAndSortedData.length / rowsPerPage)}>{'>>'}</button>\r\n      <select value={rowsPerPage} onChange={(e) => setRowsPerPage(Number(e.target.value))}>\r\n        <option value={10}>Show 10</option>\r\n        <option value={25}>Show 25</option>\r\n        <option value={50}>Show 50</option>\r\n        <option value={100}>Show 100</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n);\r\n};\r\n\r\nconst Table = ({ columns, data }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  return (\r\n    <table {...getTableProps()} className=\"data-table itequipment-view-data-table\">\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                <div>\r\n                  {column.render('Header')}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' 🔽'\r\n                        : ' 🔼'\r\n                      : ''}\r\n                  </span>\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, index) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()} className={index % 2 === 0 ? \"itequipment-view-row-even\" : \"itequipment-view-row-odd\"}>\r\n              {row.cells.map(cell => (\r\n                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n              ))}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nconst CustomDropdown = ({ name, value, options, onChange, placeholder }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [inputValue, setInputValue] = useState(value);\r\n\r\n  const handleSelect = (option) => {\r\n    setInputValue(option.label);\r\n    onChange({ target: { name, value: option.value } });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n    onChange({ target: { name, value: e.target.value } });\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const filteredOptions = options.filter(option =>\r\n    option.label.toLowerCase().includes(inputValue.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"dropdown-container\">\r\n      <input\r\n        type=\"text\"\r\n        name={name}\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder={placeholder}\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      />\r\n      <div className=\"dropdown-arrow\" onClick={() => setIsOpen(!isOpen)}>\r\n        ▼\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"dropdown-menu\">\r\n          {filteredOptions.length === 0 ? (\r\n            <div className=\"dropdown-option\">No options available</div>\r\n          ) : (\r\n            filteredOptions.map((option, index) => (\r\n              <div key={index} className=\"dropdown-option\" onClick={() => handleSelect(option)}>\r\n                {option.label}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ITEquipment;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelephoneLine.js",["100","101","102","103"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport './TelephoneLine.css';\r\n\r\nconst setDefaultValues = (data, defaultValue = '------') => {\r\n  return Object.fromEntries(\r\n    Object.entries(data).map(([key, value]) => {\r\n      if (value === '' || value === null) {\r\n        return [key, defaultValue];\r\n      }\r\n      return [key, value];\r\n    })\r\n  );\r\n};\r\n\r\nconst getCustomHeaderName = (header) => {\r\n  const customNames = {\r\n    numero_de_gsm: 'Numero de GSM',\r\n    full_name: 'Nom et Prénom',\r\n    code_entite: 'Code Entité',\r\n    direction: 'Direction',\r\n    fonction: 'Fonction',\r\n    operateur: 'Opérateur',\r\n    categorie: 'Catégorie',\r\n    poste_GSM: 'Poste GSM',\r\n  };\r\n  return customNames[header] || header.replace(/_/g, ' ');\r\n};\r\n\r\nconst TelephoneLine = () => {\r\n  const [telephoneLines, setTelephoneLines] = useState([]);\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [options, setOptions] = useState({\r\n    code_entite: [],\r\n    direction: [],\r\n    fonction: [],\r\n    operateur: [],\r\n    categorie: [],\r\n    poste_GSM: [],\r\n  });\r\n  const [filters, setFilters] = useState({});\r\n  const [newLine, setNewLine] = useState({\r\n    numero_de_gsm: '',\r\n    full_name: '',\r\n    code_entite: '',\r\n    direction: '',\r\n    fonction: '',\r\n    operateur: '',\r\n    categorie: '',\r\n    poste_GSM: '',\r\n  });\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState(null);\r\n  const history = useHistory();\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10); // Define the page size\r\n  const totalPages = Math.ceil(filteredData.length / rowsPerPage);\r\n\r\n  const paginate = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n  \r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setCurrentPage(1); // Reset to the first page\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTelephoneLines = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/telephone-lines', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        const data = response.data.map(line => setDefaultValues(line));\r\n        setOriginalData(data);\r\n        applyFilters(data, filters); // Apply filters on initial load\r\n      } catch (error) {\r\n        console.error('Error fetching Telephone Lines:', error.message);\r\n        alert('Failed to fetch telephone lines: ' + error.message);\r\n      }\r\n    };\r\n\r\n    fetchTelephoneLines();\r\n    fetchDropdownOptions();\r\n  }, []);\r\n\r\n  const fetchDropdownOptions = async () => {\r\n    try {\r\n      const fields = ['code_entite', 'direction', 'fonction', 'operateur', 'categorie', 'poste_GSM', 'numero_de_gsm', 'full_name'];\r\n      const fetchedOptions = {};\r\n      for (const field of fields) {\r\n        const response = await axios.get(`http://localhost:5000/api/telephone-lines/dropdown/${field}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        const uniqueValues = Array.from(new Set(response.data.filter(value => value !== '')));\r\n        fetchedOptions[field] = uniqueValues.map(value => ({ value, label: value }));\r\n      }\r\n      setOptions(fetchedOptions);\r\n    } catch (error) {\r\n      console.error('Error fetching dropdown options:', error.message);\r\n      alert('Failed to fetch dropdown options: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const applyFilters = (data, appliedFilters) => {\r\n    let filteredData = data;\r\n\r\n    Object.keys(appliedFilters).forEach(filterKey => {\r\n      if (appliedFilters[filterKey].length > 0) {\r\n        filteredData = filteredData.filter(item => appliedFilters[filterKey].includes(item[filterKey]));\r\n      }\r\n    });\r\n\r\n    setFilteredData(filteredData);\r\n    setCurrentPage(1); // Reset to the first page after applying filters\r\n  };\r\n\r\n  const handleFilterChange = (field, selectedOptions) => {\r\n    const values = selectedOptions ? selectedOptions.map(option => option.value) : [];\r\n    setFilters(prevFilters => {\r\n      const updatedFilters = {\r\n        ...prevFilters,\r\n        [field]: values\r\n      };\r\n      applyFilters(originalData, updatedFilters);\r\n      return updatedFilters;\r\n    });\r\n  };\r\n\r\n  const handleRemoveFilter = (field, value) => {\r\n    const updatedValues = filters[field].filter(item => item !== value);\r\n    const updatedFilters = { ...filters, [field]: updatedValues };\r\n    setFilters(updatedFilters);\r\n    applyFilters(originalData, updatedFilters);\r\n  };\r\n\r\n  const handleAddLine = async () => {\r\n    if (!newLine.numero_de_gsm) {\r\n      alert('The \"numero_de_gsm\" field must be filled.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const formattedLine = setDefaultValues(newLine);\r\n      const response = await axios.post('http://localhost:5000/api/telephone-lines', formattedLine, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const addedLine = response.data;\r\n      const updatedData = [...originalData, addedLine];\r\n      setOriginalData(updatedData);\r\n      applyFilters(updatedData, filters);\r\n      setNewLine({\r\n        numero_de_gsm: '',\r\n        full_name: '',\r\n        code_entite: '',\r\n        direction: '',\r\n        fonction: '',\r\n        operateur: '',\r\n        categorie: '',\r\n        poste_GSM: '',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding Telephone Line:', error.message);\r\n      alert('Failed to add telephone line: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleModifyLine = (line) => {\r\n    setIsEditing(true);\r\n    setCurrentLine(line);\r\n  };\r\n\r\n  const handleUpdateLine = async () => {\r\n    try {\r\n      const formattedLine = setDefaultValues(currentLine);\r\n      const response = await axios.put(`http://localhost:5000/api/telephone-lines/${currentLine.id}`, formattedLine, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const updatedLine = response.data;\r\n      const updatedData = originalData.map(line => line.id === updatedLine.id ? updatedLine : line);\r\n      setOriginalData(updatedData);\r\n      applyFilters(updatedData, filters);\r\n      setIsEditing(false);\r\n      setCurrentLine(null);\r\n    } catch (error) {\r\n      console.error('Error updating Telephone Line:', error.message);\r\n      alert('Failed to update telephone line: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (isEditing) {\r\n      setCurrentLine(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    } else {\r\n      setNewLine(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleDeleteLine = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/telephone-lines/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const updatedData = originalData.filter(line => line.id !== id);\r\n      setOriginalData(updatedData);\r\n      applyFilters(updatedData, filters);\r\n    } catch (error) {\r\n      console.error('Error deleting Telephone Line:', error.message);\r\n      alert('Failed to delete telephone line: ' + error.message);\r\n    }\r\n  };\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      Header: '#',\r\n      accessor: (row, i) => (currentPage - 1) * rowsPerPage + i + 1,\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      width: 50, // Set a specific width if needed\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      accessor: 'actions',\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      width: 120, // Set a specific width for the Actions column\r\n      Cell: ({ row }) => (\r\n        <div className=\"actions-column\">\r\n          <button className=\"modify-button\" onClick={() => handleModifyLine(row.original)}>Modify</button>\r\n          <button className=\"delete-button\" onClick={() => handleDeleteLine(row.original.id)}>Delete</button>\r\n        </div>\r\n      ),\r\n    },\r\n    ...Object.keys(newLine).map((key) => ({\r\n      Header: getCustomHeaderName(key),\r\n      accessor: key,\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options[key]}\r\n          placeholder={`Filter by ${getCustomHeaderName(key)}`}\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveFilter={handleRemoveFilter}\r\n        />\r\n      ),\r\n    })),\r\n  ], [newLine, currentPage, rowsPerPage, options, filters]);\r\n\r\n  const paginatedData = React.useMemo(() => {\r\n    const startIndex = (currentPage - 1) * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    return filteredData.slice(startIndex, endIndex);\r\n  }, [filteredData, currentPage, rowsPerPage]);\r\n\r\n  return (\r\n    <div className=\"telephone-line-manager\">\r\n      <button className=\"telephone-line-modify-back-button\" onClick={() => history.goBack()}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1>Line Téléphonique Manager</h1>\r\n      <div className=\"add-line\">\r\n        <table className=\"form-table telephone-line-form-table\">\r\n          <tbody>\r\n            {Object.keys(newLine).map((key, index) => (\r\n              index % 3 === 0 && (\r\n                <tr key={index}>\r\n                  {Object.keys(newLine).slice(index, index + 3).map(innerKey => (\r\n                    <td key={innerKey}>\r\n                      <label className=\"telephone-line-form-label\">{getCustomHeaderName(innerKey)}</label>\r\n                      {['code_entite', 'direction', 'fonction', 'operateur', 'categorie', 'poste_GSM'].includes(innerKey) ? (\r\n                        <CustomDropdown\r\n                          name={innerKey}\r\n                          value={isEditing ? currentLine[innerKey] : newLine[innerKey]}\r\n                          options={options[innerKey] || []}\r\n                          onChange={handleChange}\r\n                          placeholder={`Entrer/Selectionner ${innerKey.replace(/_/g, ' ')}`}\r\n                        />\r\n                      ) : (\r\n                        <input\r\n                          type={innerKey.startsWith('date') ? 'date' : 'text'}\r\n                          name={innerKey}\r\n                          value={isEditing ? currentLine[innerKey] : newLine[innerKey]}\r\n                          onChange={handleChange}\r\n                          className=\"input-field\"\r\n                          placeholder={innerKey === 'numero_de_gsm' ? 'eg: 212XXXXXXXXX' : `Entrer ${innerKey.replace(/_/g, ' ')}`}\r\n                        />\r\n                      )}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              )\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        {isEditing ? (\r\n          <button className=\"update-button\" onClick={handleUpdateLine}>Update Line</button>\r\n        ) : (\r\n          <button className=\"add-button\" onClick={handleAddLine}>Add Line</button>\r\n        )}\r\n      </div>\r\n      <div className=\"selected-filters\">\r\n        <h3>Selected Filters:</h3>\r\n        <div>\r\n          {Object.keys(filters).map((key) => (\r\n            filters[key].length > 0 && (\r\n              <div key={key}>\r\n                <strong>{getCustomHeaderName(key)}:</strong> {filters[key].map((value) => (\r\n                  <span key={value} className=\"filter-badge\">\r\n                    {value} <button onClick={() => handleRemoveFilter(key, value)}>x</button>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            )\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"table-container\">\r\n        <Table columns={columns} data={paginatedData} />\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button onClick={() => paginate(1)} disabled={currentPage === 1}>{'<<'}</button>\r\n        <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1}>{'Précédent'}</button>\r\n        <span>Page {currentPage} of {totalPages}</span>\r\n        <button onClick={() => paginate(currentPage + 1)} disabled={currentPage === totalPages}>{'Suivant'}</button>\r\n        <button onClick={() => paginate(totalPages)} disabled={currentPage === totalPages}>{'>>'}</button>\r\n        <select value={rowsPerPage} onChange={handleRowsPerPageChange}>\r\n          <option value={10}>Show 10</option>\r\n          <option value={25}>Show 25</option>\r\n          <option value={50}>Show 50</option>\r\n          <option value={100}>Show 100</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({ column: { filterValue, setFilter, id }, options = [], placeholder, handleFilterChange, handleRemoveFilter }) => {\r\n  const filterOptions = options.map(option => ({ value: option.value, label: option.label }));\r\n\r\n  const handleChange = (selectedOptions) => {\r\n    setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n    handleFilterChange(id, selectedOptions); // Call handleFilterChange to update filters\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Select\r\n        value={filterOptions.filter(option => filterValue && filterValue.includes(option.value))}\r\n        onChange={handleChange}\r\n        options={filterOptions}\r\n        isMulti\r\n        placeholder={placeholder || 'Filter...'}\r\n        className=\"filter-select\"\r\n        classNamePrefix=\"filter-select\"\r\n      />\r\n      <div className=\"selected-values\">\r\n        {filterValue && filterValue.map(value => (\r\n          <span key={value} className=\"filter-badge\">\r\n            {value} <button onClick={() => handleRemoveFilter(id, value)}>x</button>\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Table = ({ columns, data }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      disableMultiSort: false\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  return (\r\n    <table {...getTableProps()} className=\"data-table telephone-line-view-data-table\">\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                <div>\r\n                  {column.render('Header')}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' 🔽'\r\n                        : ' 🔼'\r\n                      : ''}\r\n                  </span>\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, index) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()} className={index % 2 === 0 ? \"telephone-line-view-row-even\" : \"telephone-line-view-row-odd\"}>\r\n              {row.cells.map(cell => (\r\n                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n              ))}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nconst CustomDropdown = ({ name, value, options, onChange, placeholder }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleSelect = (option) => {\r\n    onChange({ target: { name, value: option.value } });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown-container\">\r\n      <input\r\n        type=\"text\"\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n      />\r\n      <div className=\"dropdown-arrow\" onClick={() => setIsOpen(!isOpen)}>\r\n        ▼\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"dropdown-menu\">\r\n          {options.map((option, index) => (\r\n            <div key={index} className=\"dropdown-option\" onClick={() => handleSelect(option)}>\r\n              {option.label}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelephoneLine;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelecomPackLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelecomPack.js",["104","105","106","107"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport Select from 'react-select';\r\nimport './TelecomPack.css';\r\n\r\nconst subfieldOptionsMap = {\r\n  'DATA': ['VPNLL', 'VPLS', 'VPNADSL', 'ADSLSECOURS'],\r\n  'VOIX': ['RTC', 'MARNIS'],\r\n  'MOBILE': ['GSM'],\r\n  'INTERNET': ['ADSL', '4G']\r\n};\r\n\r\nconst formatDate = (dateString) => {\r\n  if (!dateString || dateString === '------') return '';\r\n  const date = new Date(dateString);\r\n  return date.toISOString().split('T')[0];\r\n};\r\n\r\nconst formatTelecomPackData = (pack) => {\r\n  const formattedPack = setDefaultValues(pack);\r\n  return {\r\n    ...formattedPack,\r\n    dateAbonnement: formatDate(formattedPack.dateAbonnement),\r\n    dateReengagement: formatDate(formattedPack.dateReengagement),\r\n    dateEtat: formatDate(formattedPack.dateEtat),\r\n  };\r\n};\r\n\r\nconst setDefaultValues = (data, defaultValue = '') => {\r\n  return Object.fromEntries(\r\n    Object.entries(data).map(([key, value]) => {\r\n      if (value === '' || value === null) {\r\n        return [key, defaultValue];\r\n      }\r\n      return [key, value];\r\n    })\r\n  );\r\n};\r\n\r\nconst TelecomPack = () => {\r\n  const [telecomPacks, setTelecomPacks] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [options, setOptions] = useState({\r\n    entite: [],\r\n    operateur: [],\r\n    produit: ['DATA', 'VOIX', 'MOBILE', 'INTERNET'],\r\n    etatAbonnement: [],\r\n    produit2: [],\r\n    numero: [],\r\n    dateAbonnement: [],\r\n    dateReengagement: [],\r\n    dateEtat: [],\r\n    observation: [],\r\n    typePoste: [],\r\n    numeroDeSerie: [],\r\n    dateAffectation: []\r\n  });\r\n  const [filters, setFilters] = useState({});\r\n  const [newPack, setNewPack] = useState({\r\n    entite: '',\r\n    operateur: '',\r\n    produit: '',\r\n    produit2: '',\r\n    numero: '',\r\n    etatAbonnement: '',\r\n    dateAbonnement: '',\r\n    dateReengagement: '',\r\n    dateEtat: '',\r\n    observation: '',\r\n    typePoste: '',\r\n    numeroDeSerie: '',\r\n    dateAffectation: ''\r\n  });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentPack, setCurrentPack] = useState(null);\r\n  const history = useHistory();\r\n  const [subfieldOptions, setSubfieldOptions] = useState([]);\r\n  const [subfield, setSubfield] = useState('');\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  const paginate = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setCurrentPage(1); // Reset to the first page\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTelecomPacks = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/telecom-packs', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        const data = response.data.map(formatTelecomPackData);\r\n        data.sort((a, b) => {\r\n          const entiteA = a.entite.match(/\\d+/);\r\n          const entiteB = b.entite.match(/\\d+/);\r\n          return entiteA - entiteB;\r\n        });\r\n        setOriginalData(data);\r\n        applyFilters(data, filters); // Apply filters on initial load\r\n      } catch (error) {\r\n        console.error('Error fetching Telecom Packs:', error.message);\r\n        alert('Failed to fetch telecom packs: ' + error.message);\r\n      }\r\n    };\r\n\r\n    fetchTelecomPacks();\r\n    fetchDropdownOptions();\r\n  }, []);\r\n\r\n  const fetchDropdownOptions = async () => {\r\n    try {\r\n      const fields = ['entite', 'operateur', 'etatAbonnement', 'produit2', 'numero', 'dateAbonnement', 'dateReengagement', 'dateEtat', 'observation', 'typePoste', 'numeroDeSerie', 'dateAffectation'];\r\n      const fetchedOptions = {};\r\n      for (const field of fields) {\r\n        const response = await axios.get(`http://localhost:5000/api/telecom-packs/dropdown/${field}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        const uniqueValues = Array.from(new Set(response.data.filter(value => value !== '')));\r\n        fetchedOptions[field] = uniqueValues;\r\n      }\r\n\r\n      fetchedOptions.produit = ['DATA', 'VOIX', 'MOBILE', 'INTERNET'];\r\n\r\n      setOptions(fetchedOptions);\r\n    } catch (error) {\r\n      console.error('Error fetching dropdown options:', error.message);\r\n      alert('Failed to fetch dropdown options: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const applyFilters = (data, appliedFilters) => {\r\n    let filteredData = data;\r\n\r\n    Object.keys(appliedFilters).forEach(filterKey => {\r\n      if (appliedFilters[filterKey].length > 0) {\r\n        filteredData = filteredData.filter(item => appliedFilters[filterKey].includes(item[filterKey]));\r\n      }\r\n    });\r\n\r\n    setFilteredData(filteredData);\r\n    setTotalPages(Math.ceil(filteredData.length / rowsPerPage));\r\n    setCurrentPage(1); // Reset to the first page after applying filters\r\n  };\r\n\r\n  const handleFilterChange = (field, selectedOptions) => {\r\n    const values = selectedOptions ? selectedOptions.map(option => option.value) : [];\r\n    setFilters(prevFilters => {\r\n      const updatedFilters = {\r\n        ...prevFilters,\r\n        [field]: values\r\n      };\r\n      applyFilters(originalData, updatedFilters);\r\n      return updatedFilters;\r\n    });\r\n  };\r\n  const handleRemoveSelectedValue = (columnId, value) => {\r\n    const updatedValues = filters[columnId].filter(item => item !== value);\r\n    const updatedFilters = { ...filters, [columnId]: updatedValues };\r\n    setFilters(updatedFilters);\r\n    applyFilters(originalData, updatedFilters);\r\n  };\r\n  \r\n  const handleRemoveFilter = (field, value) => {\r\n    const updatedValues = filters[field].filter(item => item !== value);\r\n    const updatedFilters = { ...filters, [field]: updatedValues };\r\n    setFilters(updatedFilters);\r\n    applyFilters(originalData, updatedFilters);\r\n  };\r\n\r\n  const handleAddPack = async () => {\r\n    if (!newPack.entite) {\r\n      alert('The \"entite\" field must be filled.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { produit, ...formattedPack } = setDefaultValues({ ...newPack });\r\n      const response = await axios.post('http://localhost:5000/api/telecom-packs', formattedPack, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const addedPack = response.data;\r\n      const updatedData = [...originalData, addedPack];\r\n      setOriginalData(updatedData);\r\n      applyFilters(updatedData, filters);\r\n      setNewPack({\r\n        entite: '',\r\n        operateur: '',\r\n        produit: '', // Keep this for frontend use\r\n        produit2: '',\r\n        numero: '',\r\n        etatAbonnement: '',\r\n        dateAbonnement: '',\r\n        dateReengagement: '',\r\n        dateEtat: '',\r\n        observation: '',\r\n        typePoste: '',\r\n        numeroDeSerie: '',\r\n        dateAffectation: ''\r\n      });\r\n      setSubfield('');\r\n      setSubfieldOptions([]);\r\n    } catch (error) {\r\n      console.error('Error adding Telecom Pack:', error.message);\r\n      alert('Failed to add telecom pack: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleModifyPack = (pack) => {\r\n    setIsEditing(true);\r\n    setCurrentPack({\r\n      ...pack,\r\n      dateAbonnement: formatDate(pack.dateAbonnement),\r\n      dateReengagement: formatDate(pack.dateReengagement),\r\n      dateEtat: formatDate(pack.dateEtat),\r\n    });\r\n    const options = subfieldOptionsMap[pack.produit] || [];\r\n    setSubfieldOptions(options);\r\n    setSubfield(pack.produit2);\r\n  };\r\n\r\n  const handleUpdatePack = async () => {\r\n    try {\r\n      const { produit, ...formattedPack } = setDefaultValues({ ...currentPack }); // Exclude 'produit' from being sent\r\n      const response = await axios.put(`http://localhost:5000/api/telecom-packs/${currentPack.id}`, formattedPack, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n      const updatedPack = response.data;\r\n      const updatedData = originalData.map(pack => pack.id === updatedPack.id ? updatedPack : pack);\r\n      setOriginalData(updatedData);\r\n      applyFilters(updatedData, filters);\r\n      setIsEditing(false);\r\n      setCurrentPack(null);\r\n      setSubfield('');\r\n      setSubfieldOptions([]);\r\n    } catch (error) {\r\n      console.error('Error updating Telecom Pack:', error.message);\r\n      alert('Failed to update telecom pack: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (isEditing) {\r\n      setCurrentPack(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    } else {\r\n      setNewPack(prevState => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleProduitChange = (e) => {\r\n    const { value } = e.target;\r\n    const options = subfieldOptionsMap[value] || [];\r\n    setSubfieldOptions(options);\r\n    setSubfield(''); // Reset subfield when produit changes\r\n\r\n    if (isEditing) {\r\n      setCurrentPack(prevState => ({\r\n        ...prevState,\r\n        produit: value, // Keep produit here\r\n        produit2: '' // Reset produit2 when produit changes\r\n      }));\r\n    } else {\r\n      setNewPack(prevState => ({\r\n        ...prevState,\r\n        produit: value, // Keep produit here\r\n        produit2: '' // Reset produit2 when produit changes\r\n      }));\r\n    }\r\n  };\r\n\r\n\r\n  const handleSubfieldChange = (e) => {\r\n    const { value } = e.target;\r\n    if (isEditing) {\r\n      setCurrentPack(prevState => ({\r\n        ...prevState,\r\n        produit2: value,\r\n      }));\r\n    } else {\r\n      setNewPack(prevState => ({\r\n        ...prevState,\r\n        produit2: value,\r\n      }));\r\n    }\r\n    setSubfield(value);\r\n  };\r\n\r\n  const handleDeletePack = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/telecom-packs/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      const updatedData = originalData.filter(pack => pack.id !== id);\r\n      setOriginalData(updatedData);\r\n      applyFilters(updatedData, filters);\r\n    } catch (error) {\r\n      console.error('Error deleting Telecom Pack:', error.message);\r\n      alert('Failed to delete telecom pack: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      Header: '#',\r\n      accessor: (row, i) => (currentPage - 1) * rowsPerPage + i + 1,\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      accessor: 'actions',\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      Cell: ({ row }) => (\r\n        <div>\r\n          <button className=\"modify-button\" onClick={() => handleModifyPack(row.original)}>Modify</button>\r\n          <button className=\"delete-button\" onClick={() => handleDeletePack(row.original.id)}>Delete</button>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      Header: 'Entite',\r\n      accessor: 'entite',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.entite}\r\n          placeholder=\"Filtrer par Entite\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Operateur',\r\n      accessor: 'operateur',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.operateur}\r\n          placeholder=\"Filtrer par Operateur\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Sous-Produit',\r\n      accessor: 'produit2',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.produit2}\r\n          placeholder=\"Filtrer par Sous-Produit\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Numero',\r\n      accessor: 'numero',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.numero}\r\n          placeholder=\"Filtrer par Numero\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Etat d\\'Abonnement',\r\n      accessor: 'etatAbonnement',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.etatAbonnement}\r\n          placeholder=\"Filtrer par Etat d'Abonnement\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Date d\\'Abonnement',\r\n      accessor: 'dateAbonnement',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.dateAbonnement}\r\n          placeholder=\"Filtrer par Date d'Abonnement\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Date de Reengagement',\r\n      accessor: 'dateReengagement',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.dateReengagement}\r\n          placeholder=\"Filtrer par Date de Reengagement\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Date d\\'Etat',\r\n      accessor: 'dateEtat',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.dateEtat}\r\n          placeholder=\"Filtrer par Date d'Etat\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Observation',\r\n      accessor: 'observation',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.observation}\r\n          placeholder=\"Filtrer par Observation\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Type de Poste',\r\n      accessor: 'typePoste',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.typePoste}\r\n          placeholder=\"Filtrer par Type de Poste\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Numero de Serie',\r\n      accessor: 'numeroDeSerie',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.numeroDeSerie}\r\n          placeholder=\"Filtrer par Numero de Serie\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      Header: 'Date d\\'Affectation',\r\n      accessor: 'dateAffectation',\r\n      Filter: ({ column }) => (\r\n        <SelectColumnFilter\r\n          column={column}\r\n          options={options.dateAffectation}\r\n          placeholder=\"Filtrer par Date d'Affectation\"\r\n          handleFilterChange={handleFilterChange}\r\n          handleRemoveSelectedValue={handleRemoveSelectedValue}\r\n        />\r\n      )\r\n    }\r\n  ], [currentPage, rowsPerPage, options, filters]);\r\n\r\n  const paginatedData = React.useMemo(() => {\r\n    const startIndex = (currentPage - 1) * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    return filteredData.slice(startIndex, endIndex);\r\n  }, [filteredData, currentPage, rowsPerPage]);\r\n\r\n  return (\r\n    <div className=\"telecom-pack-manager\">\r\n      <button className=\"telecompack-modify-back-button\" onClick={() => history.goBack()}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1>Telecom Pack Manager</h1>\r\n\r\n      <div className=\"add-pack\">\r\n        <table className=\"form-table telecom-pack-form-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Entite</label>\r\n                <CustomDropdown\r\n                  name=\"entite\"\r\n                  value={isEditing ? currentPack.entite : newPack.entite}\r\n                  options={options.entite || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Selectionner Entite\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Operateur</label>\r\n                <CustomDropdown\r\n                  name=\"operateur\"\r\n                  value={isEditing ? currentPack.operateur : newPack.operateur}\r\n                  options={options.operateur || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Selectionner Operateur\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Produit</label>\r\n                <CustomDropdown\r\n                  name=\"produit\"\r\n                  value={isEditing ? currentPack.produit : newPack.produit}\r\n                  options={options.produit || []}\r\n                  onChange={handleProduitChange}\r\n                  placeholder=\"Selectionner Produit\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            {(isEditing ? currentPack.produit : newPack.produit) && subfieldOptions.length > 0 && (\r\n              <tr>\r\n                <td colSpan=\"3\">\r\n                  <label className=\"telecom-pack-form-label\">Sous-Produit</label>\r\n                  <CustomDropdown\r\n                    name=\"produit2\"\r\n                    value={isEditing ? currentPack.produit2 : subfield}\r\n                    options={subfieldOptions}\r\n                    onChange={handleSubfieldChange}\r\n                    placeholder=\"Selectionner Produit2\"\r\n                  />\r\n                </td>\r\n              </tr>\r\n            )}\r\n            <tr>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Numero de GSM</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"numero\"\r\n                  value={isEditing ? currentPack.numero : newPack.numero}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"eg: 212XXXXXXXXX\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Etat d'abonnement</label>\r\n                <CustomDropdown\r\n                  name=\"etatAbonnement\"\r\n                  value={isEditing ? currentPack.etatAbonnement : newPack.etatAbonnement}\r\n                  options={options.etatAbonnement || []}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Selectionner Etat Abonnement\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Date d'abonnement</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"dateAbonnement\"\r\n                  value={isEditing ? currentPack.dateAbonnement : newPack.dateAbonnement}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer dateAbonnement\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Date de reengagement</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"dateReengagement\"\r\n                  value={isEditing ? currentPack.dateReengagement : newPack.dateReengagement}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer dateReengagement\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Date d'etat</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"dateEtat\"\r\n                  value={isEditing ? currentPack.dateEtat : newPack.dateEtat}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer date d'etat\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Observation</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"observation\"\r\n                  value={isEditing ? currentPack.observation : newPack.observation}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer une observation\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Type de Poste</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"typePoste\"\r\n                  value={isEditing ? currentPack.typePoste : newPack.typePoste}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer Type de Poste\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Numero de Serie</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"numeroDeSerie\"\r\n                  value={isEditing ? currentPack.numeroDeSerie : newPack.numeroDeSerie}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer Numero de Serie\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <label className=\"telecom-pack-form-label\">Date d'Affectation</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"dateAffectation\"\r\n                  value={isEditing ? currentPack.dateAffectation : newPack.dateAffectation}\r\n                  onChange={handleChange}\r\n                  className=\"input-field\"\r\n                  placeholder=\"Entrer Date d'Affectation\"\r\n                />\r\n              </td>\r\n            </tr>\r\n\r\n          </tbody>\r\n        </table>\r\n        <button className=\"add-pack\" onClick={isEditing ? handleUpdatePack : handleAddPack}>\r\n          {isEditing ? 'Update Pack' : 'Add Pack'}\r\n        </button>\r\n      </div>\r\n      <div className=\"selected-filters\">\r\n        <h3>Filtres Sélectionnés:</h3>\r\n        <div>\r\n          {Object.keys(filters).map((key) => (\r\n            filters[key].length > 0 && (\r\n              <div key={key}>\r\n                <strong>{key}:</strong> {filters[key].map((value) => (\r\n                  <span key={value} className=\"filter-badge\">\r\n                    {value} <button onClick={() => handleRemoveFilter(key, value)}>x</button>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            )\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"table-container\">\r\n        <Table columns={columns} data={paginatedData} />\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button onClick={() => paginate(1)} disabled={currentPage === 1}>{'<<'}</button>\r\n        <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1}>{'Précédent'}</button>\r\n        <span>Page {currentPage} of {totalPages}</span>\r\n        <button onClick={() => paginate(currentPage + 1)} disabled={currentPage === totalPages}>{'Suivant'}</button>\r\n        <button onClick={() => paginate(totalPages)} disabled={currentPage === totalPages}>{'>>'}</button>\r\n        <select value={rowsPerPage} onChange={handleRowsPerPageChange}>\r\n          <option value={10}>Show 10</option>\r\n          <option value={25}>Show 25</option>\r\n          <option value={50}>Show 50</option>\r\n          <option value={100}>Show 100</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({ column: { filterValue, setFilter, id }, options = [], placeholder, handleFilterChange, handleRemoveSelectedValue }) => {\r\n  const filterOptions = options.map(option => ({ value: option, label: option }));\r\n\r\n  const handleChange = (selectedOptions) => {\r\n    setFilter(selectedOptions ? selectedOptions.map(option => option.value) : undefined);\r\n    handleFilterChange(id, selectedOptions); // Call handleFilterChange to update filters\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Select\r\n        value={filterOptions.filter(option => filterValue && filterValue.includes(option.value))}\r\n        onChange={handleChange}\r\n        options={filterOptions}\r\n        isMulti\r\n        placeholder={placeholder || 'Filter...'}\r\n        className=\"filter-select\"\r\n        classNamePrefix=\"filter-select\"\r\n      />\r\n      <div className=\"selected-values\">\r\n        {filterValue && filterValue.map(value => (\r\n          <span key={value} className=\"filter-badge\">\r\n            {value} <button onClick={() => handleRemoveSelectedValue(id, value)}>x</button>\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Table = ({ columns, data }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  return (\r\n    <table {...getTableProps()} className=\"data-table telecompack-view-data-table\">\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                <div>\r\n                  {column.render('Header')}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' 🔽'\r\n                        : ' 🔼'\r\n                      : ''}\r\n                  </span>\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, index) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()} className={index % 2 === 0 ? \"telecompack-view-row-even\" : \"telecompack-view-row-odd\"}>\r\n              {row.cells.map(cell => (\r\n                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n              ))}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nconst CustomDropdown = ({ name, value, options, onChange, placeholder }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleSelect = (option) => {\r\n    onChange({ target: { name, value: option } });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown-container\">\r\n      <input\r\n        type=\"text\"\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n      />\r\n      <div className=\"dropdown-arrow\" onClick={() => setIsOpen(!isOpen)}>\r\n        ▼\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"dropdown-menu\">\r\n          {options.map((option, index) => (\r\n            <div key={index} className=\"dropdown-option\" onClick={() => handleSelect(option)}>\r\n              {option}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelecomPack;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelephoneLineLanding.js",[],"C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelecomPackView.js",["108","109","110","111"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { useTable, useSortBy, useFilters, usePagination } from 'react-table';\r\nimport Select from 'react-select';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as XLSX from 'xlsx';\r\nimport { FaSortUp, FaSortDown, FaSort } from 'react-icons/fa'; // Import icons\r\nimport './TelecomPackView.css';\r\n\r\nconst TelecomPackView = () => {\r\n  const [telecomPacks, setTelecomPacks] = useState([]);\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [uniqueValues, setUniqueValues] = useState({});\r\n  const [filters, setFilters] = useState({});\r\n  const history = useHistory();\r\n\r\n  const fetchTelecomPacks = async (appliedFilters = {}) => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/telecom-packs', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        params: appliedFilters, // Send filters as query params\r\n      });\r\n\r\n      const data = response.data.map(({ createdAt, updatedAt, id, ...rest }) => setDefaultValues(rest));\r\n      setTelecomPacks(data);\r\n      setOriginalData(data);\r\n\r\n      const headers = Object.keys(data[0] || {});\r\n      const uniqueValues = {};\r\n\r\n      headers.forEach(header => {\r\n        uniqueValues[header] = [...new Set(data.map(item => item[header]))].map(value => ({ value, label: value }));\r\n      });\r\n\r\n      const cols = [\r\n        {\r\n          Header: '#',\r\n          accessor: (row, i) => i + 1,\r\n          disableFilters: true,\r\n          disableSortBy: true,\r\n          width: 50,\r\n        },\r\n        ...headers.map((header) => ({\r\n          Header: header.replace(/_/g, ' '),\r\n          accessor: header,\r\n          Filter: props => <SelectColumnFilter {...props} originalData={data} uniqueValues={uniqueValues[header]} />,\r\n        })),\r\n      ];\r\n\r\n      setColumns(cols);\r\n      setUniqueValues(uniqueValues);\r\n    } catch (error) {\r\n      console.error('Error fetching Telecom Packs:', error);\r\n      alert('Error fetching Telecom Packs: ' + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTelecomPacks(filters);\r\n  }, [filters]);\r\n\r\n  const setDefaultValues = (data, defaultValue = '------') => {\r\n    return Object.fromEntries(\r\n      Object.entries(data).map(([key, value]) => {\r\n        if (value === '' || value === null) {\r\n          return [key, defaultValue];\r\n        }\r\n        return [key, value];\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    setFilters(prev => {\r\n      const updatedFilters = { ...prev };\r\n      updatedFilters[filterKey] = updatedFilters[filterKey].filter(val => val !== value);\r\n      if (updatedFilters[filterKey].length === 0) {\r\n        delete updatedFilters[filterKey];\r\n      }\r\n      return updatedFilters;\r\n    });\r\n  };\r\n\r\n  const Table = ({ columns, data }) => {\r\n    const defaultColumn = {\r\n      minWidth: 30,\r\n      width: 150,\r\n      maxWidth: 400,\r\n    };\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      prepareRow,\r\n      page,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      state: { pageIndex, pageSize },\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: { pageIndex: 0 },\r\n      },\r\n      useFilters,\r\n      useSortBy,\r\n      usePagination\r\n    );\r\n\r\n    return (\r\n      <div className=\"telecompack-view-table-container\">\r\n        <table {...getTableProps()} className=\"telecompack-view-data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted ? (\r\n                          column.isSortedDesc ? (\r\n                            <FaSortDown />\r\n                          ) : (\r\n                            <FaSortUp />\r\n                          )\r\n                        ) : (\r\n                          <FaSort />\r\n                        )}\r\n                      </span>\r\n                      <div>\r\n                        {column.canFilter ? column.render('Filter') : null}\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} className={rowIndex % 2 === 0 ? 'telecompack-view-row-even' : 'telecompack-view-row-odd'}>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"pagination-controls\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>{'Précédent'}</button>\r\n          <span>\r\n            Page{' '}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>{'Suivant'}</button>\r\n          <button onClick={() => gotoPage(pageOptions.length - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[10, 25, 50, 100].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const exportToExcel = (data) => {\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"TelecomPacks\");\r\n    XLSX.writeFile(wb, \"TelecomPacks.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"telecompack-view-container\">\r\n      <button className=\"telecompack-view-back-button\" onClick={() => history.push('/telecom-packs')}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1 className=\"telecompack-view-title\">Afficher Parc Telecom</h1>\r\n      <div className=\"telecompack-view-selected-filters-container\">\r\n        {Object.keys(filters).map((filterKey) => (\r\n          filters[filterKey].map((filterValue, index) => (\r\n            <span key={`${filterKey}-${index}`} className=\"telecompack-view-filter-chip\">\r\n              {`${filterKey}: ${filterValue}`} <button onClick={() => handleDelete(filterKey, filterValue)}>x</button>\r\n            </span>\r\n          ))\r\n        ))}\r\n      </div>\r\n      {columns.length > 0 && (\r\n        <Table\r\n          columns={columns}\r\n          data={originalData}\r\n        />\r\n      )}\r\n      <div className=\"telecompack-view-footer\">\r\n        <button\r\n          className=\"telecompack-view-export-button\"\r\n          onClick={() => exportToExcel(originalData)}\r\n        >\r\n          Export to Excel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({\r\n  column: { filterValue = [], setFilter, id },\r\n  uniqueValues\r\n}) => {\r\n  const [selectedOptions, setSelectedOptions] = useState(() => \r\n    filterValue.map(val => ({ value: val, label: val }))\r\n  );\r\n\r\n  const handleChange = (selected) => {\r\n    const values = selected ? selected.map(option => option.value) : [];\r\n    setSelectedOptions(selected);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n  };\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    const updatedOptions = selectedOptions.filter(option => option.value !== value);\r\n    const values = updatedOptions.map(option => option.value);\r\n    setSelectedOptions(updatedOptions);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n  };\r\n\r\n  return (\r\n    <div className=\"telecompack-view-filter-container\">\r\n      <Select\r\n        value={selectedOptions}\r\n        onChange={handleChange}\r\n        options={uniqueValues}\r\n        isMulti\r\n        placeholder={'Filter by...'}\r\n        className=\"telecompack-view-filter-select\"\r\n      />\r\n      {selectedOptions.length > 0 && (\r\n        <div className=\"telecompack-view-selected-filters\">\r\n          {selectedOptions.map((option, index) => (\r\n            <span key={index} className=\"telecompack-view-filter-chip\">\r\n              {option.value} <button onClick={() => handleDelete(id, option.value)}>x</button>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelecomPackView;\r\n","C:\\Users\\khald\\OneDrive\\Desktop\\Project_gestion_initial\\server\\client\\src\\components\\Dashboard\\TelephoneLineView.js",["112","113","114","115"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { useTable, useSortBy, useFilters, usePagination } from 'react-table';\r\nimport Select from 'react-select';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as XLSX from 'xlsx';\r\nimport { FaSortUp, FaSortDown, FaSort } from 'react-icons/fa'; // Import icons\r\nimport './TelephoneLineView.css';\r\n\r\nconst TelephoneLineView = () => {\r\n  const [telephoneLines, setTelephoneLines] = useState([]);\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [uniqueValues, setUniqueValues] = useState({});\r\n  const [filters, setFilters] = useState({});\r\n  const history = useHistory();\r\n\r\n  const fetchTelephoneLines = async (appliedFilters = {}) => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/telephone-lines', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        params: appliedFilters, // Send filters as query params\r\n      });\r\n\r\n      const data = response.data.map(({ createdAt, updatedAt, id, ...rest }) => setDefaultValues(rest));\r\n      setTelephoneLines(data);\r\n      setOriginalData(data);\r\n\r\n      const headers = Object.keys(data[0] || {});\r\n      const uniqueValues = {};\r\n\r\n      headers.forEach(header => {\r\n        uniqueValues[header] = [...new Set(data.map(item => item[header]))].map(value => ({ value, label: value }));\r\n      });\r\n\r\n      const cols = [\r\n        {\r\n          Header: '#',\r\n          accessor: (row, i) => i + 1,\r\n          disableFilters: true,\r\n          disableSortBy: true,\r\n          width: 50,\r\n        },\r\n        ...headers.map((header) => ({\r\n          Header: getCustomHeaderName(header),\r\n          accessor: header,\r\n          Filter: props => <SelectColumnFilter {...props} originalData={data} uniqueValues={uniqueValues[header]} />,\r\n        })),\r\n      ];\r\n\r\n      setColumns(cols);\r\n      setUniqueValues(uniqueValues);\r\n    } catch (error) {\r\n      console.error('Error fetching Telephone Lines:', error);\r\n      alert('Error fetching Telephone Lines: ' + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTelephoneLines(filters);\r\n  }, [filters]);\r\n\r\n  const setDefaultValues = (data, defaultValue = '------') => {\r\n    return Object.fromEntries(\r\n      Object.entries(data).map(([key, value]) => {\r\n        if (value === '' || value === null) {\r\n          return [key, defaultValue];\r\n        }\r\n        return [key, value];\r\n      })\r\n    );\r\n  };\r\n\r\n  const getCustomHeaderName = (header) => {\r\n    const customNames = {\r\n      numero_de_gsm: 'Numero de GSM',\r\n      full_name: 'Nom et Prénom',\r\n      code_entite: 'Code Entite',\r\n      direction: 'Direction',\r\n      fonction: 'Fonction',\r\n      operateur: 'Opérateur',\r\n      categorie: 'Catégorie',\r\n      poste_GSM: 'Poste GSM',\r\n      // Add more mappings as needed\r\n    };\r\n    return customNames[header] || header.replace(/_/g, ' ');\r\n  };\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    setFilters(prev => {\r\n      const updatedFilters = { ...prev };\r\n      updatedFilters[filterKey] = updatedFilters[filterKey].filter(val => val !== value);\r\n      if (updatedFilters[filterKey].length === 0) {\r\n        delete updatedFilters[filterKey];\r\n      }\r\n      return updatedFilters;\r\n    });\r\n  };\r\n\r\n  const Table = ({ columns, data }) => {\r\n    const defaultColumn = {\r\n      minWidth: 30,\r\n      width: 150,\r\n      maxWidth: 400,\r\n    };\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      prepareRow,\r\n      page,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      state: { pageIndex, pageSize },\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: { pageIndex: 0 },\r\n      },\r\n      useFilters,\r\n      useSortBy,\r\n      usePagination\r\n    );\r\n\r\n    return (\r\n      <div className=\"telephoneline-view-table-container\">\r\n        <table {...getTableProps()} className=\"telephoneline-view-data-table\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    <div style={{ width: column.width }}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted ? (\r\n                          column.isSortedDesc ? (\r\n                            <FaSortDown />\r\n                          ) : (\r\n                            <FaSortUp />\r\n                          )\r\n                        ) : (\r\n                          <FaSort />\r\n                        )}\r\n                      </span>\r\n                      <div>\r\n                        {column.canFilter ? column.render('Filter') : null}\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, rowIndex) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} className={rowIndex % 2 === 0 ? 'telephoneline-view-row-even' : 'telephoneline-view-row-odd'}>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"pagination-controls\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>{'Précédent'}</button>\r\n          <span>\r\n            Page{' '}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>{'Suivant'}</button>\r\n          <button onClick={() => gotoPage(pageOptions.length - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[10, 25, 50, 100].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const exportToExcel = (data) => {\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"TelephoneLines\");\r\n    XLSX.writeFile(wb, \"TelephoneLines.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"telephoneline-view-container\">\r\n      <button className=\"telephoneline-view-back-button\" onClick={() => history.push('/telephone-lines')}>\r\n        &#x21a9;\r\n      </button>\r\n      <h1 className=\"telephoneline-view-title\">Afficher Line Téléphonique</h1>\r\n      <div className=\"telephoneline-view-selected-filters-container\">\r\n        {Object.keys(filters).map((filterKey) => (\r\n          filters[filterKey].map((filterValue, index) => (\r\n            <span key={`${filterKey}-${index}`} className=\"telephoneline-view-filter-chip\">\r\n              {`${filterKey}: ${filterValue}`} <button onClick={() => handleDelete(filterKey, filterValue)}>x</button>\r\n            </span>\r\n          ))\r\n        ))}\r\n      </div>\r\n      {columns.length > 0 && (\r\n        <Table\r\n          columns={columns}\r\n          data={originalData}\r\n        />\r\n      )}\r\n      <div className=\"telephoneline-view-footer\">\r\n        <button\r\n          className=\"telephoneline-view-export-button\"\r\n          onClick={() => exportToExcel(originalData)}\r\n        >\r\n          Export to Excel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({\r\n  column: { filterValue = [], setFilter, id },\r\n  uniqueValues\r\n}) => {\r\n  const [selectedOptions, setSelectedOptions] = useState(() => \r\n    filterValue.map(val => ({ value: val, label: val }))\r\n  );\r\n\r\n  const handleChange = (selected) => {\r\n    const values = selected ? selected.map(option => option.value) : [];\r\n    setSelectedOptions(selected);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n  };\r\n\r\n  const handleDelete = (filterKey, value) => {\r\n    const updatedOptions = selectedOptions.filter(option => option.value !== value);\r\n    const values = updatedOptions.map(option => option.value);\r\n    setSelectedOptions(updatedOptions);\r\n    setFilter(values.length ? values : undefined); // Use undefined to clear the filter\r\n  };\r\n\r\n  return (\r\n    <div className=\"telephoneline-view-filter-container\">\r\n      <Select\r\n        value={selectedOptions}\r\n        onChange={handleChange}\r\n        options={uniqueValues}\r\n        isMulti\r\n        placeholder={'Filter by...'}\r\n        className=\"telephoneline-view-filter-select\"\r\n      />\r\n      {selectedOptions.length > 0 && (\r\n        <div className=\"telephoneline-view-selected-filters\">\r\n          {selectedOptions.map((option, index) => (\r\n            <span key={index} className=\"telephoneline-view-filter-chip\">\r\n              {option.value} <button onClick={() => handleDelete(id, option.value)}>x</button>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TelephoneLineView;\r\n",{"ruleId":"116","severity":1,"message":"117","line":18,"column":9,"nodeType":"118","messageId":"119","endLine":18,"endColumn":25},{"ruleId":"116","severity":1,"message":"120","line":21,"column":11,"nodeType":"118","messageId":"119","endLine":21,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":103,"column":6,"nodeType":"123","endLine":103,"endColumn":28,"suggestions":"124"},{"ruleId":"116","severity":1,"message":"125","line":17,"column":10,"nodeType":"118","messageId":"119","endLine":17,"endColumn":22},{"ruleId":"121","severity":1,"message":"126","line":23,"column":6,"nodeType":"123","endLine":23,"endColumn":8,"suggestions":"127"},{"ruleId":"116","severity":1,"message":"128","line":68,"column":18,"nodeType":"118","messageId":"119","endLine":68,"endColumn":27},{"ruleId":"116","severity":1,"message":"129","line":69,"column":10,"nodeType":"118","messageId":"119","endLine":69,"endColumn":25},{"ruleId":"121","severity":1,"message":"130","line":272,"column":6,"nodeType":"123","endLine":272,"endColumn":63,"suggestions":"131"},{"ruleId":"121","severity":1,"message":"132","line":318,"column":6,"nodeType":"123","endLine":318,"endColumn":72,"suggestions":"133"},{"ruleId":"116","severity":1,"message":"134","line":34,"column":10,"nodeType":"118","messageId":"119","endLine":34,"endColumn":24},{"ruleId":"116","severity":1,"message":"135","line":34,"column":26,"nodeType":"118","messageId":"119","endLine":34,"endColumn":43},{"ruleId":"121","severity":1,"message":"136","line":93,"column":6,"nodeType":"123","endLine":93,"endColumn":8,"suggestions":"137"},{"ruleId":"121","severity":1,"message":"138","line":269,"column":6,"nodeType":"123","endLine":269,"endColumn":59,"suggestions":"139"},{"ruleId":"116","severity":1,"message":"140","line":43,"column":10,"nodeType":"118","messageId":"119","endLine":43,"endColumn":22},{"ruleId":"116","severity":1,"message":"141","line":43,"column":24,"nodeType":"118","messageId":"119","endLine":43,"endColumn":39},{"ruleId":"121","severity":1,"message":"142","line":119,"column":6,"nodeType":"123","endLine":119,"endColumn":8,"suggestions":"143"},{"ruleId":"121","severity":1,"message":"144","line":503,"column":6,"nodeType":"123","endLine":503,"endColumn":50,"suggestions":"145"},{"ruleId":"116","severity":1,"message":"146","line":1,"column":38,"nodeType":"118","messageId":"119","endLine":1,"endColumn":45},{"ruleId":"116","severity":1,"message":"140","line":11,"column":10,"nodeType":"118","messageId":"119","endLine":11,"endColumn":22},{"ruleId":"116","severity":1,"message":"125","line":14,"column":10,"nodeType":"118","messageId":"119","endLine":14,"endColumn":22},{"ruleId":"121","severity":1,"message":"147","line":63,"column":6,"nodeType":"123","endLine":63,"endColumn":15,"suggestions":"148"},{"ruleId":"116","severity":1,"message":"146","line":1,"column":38,"nodeType":"118","messageId":"119","endLine":1,"endColumn":45},{"ruleId":"116","severity":1,"message":"134","line":11,"column":10,"nodeType":"118","messageId":"119","endLine":11,"endColumn":24},{"ruleId":"116","severity":1,"message":"125","line":14,"column":10,"nodeType":"118","messageId":"119","endLine":14,"endColumn":22},{"ruleId":"121","severity":1,"message":"149","line":63,"column":6,"nodeType":"123","endLine":63,"endColumn":15,"suggestions":"150"},"no-unused-vars","'handleNavigation' is assigned a value but never used.","Identifier","unusedVar","'savedPassword' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'countMatchingColumns' and 'filterColumns'. Either include them or remove the dependency array.","ArrayExpression",["151"],"'uniqueValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchITEquipments'. Either include it or remove the dependency array.",["152"],"'setSortBy' is assigned a value but never used.","'allITEquipments' is assigned a value but never used.","React Hook React.useMemo has unnecessary dependencies: 'currentPage' and 'rowsPerPage'. Either exclude them or remove the dependency array.",["153"],"React Hook React.useMemo has an unnecessary dependency: 'selectedFilters'. Either exclude it or remove the dependency array.",["154"],"'telephoneLines' is assigned a value but never used.","'setTelephoneLines' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'filters'. Either include it or remove the dependency array.",["155"],"React Hook React.useMemo has missing dependencies: 'handleDeleteLine', 'handleFilterChange', and 'handleRemoveFilter'. Either include them or remove the dependency array.",["156"],"'telecomPacks' is assigned a value but never used.","'setTelecomPacks' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'applyFilters' and 'filters'. Either include them or remove the dependency array.",["157"],"React Hook React.useMemo has missing dependencies: 'handleDeletePack', 'handleFilterChange', and 'handleRemoveSelectedValue'. Either include them or remove the dependency array.",["158"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchTelecomPacks'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'fetchTelephoneLines'. Either include it or remove the dependency array.",["160"],{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [selectedFile, schema, filterColumns, countMatchingColumns]",{"range":"181","text":"182"},"Update the dependencies array to be: [fetchITEquipments]",{"range":"183","text":"184"},"Update the dependencies array to be: [itEquipments, filters, sortBy]",{"range":"185","text":"186"},"Update the dependencies array to be: [newEquipment, currentPage, rowsPerPage, options]",{"range":"187","text":"188"},"Update the dependencies array to be: [filters]",{"range":"189","text":"190"},"Update the dependencies array to be: [newLine, currentPage, rowsPerPage, handleDeleteLine, options, handleFilterChange, handleRemoveFilter]",{"range":"191","text":"192"},"Update the dependencies array to be: [applyFilters, filters]",{"range":"193","text":"194"},"Update the dependencies array to be: [currentPage, rowsPerPage, handleDeletePack, options.entite, options.operateur, options.produit2, options.numero, options.etatAbonnement, options.dateAbonnement, options.dateReengagement, options.dateEtat, options.observation, options.typePoste, options.numeroDeSerie, options.dateAffectation, handleFilterChange, handleRemoveSelectedValue]",{"range":"195","text":"196"},"Update the dependencies array to be: [fetchTelecomPacks, filters]",{"range":"197","text":"198"},"Update the dependencies array to be: [fetchTelephoneLines, filters]",{"range":"199","text":"200"},[3342,3364],"[selectedFile, schema, filterColumns, countMatchingColumns]",[867,869],"[fetchITEquipments]",[8427,8484],"[itEquipments, filters, sortBy]",[10154,10220],"[newEquipment, currentPage, rowsPerPage, options]",[2880,2882],"[filters]",[8869,8922],"[newLine, currentPage, rowsPerPage, handleDeleteLine, options, handleFilterChange, handleRemoveFilter]",[3692,3694],"[applyFilters, filters]",[15944,15988],"[currentPage, rowsPerPage, handleDeletePack, options.entite, options.operateur, options.produit2, options.numero, options.etatAbonnement, options.dateAbonnement, options.dateReengagement, options.dateEtat, options.observation, options.typePoste, options.numeroDeSerie, options.dateAffectation, handleFilterChange, handleRemoveSelectedValue]",[2229,2238],"[fetchTelecomPacks, filters]",[2251,2260],"[fetchTelephoneLines, filters]"]